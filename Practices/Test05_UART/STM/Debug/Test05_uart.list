
Test05_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001edc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08001fe8  08001fe8  00011fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002060  08002060  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002060  08002060  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002060  08002060  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002060  08002060  00012060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002064  08002064  00012064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000005c  080020c4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  080020c4  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   000063ad  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012f9  00000000  00000000  00026475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000610  00000000  00000000  00027770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000049a  00000000  00000000  00027d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000160a5  00000000  00000000  0002821a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000078ab  00000000  00000000  0003e2bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000801bb  00000000  00000000  00045b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c68  00000000  00000000  000c5d28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000c7990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001fd0 	.word	0x08001fd0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08001fd0 	.word	0x08001fd0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08a      	sub	sp, #40	; 0x28
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t MSG[35] = {'\0'};
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	f107 0308 	add.w	r3, r7, #8
 800015a:	221f      	movs	r2, #31
 800015c:	2100      	movs	r1, #0
 800015e:	4618      	mov	r0, r3
 8000160:	f001 faa4 	bl	80016ac <memset>
	uint8_t X = 0;
 8000164:	2300      	movs	r3, #0
 8000166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800016a:	f000 f9b1 	bl	80004d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800016e:	f000 f81f 	bl	80001b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000172:	f000 f88d 	bl	8000290 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000176:	f000 f861 	bl	800023c <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(MSG, "Hello! Tracing X = %d\r\n", X);
 800017a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800017e:	1d3b      	adds	r3, r7, #4
 8000180:	4909      	ldr	r1, [pc, #36]	; (80001a8 <main+0x5c>)
 8000182:	4618      	mov	r0, r3
 8000184:	f001 fa72 	bl	800166c <siprintf>
	  HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);
 8000188:	1d39      	adds	r1, r7, #4
 800018a:	2364      	movs	r3, #100	; 0x64
 800018c:	2223      	movs	r2, #35	; 0x23
 800018e:	4807      	ldr	r0, [pc, #28]	; (80001ac <main+0x60>)
 8000190:	f001 f8ec 	bl	800136c <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000194:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000198:	f000 f9fc 	bl	8000594 <HAL_Delay>
	  X++;
 800019c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80001a0:	3301      	adds	r3, #1
 80001a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  {
 80001a6:	e7e8      	b.n	800017a <main+0x2e>
 80001a8:	08001fe8 	.word	0x08001fe8
 80001ac:	20000078 	.word	0x20000078

080001b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b090      	sub	sp, #64	; 0x40
 80001b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b6:	f107 0318 	add.w	r3, r7, #24
 80001ba:	2228      	movs	r2, #40	; 0x28
 80001bc:	2100      	movs	r1, #0
 80001be:	4618      	mov	r0, r3
 80001c0:	f001 fa74 	bl	80016ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
 80001ca:	605a      	str	r2, [r3, #4]
 80001cc:	609a      	str	r2, [r3, #8]
 80001ce:	60da      	str	r2, [r3, #12]
 80001d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001d2:	2301      	movs	r3, #1
 80001d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001dc:	2300      	movs	r3, #0
 80001de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e0:	2301      	movs	r3, #1
 80001e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e4:	2302      	movs	r3, #2
 80001e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f4:	f107 0318 	add.w	r3, r7, #24
 80001f8:	4618      	mov	r0, r3
 80001fa:	f000 fc57 	bl	8000aac <HAL_RCC_OscConfig>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b00      	cmp	r3, #0
 8000202:	d001      	beq.n	8000208 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000204:	f000 f866 	bl	80002d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000208:	230f      	movs	r3, #15
 800020a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800020c:	2302      	movs	r3, #2
 800020e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000210:	2300      	movs	r3, #0
 8000212:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000218:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800021a:	2300      	movs	r3, #0
 800021c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	2102      	movs	r1, #2
 8000222:	4618      	mov	r0, r3
 8000224:	f000 fec4 	bl	8000fb0 <HAL_RCC_ClockConfig>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800022e:	f000 f851 	bl	80002d4 <Error_Handler>
  }
}
 8000232:	bf00      	nop
 8000234:	3740      	adds	r7, #64	; 0x40
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
	...

0800023c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000240:	4b11      	ldr	r3, [pc, #68]	; (8000288 <MX_USART1_UART_Init+0x4c>)
 8000242:	4a12      	ldr	r2, [pc, #72]	; (800028c <MX_USART1_UART_Init+0x50>)
 8000244:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000246:	4b10      	ldr	r3, [pc, #64]	; (8000288 <MX_USART1_UART_Init+0x4c>)
 8000248:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800024c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800024e:	4b0e      	ldr	r3, [pc, #56]	; (8000288 <MX_USART1_UART_Init+0x4c>)
 8000250:	2200      	movs	r2, #0
 8000252:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000254:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <MX_USART1_UART_Init+0x4c>)
 8000256:	2200      	movs	r2, #0
 8000258:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800025a:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <MX_USART1_UART_Init+0x4c>)
 800025c:	2200      	movs	r2, #0
 800025e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000260:	4b09      	ldr	r3, [pc, #36]	; (8000288 <MX_USART1_UART_Init+0x4c>)
 8000262:	220c      	movs	r2, #12
 8000264:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000266:	4b08      	ldr	r3, [pc, #32]	; (8000288 <MX_USART1_UART_Init+0x4c>)
 8000268:	2200      	movs	r2, #0
 800026a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800026c:	4b06      	ldr	r3, [pc, #24]	; (8000288 <MX_USART1_UART_Init+0x4c>)
 800026e:	2200      	movs	r2, #0
 8000270:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000272:	4805      	ldr	r0, [pc, #20]	; (8000288 <MX_USART1_UART_Init+0x4c>)
 8000274:	f001 f82a 	bl	80012cc <HAL_UART_Init>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800027e:	f000 f829 	bl	80002d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	20000078 	.word	0x20000078
 800028c:	40013800 	.word	0x40013800

08000290 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000296:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <MX_GPIO_Init+0x40>)
 8000298:	699b      	ldr	r3, [r3, #24]
 800029a:	4a0d      	ldr	r2, [pc, #52]	; (80002d0 <MX_GPIO_Init+0x40>)
 800029c:	f043 0320 	orr.w	r3, r3, #32
 80002a0:	6193      	str	r3, [r2, #24]
 80002a2:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <MX_GPIO_Init+0x40>)
 80002a4:	699b      	ldr	r3, [r3, #24]
 80002a6:	f003 0320 	and.w	r3, r3, #32
 80002aa:	607b      	str	r3, [r7, #4]
 80002ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ae:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <MX_GPIO_Init+0x40>)
 80002b0:	699b      	ldr	r3, [r3, #24]
 80002b2:	4a07      	ldr	r2, [pc, #28]	; (80002d0 <MX_GPIO_Init+0x40>)
 80002b4:	f043 0304 	orr.w	r3, r3, #4
 80002b8:	6193      	str	r3, [r2, #24]
 80002ba:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <MX_GPIO_Init+0x40>)
 80002bc:	699b      	ldr	r3, [r3, #24]
 80002be:	f003 0304 	and.w	r3, r3, #4
 80002c2:	603b      	str	r3, [r7, #0]
 80002c4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002c6:	bf00      	nop
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr
 80002d0:	40021000 	.word	0x40021000

080002d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002d8:	b672      	cpsid	i
}
 80002da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002dc:	e7fe      	b.n	80002dc <Error_Handler+0x8>
	...

080002e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002e6:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <HAL_MspInit+0x40>)
 80002e8:	699b      	ldr	r3, [r3, #24]
 80002ea:	4a0d      	ldr	r2, [pc, #52]	; (8000320 <HAL_MspInit+0x40>)
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	6193      	str	r3, [r2, #24]
 80002f2:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <HAL_MspInit+0x40>)
 80002f4:	699b      	ldr	r3, [r3, #24]
 80002f6:	f003 0301 	and.w	r3, r3, #1
 80002fa:	607b      	str	r3, [r7, #4]
 80002fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002fe:	4b08      	ldr	r3, [pc, #32]	; (8000320 <HAL_MspInit+0x40>)
 8000300:	69db      	ldr	r3, [r3, #28]
 8000302:	4a07      	ldr	r2, [pc, #28]	; (8000320 <HAL_MspInit+0x40>)
 8000304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000308:	61d3      	str	r3, [r2, #28]
 800030a:	4b05      	ldr	r3, [pc, #20]	; (8000320 <HAL_MspInit+0x40>)
 800030c:	69db      	ldr	r3, [r3, #28]
 800030e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000312:	603b      	str	r3, [r7, #0]
 8000314:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr
 8000320:	40021000 	.word	0x40021000

08000324 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b088      	sub	sp, #32
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032c:	f107 0310 	add.w	r3, r7, #16
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	605a      	str	r2, [r3, #4]
 8000336:	609a      	str	r2, [r3, #8]
 8000338:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4a1c      	ldr	r2, [pc, #112]	; (80003b0 <HAL_UART_MspInit+0x8c>)
 8000340:	4293      	cmp	r3, r2
 8000342:	d131      	bne.n	80003a8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000344:	4b1b      	ldr	r3, [pc, #108]	; (80003b4 <HAL_UART_MspInit+0x90>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4a1a      	ldr	r2, [pc, #104]	; (80003b4 <HAL_UART_MspInit+0x90>)
 800034a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800034e:	6193      	str	r3, [r2, #24]
 8000350:	4b18      	ldr	r3, [pc, #96]	; (80003b4 <HAL_UART_MspInit+0x90>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000358:	60fb      	str	r3, [r7, #12]
 800035a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800035c:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <HAL_UART_MspInit+0x90>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	4a14      	ldr	r2, [pc, #80]	; (80003b4 <HAL_UART_MspInit+0x90>)
 8000362:	f043 0304 	orr.w	r3, r3, #4
 8000366:	6193      	str	r3, [r2, #24]
 8000368:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <HAL_UART_MspInit+0x90>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	f003 0304 	and.w	r3, r3, #4
 8000370:	60bb      	str	r3, [r7, #8]
 8000372:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000374:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000378:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800037a:	2302      	movs	r3, #2
 800037c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800037e:	2303      	movs	r3, #3
 8000380:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000382:	f107 0310 	add.w	r3, r7, #16
 8000386:	4619      	mov	r1, r3
 8000388:	480b      	ldr	r0, [pc, #44]	; (80003b8 <HAL_UART_MspInit+0x94>)
 800038a:	f000 fa0b 	bl	80007a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800038e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000392:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000394:	2300      	movs	r3, #0
 8000396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000398:	2300      	movs	r3, #0
 800039a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039c:	f107 0310 	add.w	r3, r7, #16
 80003a0:	4619      	mov	r1, r3
 80003a2:	4805      	ldr	r0, [pc, #20]	; (80003b8 <HAL_UART_MspInit+0x94>)
 80003a4:	f000 f9fe 	bl	80007a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80003a8:	bf00      	nop
 80003aa:	3720      	adds	r7, #32
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40013800 	.word	0x40013800
 80003b4:	40021000 	.word	0x40021000
 80003b8:	40010800 	.word	0x40010800

080003bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003c0:	e7fe      	b.n	80003c0 <NMI_Handler+0x4>

080003c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003c2:	b480      	push	{r7}
 80003c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003c6:	e7fe      	b.n	80003c6 <HardFault_Handler+0x4>

080003c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003cc:	e7fe      	b.n	80003cc <MemManage_Handler+0x4>

080003ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003ce:	b480      	push	{r7}
 80003d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003d2:	e7fe      	b.n	80003d2 <BusFault_Handler+0x4>

080003d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003d8:	e7fe      	b.n	80003d8 <UsageFault_Handler+0x4>

080003da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003da:	b480      	push	{r7}
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003de:	bf00      	nop
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bc80      	pop	{r7}
 80003e4:	4770      	bx	lr

080003e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003e6:	b480      	push	{r7}
 80003e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003ea:	bf00      	nop
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bc80      	pop	{r7}
 80003f0:	4770      	bx	lr

080003f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003f2:	b480      	push	{r7}
 80003f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003f6:	bf00      	nop
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr

080003fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003fe:	b580      	push	{r7, lr}
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000402:	f000 f8ab 	bl	800055c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
	...

0800040c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000414:	4a14      	ldr	r2, [pc, #80]	; (8000468 <_sbrk+0x5c>)
 8000416:	4b15      	ldr	r3, [pc, #84]	; (800046c <_sbrk+0x60>)
 8000418:	1ad3      	subs	r3, r2, r3
 800041a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800041c:	697b      	ldr	r3, [r7, #20]
 800041e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000420:	4b13      	ldr	r3, [pc, #76]	; (8000470 <_sbrk+0x64>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d102      	bne.n	800042e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000428:	4b11      	ldr	r3, [pc, #68]	; (8000470 <_sbrk+0x64>)
 800042a:	4a12      	ldr	r2, [pc, #72]	; (8000474 <_sbrk+0x68>)
 800042c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800042e:	4b10      	ldr	r3, [pc, #64]	; (8000470 <_sbrk+0x64>)
 8000430:	681a      	ldr	r2, [r3, #0]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4413      	add	r3, r2
 8000436:	693a      	ldr	r2, [r7, #16]
 8000438:	429a      	cmp	r2, r3
 800043a:	d207      	bcs.n	800044c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800043c:	f001 f93e 	bl	80016bc <__errno>
 8000440:	4603      	mov	r3, r0
 8000442:	220c      	movs	r2, #12
 8000444:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000446:	f04f 33ff 	mov.w	r3, #4294967295
 800044a:	e009      	b.n	8000460 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800044c:	4b08      	ldr	r3, [pc, #32]	; (8000470 <_sbrk+0x64>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000452:	4b07      	ldr	r3, [pc, #28]	; (8000470 <_sbrk+0x64>)
 8000454:	681a      	ldr	r2, [r3, #0]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4413      	add	r3, r2
 800045a:	4a05      	ldr	r2, [pc, #20]	; (8000470 <_sbrk+0x64>)
 800045c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800045e:	68fb      	ldr	r3, [r7, #12]
}
 8000460:	4618      	mov	r0, r3
 8000462:	3718      	adds	r7, #24
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20005000 	.word	0x20005000
 800046c:	00000400 	.word	0x00000400
 8000470:	200000c0 	.word	0x200000c0
 8000474:	20000210 	.word	0x20000210

08000478 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr

08000484 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000484:	f7ff fff8 	bl	8000478 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000488:	480b      	ldr	r0, [pc, #44]	; (80004b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800048a:	490c      	ldr	r1, [pc, #48]	; (80004bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800048c:	4a0c      	ldr	r2, [pc, #48]	; (80004c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800048e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000490:	e002      	b.n	8000498 <LoopCopyDataInit>

08000492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000496:	3304      	adds	r3, #4

08000498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800049a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800049c:	d3f9      	bcc.n	8000492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800049e:	4a09      	ldr	r2, [pc, #36]	; (80004c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004a0:	4c09      	ldr	r4, [pc, #36]	; (80004c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004a4:	e001      	b.n	80004aa <LoopFillZerobss>

080004a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a8:	3204      	adds	r2, #4

080004aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004ac:	d3fb      	bcc.n	80004a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004ae:	f001 f90b 	bl	80016c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004b2:	f7ff fe4b 	bl	800014c <main>
  bx lr
 80004b6:	4770      	bx	lr
  ldr r0, =_sdata
 80004b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004bc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80004c0:	08002068 	.word	0x08002068
  ldr r2, =_sbss
 80004c4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80004c8:	20000210 	.word	0x20000210

080004cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004cc:	e7fe      	b.n	80004cc <ADC1_2_IRQHandler>
	...

080004d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <HAL_Init+0x28>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a07      	ldr	r2, [pc, #28]	; (80004f8 <HAL_Init+0x28>)
 80004da:	f043 0310 	orr.w	r3, r3, #16
 80004de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004e0:	2003      	movs	r0, #3
 80004e2:	f000 f92b 	bl	800073c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004e6:	200f      	movs	r0, #15
 80004e8:	f000 f808 	bl	80004fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004ec:	f7ff fef8 	bl	80002e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004f0:	2300      	movs	r3, #0
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40022000 	.word	0x40022000

080004fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000504:	4b12      	ldr	r3, [pc, #72]	; (8000550 <HAL_InitTick+0x54>)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	4b12      	ldr	r3, [pc, #72]	; (8000554 <HAL_InitTick+0x58>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	4619      	mov	r1, r3
 800050e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000512:	fbb3 f3f1 	udiv	r3, r3, r1
 8000516:	fbb2 f3f3 	udiv	r3, r2, r3
 800051a:	4618      	mov	r0, r3
 800051c:	f000 f935 	bl	800078a <HAL_SYSTICK_Config>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000526:	2301      	movs	r3, #1
 8000528:	e00e      	b.n	8000548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2b0f      	cmp	r3, #15
 800052e:	d80a      	bhi.n	8000546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000530:	2200      	movs	r2, #0
 8000532:	6879      	ldr	r1, [r7, #4]
 8000534:	f04f 30ff 	mov.w	r0, #4294967295
 8000538:	f000 f90b 	bl	8000752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <HAL_InitTick+0x5c>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000542:	2300      	movs	r3, #0
 8000544:	e000      	b.n	8000548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000546:	2301      	movs	r3, #1
}
 8000548:	4618      	mov	r0, r3
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000000 	.word	0x20000000
 8000554:	20000008 	.word	0x20000008
 8000558:	20000004 	.word	0x20000004

0800055c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <HAL_IncTick+0x1c>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	461a      	mov	r2, r3
 8000566:	4b05      	ldr	r3, [pc, #20]	; (800057c <HAL_IncTick+0x20>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4413      	add	r3, r2
 800056c:	4a03      	ldr	r2, [pc, #12]	; (800057c <HAL_IncTick+0x20>)
 800056e:	6013      	str	r3, [r2, #0]
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	20000008 	.word	0x20000008
 800057c:	200000c4 	.word	0x200000c4

08000580 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  return uwTick;
 8000584:	4b02      	ldr	r3, [pc, #8]	; (8000590 <HAL_GetTick+0x10>)
 8000586:	681b      	ldr	r3, [r3, #0]
}
 8000588:	4618      	mov	r0, r3
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr
 8000590:	200000c4 	.word	0x200000c4

08000594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800059c:	f7ff fff0 	bl	8000580 <HAL_GetTick>
 80005a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005ac:	d005      	beq.n	80005ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <HAL_Delay+0x44>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	461a      	mov	r2, r3
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	4413      	add	r3, r2
 80005b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005ba:	bf00      	nop
 80005bc:	f7ff ffe0 	bl	8000580 <HAL_GetTick>
 80005c0:	4602      	mov	r2, r0
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	68fa      	ldr	r2, [r7, #12]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d8f7      	bhi.n	80005bc <HAL_Delay+0x28>
  {
  }
}
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000008 	.word	0x20000008

080005dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f003 0307 	and.w	r3, r3, #7
 80005ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <__NVIC_SetPriorityGrouping+0x44>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f2:	68ba      	ldr	r2, [r7, #8]
 80005f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005f8:	4013      	ands	r3, r2
 80005fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800060e:	4a04      	ldr	r2, [pc, #16]	; (8000620 <__NVIC_SetPriorityGrouping+0x44>)
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	60d3      	str	r3, [r2, #12]
}
 8000614:	bf00      	nop
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <__NVIC_GetPriorityGrouping+0x18>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	0a1b      	lsrs	r3, r3, #8
 800062e:	f003 0307 	and.w	r3, r3, #7
}
 8000632:	4618      	mov	r0, r3
 8000634:	46bd      	mov	sp, r7
 8000636:	bc80      	pop	{r7}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	6039      	str	r1, [r7, #0]
 800064a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800064c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000650:	2b00      	cmp	r3, #0
 8000652:	db0a      	blt.n	800066a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	b2da      	uxtb	r2, r3
 8000658:	490c      	ldr	r1, [pc, #48]	; (800068c <__NVIC_SetPriority+0x4c>)
 800065a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065e:	0112      	lsls	r2, r2, #4
 8000660:	b2d2      	uxtb	r2, r2
 8000662:	440b      	add	r3, r1
 8000664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000668:	e00a      	b.n	8000680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	b2da      	uxtb	r2, r3
 800066e:	4908      	ldr	r1, [pc, #32]	; (8000690 <__NVIC_SetPriority+0x50>)
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	f003 030f 	and.w	r3, r3, #15
 8000676:	3b04      	subs	r3, #4
 8000678:	0112      	lsls	r2, r2, #4
 800067a:	b2d2      	uxtb	r2, r2
 800067c:	440b      	add	r3, r1
 800067e:	761a      	strb	r2, [r3, #24]
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000e100 	.word	0xe000e100
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000694:	b480      	push	{r7}
 8000696:	b089      	sub	sp, #36	; 0x24
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	f003 0307 	and.w	r3, r3, #7
 80006a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a8:	69fb      	ldr	r3, [r7, #28]
 80006aa:	f1c3 0307 	rsb	r3, r3, #7
 80006ae:	2b04      	cmp	r3, #4
 80006b0:	bf28      	it	cs
 80006b2:	2304      	movcs	r3, #4
 80006b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	3304      	adds	r3, #4
 80006ba:	2b06      	cmp	r3, #6
 80006bc:	d902      	bls.n	80006c4 <NVIC_EncodePriority+0x30>
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	3b03      	subs	r3, #3
 80006c2:	e000      	b.n	80006c6 <NVIC_EncodePriority+0x32>
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c8:	f04f 32ff 	mov.w	r2, #4294967295
 80006cc:	69bb      	ldr	r3, [r7, #24]
 80006ce:	fa02 f303 	lsl.w	r3, r2, r3
 80006d2:	43da      	mvns	r2, r3
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	401a      	ands	r2, r3
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006dc:	f04f 31ff 	mov.w	r1, #4294967295
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	fa01 f303 	lsl.w	r3, r1, r3
 80006e6:	43d9      	mvns	r1, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ec:	4313      	orrs	r3, r2
         );
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3724      	adds	r7, #36	; 0x24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3b01      	subs	r3, #1
 8000704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000708:	d301      	bcc.n	800070e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800070a:	2301      	movs	r3, #1
 800070c:	e00f      	b.n	800072e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800070e:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <SysTick_Config+0x40>)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3b01      	subs	r3, #1
 8000714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000716:	210f      	movs	r1, #15
 8000718:	f04f 30ff 	mov.w	r0, #4294967295
 800071c:	f7ff ff90 	bl	8000640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <SysTick_Config+0x40>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000726:	4b04      	ldr	r3, [pc, #16]	; (8000738 <SysTick_Config+0x40>)
 8000728:	2207      	movs	r2, #7
 800072a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800072c:	2300      	movs	r3, #0
}
 800072e:	4618      	mov	r0, r3
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	e000e010 	.word	0xe000e010

0800073c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f7ff ff49 	bl	80005dc <__NVIC_SetPriorityGrouping>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000752:	b580      	push	{r7, lr}
 8000754:	b086      	sub	sp, #24
 8000756:	af00      	add	r7, sp, #0
 8000758:	4603      	mov	r3, r0
 800075a:	60b9      	str	r1, [r7, #8]
 800075c:	607a      	str	r2, [r7, #4]
 800075e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000764:	f7ff ff5e 	bl	8000624 <__NVIC_GetPriorityGrouping>
 8000768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	68b9      	ldr	r1, [r7, #8]
 800076e:	6978      	ldr	r0, [r7, #20]
 8000770:	f7ff ff90 	bl	8000694 <NVIC_EncodePriority>
 8000774:	4602      	mov	r2, r0
 8000776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800077a:	4611      	mov	r1, r2
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ff5f 	bl	8000640 <__NVIC_SetPriority>
}
 8000782:	bf00      	nop
 8000784:	3718      	adds	r7, #24
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b082      	sub	sp, #8
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff ffb0 	bl	80006f8 <SysTick_Config>
 8000798:	4603      	mov	r3, r0
}
 800079a:	4618      	mov	r0, r3
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b08b      	sub	sp, #44	; 0x2c
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007ae:	2300      	movs	r3, #0
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007b6:	e169      	b.n	8000a8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80007b8:	2201      	movs	r2, #1
 80007ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007bc:	fa02 f303 	lsl.w	r3, r2, r3
 80007c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	69fa      	ldr	r2, [r7, #28]
 80007c8:	4013      	ands	r3, r2
 80007ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007cc:	69ba      	ldr	r2, [r7, #24]
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	f040 8158 	bne.w	8000a86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	4a9a      	ldr	r2, [pc, #616]	; (8000a44 <HAL_GPIO_Init+0x2a0>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d05e      	beq.n	800089e <HAL_GPIO_Init+0xfa>
 80007e0:	4a98      	ldr	r2, [pc, #608]	; (8000a44 <HAL_GPIO_Init+0x2a0>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d875      	bhi.n	80008d2 <HAL_GPIO_Init+0x12e>
 80007e6:	4a98      	ldr	r2, [pc, #608]	; (8000a48 <HAL_GPIO_Init+0x2a4>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d058      	beq.n	800089e <HAL_GPIO_Init+0xfa>
 80007ec:	4a96      	ldr	r2, [pc, #600]	; (8000a48 <HAL_GPIO_Init+0x2a4>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d86f      	bhi.n	80008d2 <HAL_GPIO_Init+0x12e>
 80007f2:	4a96      	ldr	r2, [pc, #600]	; (8000a4c <HAL_GPIO_Init+0x2a8>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d052      	beq.n	800089e <HAL_GPIO_Init+0xfa>
 80007f8:	4a94      	ldr	r2, [pc, #592]	; (8000a4c <HAL_GPIO_Init+0x2a8>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d869      	bhi.n	80008d2 <HAL_GPIO_Init+0x12e>
 80007fe:	4a94      	ldr	r2, [pc, #592]	; (8000a50 <HAL_GPIO_Init+0x2ac>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d04c      	beq.n	800089e <HAL_GPIO_Init+0xfa>
 8000804:	4a92      	ldr	r2, [pc, #584]	; (8000a50 <HAL_GPIO_Init+0x2ac>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d863      	bhi.n	80008d2 <HAL_GPIO_Init+0x12e>
 800080a:	4a92      	ldr	r2, [pc, #584]	; (8000a54 <HAL_GPIO_Init+0x2b0>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d046      	beq.n	800089e <HAL_GPIO_Init+0xfa>
 8000810:	4a90      	ldr	r2, [pc, #576]	; (8000a54 <HAL_GPIO_Init+0x2b0>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d85d      	bhi.n	80008d2 <HAL_GPIO_Init+0x12e>
 8000816:	2b12      	cmp	r3, #18
 8000818:	d82a      	bhi.n	8000870 <HAL_GPIO_Init+0xcc>
 800081a:	2b12      	cmp	r3, #18
 800081c:	d859      	bhi.n	80008d2 <HAL_GPIO_Init+0x12e>
 800081e:	a201      	add	r2, pc, #4	; (adr r2, 8000824 <HAL_GPIO_Init+0x80>)
 8000820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000824:	0800089f 	.word	0x0800089f
 8000828:	08000879 	.word	0x08000879
 800082c:	0800088b 	.word	0x0800088b
 8000830:	080008cd 	.word	0x080008cd
 8000834:	080008d3 	.word	0x080008d3
 8000838:	080008d3 	.word	0x080008d3
 800083c:	080008d3 	.word	0x080008d3
 8000840:	080008d3 	.word	0x080008d3
 8000844:	080008d3 	.word	0x080008d3
 8000848:	080008d3 	.word	0x080008d3
 800084c:	080008d3 	.word	0x080008d3
 8000850:	080008d3 	.word	0x080008d3
 8000854:	080008d3 	.word	0x080008d3
 8000858:	080008d3 	.word	0x080008d3
 800085c:	080008d3 	.word	0x080008d3
 8000860:	080008d3 	.word	0x080008d3
 8000864:	080008d3 	.word	0x080008d3
 8000868:	08000881 	.word	0x08000881
 800086c:	08000895 	.word	0x08000895
 8000870:	4a79      	ldr	r2, [pc, #484]	; (8000a58 <HAL_GPIO_Init+0x2b4>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d013      	beq.n	800089e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000876:	e02c      	b.n	80008d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	623b      	str	r3, [r7, #32]
          break;
 800087e:	e029      	b.n	80008d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	3304      	adds	r3, #4
 8000886:	623b      	str	r3, [r7, #32]
          break;
 8000888:	e024      	b.n	80008d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	68db      	ldr	r3, [r3, #12]
 800088e:	3308      	adds	r3, #8
 8000890:	623b      	str	r3, [r7, #32]
          break;
 8000892:	e01f      	b.n	80008d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	330c      	adds	r3, #12
 800089a:	623b      	str	r3, [r7, #32]
          break;
 800089c:	e01a      	b.n	80008d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d102      	bne.n	80008ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008a6:	2304      	movs	r3, #4
 80008a8:	623b      	str	r3, [r7, #32]
          break;
 80008aa:	e013      	b.n	80008d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d105      	bne.n	80008c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008b4:	2308      	movs	r3, #8
 80008b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	69fa      	ldr	r2, [r7, #28]
 80008bc:	611a      	str	r2, [r3, #16]
          break;
 80008be:	e009      	b.n	80008d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008c0:	2308      	movs	r3, #8
 80008c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	69fa      	ldr	r2, [r7, #28]
 80008c8:	615a      	str	r2, [r3, #20]
          break;
 80008ca:	e003      	b.n	80008d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
          break;
 80008d0:	e000      	b.n	80008d4 <HAL_GPIO_Init+0x130>
          break;
 80008d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	2bff      	cmp	r3, #255	; 0xff
 80008d8:	d801      	bhi.n	80008de <HAL_GPIO_Init+0x13a>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	e001      	b.n	80008e2 <HAL_GPIO_Init+0x13e>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	3304      	adds	r3, #4
 80008e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	2bff      	cmp	r3, #255	; 0xff
 80008e8:	d802      	bhi.n	80008f0 <HAL_GPIO_Init+0x14c>
 80008ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	e002      	b.n	80008f6 <HAL_GPIO_Init+0x152>
 80008f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f2:	3b08      	subs	r3, #8
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	210f      	movs	r1, #15
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	fa01 f303 	lsl.w	r3, r1, r3
 8000904:	43db      	mvns	r3, r3
 8000906:	401a      	ands	r2, r3
 8000908:	6a39      	ldr	r1, [r7, #32]
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	fa01 f303 	lsl.w	r3, r1, r3
 8000910:	431a      	orrs	r2, r3
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	2b00      	cmp	r3, #0
 8000920:	f000 80b1 	beq.w	8000a86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000924:	4b4d      	ldr	r3, [pc, #308]	; (8000a5c <HAL_GPIO_Init+0x2b8>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	4a4c      	ldr	r2, [pc, #304]	; (8000a5c <HAL_GPIO_Init+0x2b8>)
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	6193      	str	r3, [r2, #24]
 8000930:	4b4a      	ldr	r3, [pc, #296]	; (8000a5c <HAL_GPIO_Init+0x2b8>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800093c:	4a48      	ldr	r2, [pc, #288]	; (8000a60 <HAL_GPIO_Init+0x2bc>)
 800093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000940:	089b      	lsrs	r3, r3, #2
 8000942:	3302      	adds	r3, #2
 8000944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000948:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094c:	f003 0303 	and.w	r3, r3, #3
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	220f      	movs	r2, #15
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	43db      	mvns	r3, r3
 800095a:	68fa      	ldr	r2, [r7, #12]
 800095c:	4013      	ands	r3, r2
 800095e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4a40      	ldr	r2, [pc, #256]	; (8000a64 <HAL_GPIO_Init+0x2c0>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d013      	beq.n	8000990 <HAL_GPIO_Init+0x1ec>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a3f      	ldr	r2, [pc, #252]	; (8000a68 <HAL_GPIO_Init+0x2c4>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d00d      	beq.n	800098c <HAL_GPIO_Init+0x1e8>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a3e      	ldr	r2, [pc, #248]	; (8000a6c <HAL_GPIO_Init+0x2c8>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d007      	beq.n	8000988 <HAL_GPIO_Init+0x1e4>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4a3d      	ldr	r2, [pc, #244]	; (8000a70 <HAL_GPIO_Init+0x2cc>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d101      	bne.n	8000984 <HAL_GPIO_Init+0x1e0>
 8000980:	2303      	movs	r3, #3
 8000982:	e006      	b.n	8000992 <HAL_GPIO_Init+0x1ee>
 8000984:	2304      	movs	r3, #4
 8000986:	e004      	b.n	8000992 <HAL_GPIO_Init+0x1ee>
 8000988:	2302      	movs	r3, #2
 800098a:	e002      	b.n	8000992 <HAL_GPIO_Init+0x1ee>
 800098c:	2301      	movs	r3, #1
 800098e:	e000      	b.n	8000992 <HAL_GPIO_Init+0x1ee>
 8000990:	2300      	movs	r3, #0
 8000992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000994:	f002 0203 	and.w	r2, r2, #3
 8000998:	0092      	lsls	r2, r2, #2
 800099a:	4093      	lsls	r3, r2
 800099c:	68fa      	ldr	r2, [r7, #12]
 800099e:	4313      	orrs	r3, r2
 80009a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009a2:	492f      	ldr	r1, [pc, #188]	; (8000a60 <HAL_GPIO_Init+0x2bc>)
 80009a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a6:	089b      	lsrs	r3, r3, #2
 80009a8:	3302      	adds	r3, #2
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d006      	beq.n	80009ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009bc:	4b2d      	ldr	r3, [pc, #180]	; (8000a74 <HAL_GPIO_Init+0x2d0>)
 80009be:	689a      	ldr	r2, [r3, #8]
 80009c0:	492c      	ldr	r1, [pc, #176]	; (8000a74 <HAL_GPIO_Init+0x2d0>)
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	608b      	str	r3, [r1, #8]
 80009c8:	e006      	b.n	80009d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009ca:	4b2a      	ldr	r3, [pc, #168]	; (8000a74 <HAL_GPIO_Init+0x2d0>)
 80009cc:	689a      	ldr	r2, [r3, #8]
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	43db      	mvns	r3, r3
 80009d2:	4928      	ldr	r1, [pc, #160]	; (8000a74 <HAL_GPIO_Init+0x2d0>)
 80009d4:	4013      	ands	r3, r2
 80009d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d006      	beq.n	80009f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80009e4:	4b23      	ldr	r3, [pc, #140]	; (8000a74 <HAL_GPIO_Init+0x2d0>)
 80009e6:	68da      	ldr	r2, [r3, #12]
 80009e8:	4922      	ldr	r1, [pc, #136]	; (8000a74 <HAL_GPIO_Init+0x2d0>)
 80009ea:	69bb      	ldr	r3, [r7, #24]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	60cb      	str	r3, [r1, #12]
 80009f0:	e006      	b.n	8000a00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009f2:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <HAL_GPIO_Init+0x2d0>)
 80009f4:	68da      	ldr	r2, [r3, #12]
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	43db      	mvns	r3, r3
 80009fa:	491e      	ldr	r1, [pc, #120]	; (8000a74 <HAL_GPIO_Init+0x2d0>)
 80009fc:	4013      	ands	r3, r2
 80009fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d006      	beq.n	8000a1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <HAL_GPIO_Init+0x2d0>)
 8000a0e:	685a      	ldr	r2, [r3, #4]
 8000a10:	4918      	ldr	r1, [pc, #96]	; (8000a74 <HAL_GPIO_Init+0x2d0>)
 8000a12:	69bb      	ldr	r3, [r7, #24]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	604b      	str	r3, [r1, #4]
 8000a18:	e006      	b.n	8000a28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a1a:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <HAL_GPIO_Init+0x2d0>)
 8000a1c:	685a      	ldr	r2, [r3, #4]
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	43db      	mvns	r3, r3
 8000a22:	4914      	ldr	r1, [pc, #80]	; (8000a74 <HAL_GPIO_Init+0x2d0>)
 8000a24:	4013      	ands	r3, r2
 8000a26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d021      	beq.n	8000a78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <HAL_GPIO_Init+0x2d0>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	490e      	ldr	r1, [pc, #56]	; (8000a74 <HAL_GPIO_Init+0x2d0>)
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	600b      	str	r3, [r1, #0]
 8000a40:	e021      	b.n	8000a86 <HAL_GPIO_Init+0x2e2>
 8000a42:	bf00      	nop
 8000a44:	10320000 	.word	0x10320000
 8000a48:	10310000 	.word	0x10310000
 8000a4c:	10220000 	.word	0x10220000
 8000a50:	10210000 	.word	0x10210000
 8000a54:	10120000 	.word	0x10120000
 8000a58:	10110000 	.word	0x10110000
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	40010000 	.word	0x40010000
 8000a64:	40010800 	.word	0x40010800
 8000a68:	40010c00 	.word	0x40010c00
 8000a6c:	40011000 	.word	0x40011000
 8000a70:	40011400 	.word	0x40011400
 8000a74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a78:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <HAL_GPIO_Init+0x304>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	4909      	ldr	r1, [pc, #36]	; (8000aa8 <HAL_GPIO_Init+0x304>)
 8000a82:	4013      	ands	r3, r2
 8000a84:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a88:	3301      	adds	r3, #1
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a92:	fa22 f303 	lsr.w	r3, r2, r3
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f47f ae8e 	bne.w	80007b8 <HAL_GPIO_Init+0x14>
  }
}
 8000a9c:	bf00      	nop
 8000a9e:	bf00      	nop
 8000aa0:	372c      	adds	r7, #44	; 0x2c
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr
 8000aa8:	40010400 	.word	0x40010400

08000aac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d101      	bne.n	8000abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	e272      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	f000 8087 	beq.w	8000bda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000acc:	4b92      	ldr	r3, [pc, #584]	; (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f003 030c 	and.w	r3, r3, #12
 8000ad4:	2b04      	cmp	r3, #4
 8000ad6:	d00c      	beq.n	8000af2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ad8:	4b8f      	ldr	r3, [pc, #572]	; (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f003 030c 	and.w	r3, r3, #12
 8000ae0:	2b08      	cmp	r3, #8
 8000ae2:	d112      	bne.n	8000b0a <HAL_RCC_OscConfig+0x5e>
 8000ae4:	4b8c      	ldr	r3, [pc, #560]	; (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000af0:	d10b      	bne.n	8000b0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000af2:	4b89      	ldr	r3, [pc, #548]	; (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d06c      	beq.n	8000bd8 <HAL_RCC_OscConfig+0x12c>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d168      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e24c      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b12:	d106      	bne.n	8000b22 <HAL_RCC_OscConfig+0x76>
 8000b14:	4b80      	ldr	r3, [pc, #512]	; (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a7f      	ldr	r2, [pc, #508]	; (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b1e:	6013      	str	r3, [r2, #0]
 8000b20:	e02e      	b.n	8000b80 <HAL_RCC_OscConfig+0xd4>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d10c      	bne.n	8000b44 <HAL_RCC_OscConfig+0x98>
 8000b2a:	4b7b      	ldr	r3, [pc, #492]	; (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a7a      	ldr	r2, [pc, #488]	; (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b34:	6013      	str	r3, [r2, #0]
 8000b36:	4b78      	ldr	r3, [pc, #480]	; (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a77      	ldr	r2, [pc, #476]	; (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b40:	6013      	str	r3, [r2, #0]
 8000b42:	e01d      	b.n	8000b80 <HAL_RCC_OscConfig+0xd4>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b4c:	d10c      	bne.n	8000b68 <HAL_RCC_OscConfig+0xbc>
 8000b4e:	4b72      	ldr	r3, [pc, #456]	; (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a71      	ldr	r2, [pc, #452]	; (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b58:	6013      	str	r3, [r2, #0]
 8000b5a:	4b6f      	ldr	r3, [pc, #444]	; (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a6e      	ldr	r2, [pc, #440]	; (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b64:	6013      	str	r3, [r2, #0]
 8000b66:	e00b      	b.n	8000b80 <HAL_RCC_OscConfig+0xd4>
 8000b68:	4b6b      	ldr	r3, [pc, #428]	; (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a6a      	ldr	r2, [pc, #424]	; (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	4b68      	ldr	r3, [pc, #416]	; (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a67      	ldr	r2, [pc, #412]	; (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d013      	beq.n	8000bb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b88:	f7ff fcfa 	bl	8000580 <HAL_GetTick>
 8000b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b8e:	e008      	b.n	8000ba2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b90:	f7ff fcf6 	bl	8000580 <HAL_GetTick>
 8000b94:	4602      	mov	r2, r0
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	2b64      	cmp	r3, #100	; 0x64
 8000b9c:	d901      	bls.n	8000ba2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	e200      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ba2:	4b5d      	ldr	r3, [pc, #372]	; (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d0f0      	beq.n	8000b90 <HAL_RCC_OscConfig+0xe4>
 8000bae:	e014      	b.n	8000bda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bb0:	f7ff fce6 	bl	8000580 <HAL_GetTick>
 8000bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bb6:	e008      	b.n	8000bca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bb8:	f7ff fce2 	bl	8000580 <HAL_GetTick>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	2b64      	cmp	r3, #100	; 0x64
 8000bc4:	d901      	bls.n	8000bca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	e1ec      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bca:	4b53      	ldr	r3, [pc, #332]	; (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1f0      	bne.n	8000bb8 <HAL_RCC_OscConfig+0x10c>
 8000bd6:	e000      	b.n	8000bda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d063      	beq.n	8000cae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000be6:	4b4c      	ldr	r3, [pc, #304]	; (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f003 030c 	and.w	r3, r3, #12
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d00b      	beq.n	8000c0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000bf2:	4b49      	ldr	r3, [pc, #292]	; (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f003 030c 	and.w	r3, r3, #12
 8000bfa:	2b08      	cmp	r3, #8
 8000bfc:	d11c      	bne.n	8000c38 <HAL_RCC_OscConfig+0x18c>
 8000bfe:	4b46      	ldr	r3, [pc, #280]	; (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d116      	bne.n	8000c38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c0a:	4b43      	ldr	r3, [pc, #268]	; (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d005      	beq.n	8000c22 <HAL_RCC_OscConfig+0x176>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	691b      	ldr	r3, [r3, #16]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d001      	beq.n	8000c22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e1c0      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c22:	4b3d      	ldr	r3, [pc, #244]	; (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	00db      	lsls	r3, r3, #3
 8000c30:	4939      	ldr	r1, [pc, #228]	; (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000c32:	4313      	orrs	r3, r2
 8000c34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c36:	e03a      	b.n	8000cae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	691b      	ldr	r3, [r3, #16]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d020      	beq.n	8000c82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c40:	4b36      	ldr	r3, [pc, #216]	; (8000d1c <HAL_RCC_OscConfig+0x270>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c46:	f7ff fc9b 	bl	8000580 <HAL_GetTick>
 8000c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c4c:	e008      	b.n	8000c60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c4e:	f7ff fc97 	bl	8000580 <HAL_GetTick>
 8000c52:	4602      	mov	r2, r0
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d901      	bls.n	8000c60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	e1a1      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c60:	4b2d      	ldr	r3, [pc, #180]	; (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f003 0302 	and.w	r3, r3, #2
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d0f0      	beq.n	8000c4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c6c:	4b2a      	ldr	r3, [pc, #168]	; (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	695b      	ldr	r3, [r3, #20]
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	4927      	ldr	r1, [pc, #156]	; (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	600b      	str	r3, [r1, #0]
 8000c80:	e015      	b.n	8000cae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c82:	4b26      	ldr	r3, [pc, #152]	; (8000d1c <HAL_RCC_OscConfig+0x270>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c88:	f7ff fc7a 	bl	8000580 <HAL_GetTick>
 8000c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c8e:	e008      	b.n	8000ca2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c90:	f7ff fc76 	bl	8000580 <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d901      	bls.n	8000ca2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e180      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ca2:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1f0      	bne.n	8000c90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f003 0308 	and.w	r3, r3, #8
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d03a      	beq.n	8000d30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d019      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cc2:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <HAL_RCC_OscConfig+0x274>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cc8:	f7ff fc5a 	bl	8000580 <HAL_GetTick>
 8000ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cce:	e008      	b.n	8000ce2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cd0:	f7ff fc56 	bl	8000580 <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d901      	bls.n	8000ce2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e160      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d0f0      	beq.n	8000cd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000cee:	2001      	movs	r0, #1
 8000cf0:	f000 face 	bl	8001290 <RCC_Delay>
 8000cf4:	e01c      	b.n	8000d30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <HAL_RCC_OscConfig+0x274>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cfc:	f7ff fc40 	bl	8000580 <HAL_GetTick>
 8000d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d02:	e00f      	b.n	8000d24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d04:	f7ff fc3c 	bl	8000580 <HAL_GetTick>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d908      	bls.n	8000d24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d12:	2303      	movs	r3, #3
 8000d14:	e146      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
 8000d16:	bf00      	nop
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	42420000 	.word	0x42420000
 8000d20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d24:	4b92      	ldr	r3, [pc, #584]	; (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d28:	f003 0302 	and.w	r3, r3, #2
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1e9      	bne.n	8000d04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	f000 80a6 	beq.w	8000e8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d42:	4b8b      	ldr	r3, [pc, #556]	; (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d10d      	bne.n	8000d6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	4b88      	ldr	r3, [pc, #544]	; (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	4a87      	ldr	r2, [pc, #540]	; (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d58:	61d3      	str	r3, [r2, #28]
 8000d5a:	4b85      	ldr	r3, [pc, #532]	; (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d66:	2301      	movs	r3, #1
 8000d68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d6a:	4b82      	ldr	r3, [pc, #520]	; (8000f74 <HAL_RCC_OscConfig+0x4c8>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d118      	bne.n	8000da8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d76:	4b7f      	ldr	r3, [pc, #508]	; (8000f74 <HAL_RCC_OscConfig+0x4c8>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a7e      	ldr	r2, [pc, #504]	; (8000f74 <HAL_RCC_OscConfig+0x4c8>)
 8000d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d82:	f7ff fbfd 	bl	8000580 <HAL_GetTick>
 8000d86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d88:	e008      	b.n	8000d9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d8a:	f7ff fbf9 	bl	8000580 <HAL_GetTick>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	2b64      	cmp	r3, #100	; 0x64
 8000d96:	d901      	bls.n	8000d9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	e103      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d9c:	4b75      	ldr	r3, [pc, #468]	; (8000f74 <HAL_RCC_OscConfig+0x4c8>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d0f0      	beq.n	8000d8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d106      	bne.n	8000dbe <HAL_RCC_OscConfig+0x312>
 8000db0:	4b6f      	ldr	r3, [pc, #444]	; (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000db2:	6a1b      	ldr	r3, [r3, #32]
 8000db4:	4a6e      	ldr	r2, [pc, #440]	; (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	6213      	str	r3, [r2, #32]
 8000dbc:	e02d      	b.n	8000e1a <HAL_RCC_OscConfig+0x36e>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d10c      	bne.n	8000de0 <HAL_RCC_OscConfig+0x334>
 8000dc6:	4b6a      	ldr	r3, [pc, #424]	; (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000dc8:	6a1b      	ldr	r3, [r3, #32]
 8000dca:	4a69      	ldr	r2, [pc, #420]	; (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000dcc:	f023 0301 	bic.w	r3, r3, #1
 8000dd0:	6213      	str	r3, [r2, #32]
 8000dd2:	4b67      	ldr	r3, [pc, #412]	; (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000dd4:	6a1b      	ldr	r3, [r3, #32]
 8000dd6:	4a66      	ldr	r2, [pc, #408]	; (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000dd8:	f023 0304 	bic.w	r3, r3, #4
 8000ddc:	6213      	str	r3, [r2, #32]
 8000dde:	e01c      	b.n	8000e1a <HAL_RCC_OscConfig+0x36e>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	2b05      	cmp	r3, #5
 8000de6:	d10c      	bne.n	8000e02 <HAL_RCC_OscConfig+0x356>
 8000de8:	4b61      	ldr	r3, [pc, #388]	; (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000dea:	6a1b      	ldr	r3, [r3, #32]
 8000dec:	4a60      	ldr	r2, [pc, #384]	; (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000dee:	f043 0304 	orr.w	r3, r3, #4
 8000df2:	6213      	str	r3, [r2, #32]
 8000df4:	4b5e      	ldr	r3, [pc, #376]	; (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000df6:	6a1b      	ldr	r3, [r3, #32]
 8000df8:	4a5d      	ldr	r2, [pc, #372]	; (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	6213      	str	r3, [r2, #32]
 8000e00:	e00b      	b.n	8000e1a <HAL_RCC_OscConfig+0x36e>
 8000e02:	4b5b      	ldr	r3, [pc, #364]	; (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000e04:	6a1b      	ldr	r3, [r3, #32]
 8000e06:	4a5a      	ldr	r2, [pc, #360]	; (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000e08:	f023 0301 	bic.w	r3, r3, #1
 8000e0c:	6213      	str	r3, [r2, #32]
 8000e0e:	4b58      	ldr	r3, [pc, #352]	; (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000e10:	6a1b      	ldr	r3, [r3, #32]
 8000e12:	4a57      	ldr	r2, [pc, #348]	; (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000e14:	f023 0304 	bic.w	r3, r3, #4
 8000e18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d015      	beq.n	8000e4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e22:	f7ff fbad 	bl	8000580 <HAL_GetTick>
 8000e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e28:	e00a      	b.n	8000e40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e2a:	f7ff fba9 	bl	8000580 <HAL_GetTick>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d901      	bls.n	8000e40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	e0b1      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e40:	4b4b      	ldr	r3, [pc, #300]	; (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000e42:	6a1b      	ldr	r3, [r3, #32]
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d0ee      	beq.n	8000e2a <HAL_RCC_OscConfig+0x37e>
 8000e4c:	e014      	b.n	8000e78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e4e:	f7ff fb97 	bl	8000580 <HAL_GetTick>
 8000e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e54:	e00a      	b.n	8000e6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e56:	f7ff fb93 	bl	8000580 <HAL_GetTick>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d901      	bls.n	8000e6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e09b      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e6c:	4b40      	ldr	r3, [pc, #256]	; (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000e6e:	6a1b      	ldr	r3, [r3, #32]
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d1ee      	bne.n	8000e56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000e78:	7dfb      	ldrb	r3, [r7, #23]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d105      	bne.n	8000e8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e7e:	4b3c      	ldr	r3, [pc, #240]	; (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	4a3b      	ldr	r2, [pc, #236]	; (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f000 8087 	beq.w	8000fa2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e94:	4b36      	ldr	r3, [pc, #216]	; (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 030c 	and.w	r3, r3, #12
 8000e9c:	2b08      	cmp	r3, #8
 8000e9e:	d061      	beq.n	8000f64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	69db      	ldr	r3, [r3, #28]
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d146      	bne.n	8000f36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ea8:	4b33      	ldr	r3, [pc, #204]	; (8000f78 <HAL_RCC_OscConfig+0x4cc>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eae:	f7ff fb67 	bl	8000580 <HAL_GetTick>
 8000eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eb4:	e008      	b.n	8000ec8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000eb6:	f7ff fb63 	bl	8000580 <HAL_GetTick>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d901      	bls.n	8000ec8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e06d      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ec8:	4b29      	ldr	r3, [pc, #164]	; (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1f0      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a1b      	ldr	r3, [r3, #32]
 8000ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000edc:	d108      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ede:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	4921      	ldr	r1, [pc, #132]	; (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000eec:	4313      	orrs	r3, r2
 8000eee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6a19      	ldr	r1, [r3, #32]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f00:	430b      	orrs	r3, r1
 8000f02:	491b      	ldr	r1, [pc, #108]	; (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000f04:	4313      	orrs	r3, r2
 8000f06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <HAL_RCC_OscConfig+0x4cc>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0e:	f7ff fb37 	bl	8000580 <HAL_GetTick>
 8000f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f14:	e008      	b.n	8000f28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f16:	f7ff fb33 	bl	8000580 <HAL_GetTick>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d901      	bls.n	8000f28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e03d      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f28:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0f0      	beq.n	8000f16 <HAL_RCC_OscConfig+0x46a>
 8000f34:	e035      	b.n	8000fa2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <HAL_RCC_OscConfig+0x4cc>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3c:	f7ff fb20 	bl	8000580 <HAL_GetTick>
 8000f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f42:	e008      	b.n	8000f56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f44:	f7ff fb1c 	bl	8000580 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d901      	bls.n	8000f56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000f52:	2303      	movs	r3, #3
 8000f54:	e026      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1f0      	bne.n	8000f44 <HAL_RCC_OscConfig+0x498>
 8000f62:	e01e      	b.n	8000fa2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	69db      	ldr	r3, [r3, #28]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d107      	bne.n	8000f7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e019      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40007000 	.word	0x40007000
 8000f78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <HAL_RCC_OscConfig+0x500>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6a1b      	ldr	r3, [r3, #32]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d106      	bne.n	8000f9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d001      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40021000 	.word	0x40021000

08000fb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d101      	bne.n	8000fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e0d0      	b.n	8001166 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000fc4:	4b6a      	ldr	r3, [pc, #424]	; (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0307 	and.w	r3, r3, #7
 8000fcc:	683a      	ldr	r2, [r7, #0]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d910      	bls.n	8000ff4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fd2:	4b67      	ldr	r3, [pc, #412]	; (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f023 0207 	bic.w	r2, r3, #7
 8000fda:	4965      	ldr	r1, [pc, #404]	; (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fe2:	4b63      	ldr	r3, [pc, #396]	; (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d001      	beq.n	8000ff4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e0b8      	b.n	8001166 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d020      	beq.n	8001042 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0304 	and.w	r3, r3, #4
 8001008:	2b00      	cmp	r3, #0
 800100a:	d005      	beq.n	8001018 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800100c:	4b59      	ldr	r3, [pc, #356]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	4a58      	ldr	r2, [pc, #352]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001012:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001016:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0308 	and.w	r3, r3, #8
 8001020:	2b00      	cmp	r3, #0
 8001022:	d005      	beq.n	8001030 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001024:	4b53      	ldr	r3, [pc, #332]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	4a52      	ldr	r2, [pc, #328]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 800102a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800102e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001030:	4b50      	ldr	r3, [pc, #320]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	494d      	ldr	r1, [pc, #308]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 800103e:	4313      	orrs	r3, r2
 8001040:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	2b00      	cmp	r3, #0
 800104c:	d040      	beq.n	80010d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d107      	bne.n	8001066 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001056:	4b47      	ldr	r3, [pc, #284]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d115      	bne.n	800108e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e07f      	b.n	8001166 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b02      	cmp	r3, #2
 800106c:	d107      	bne.n	800107e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800106e:	4b41      	ldr	r3, [pc, #260]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d109      	bne.n	800108e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e073      	b.n	8001166 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800107e:	4b3d      	ldr	r3, [pc, #244]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e06b      	b.n	8001166 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800108e:	4b39      	ldr	r3, [pc, #228]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f023 0203 	bic.w	r2, r3, #3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	4936      	ldr	r1, [pc, #216]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 800109c:	4313      	orrs	r3, r2
 800109e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010a0:	f7ff fa6e 	bl	8000580 <HAL_GetTick>
 80010a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010a6:	e00a      	b.n	80010be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010a8:	f7ff fa6a 	bl	8000580 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e053      	b.n	8001166 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010be:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 020c 	and.w	r2, r3, #12
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d1eb      	bne.n	80010a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80010d0:	4b27      	ldr	r3, [pc, #156]	; (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0307 	and.w	r3, r3, #7
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d210      	bcs.n	8001100 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010de:	4b24      	ldr	r3, [pc, #144]	; (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f023 0207 	bic.w	r2, r3, #7
 80010e6:	4922      	ldr	r1, [pc, #136]	; (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ee:	4b20      	ldr	r3, [pc, #128]	; (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d001      	beq.n	8001100 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e032      	b.n	8001166 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0304 	and.w	r3, r3, #4
 8001108:	2b00      	cmp	r3, #0
 800110a:	d008      	beq.n	800111e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800110c:	4b19      	ldr	r3, [pc, #100]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	4916      	ldr	r1, [pc, #88]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 800111a:	4313      	orrs	r3, r2
 800111c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	2b00      	cmp	r3, #0
 8001128:	d009      	beq.n	800113e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800112a:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	490e      	ldr	r1, [pc, #56]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 800113a:	4313      	orrs	r3, r2
 800113c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800113e:	f000 f821 	bl	8001184 <HAL_RCC_GetSysClockFreq>
 8001142:	4602      	mov	r2, r0
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	091b      	lsrs	r3, r3, #4
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	490a      	ldr	r1, [pc, #40]	; (8001178 <HAL_RCC_ClockConfig+0x1c8>)
 8001150:	5ccb      	ldrb	r3, [r1, r3]
 8001152:	fa22 f303 	lsr.w	r3, r2, r3
 8001156:	4a09      	ldr	r2, [pc, #36]	; (800117c <HAL_RCC_ClockConfig+0x1cc>)
 8001158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <HAL_RCC_ClockConfig+0x1d0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f9cc 	bl	80004fc <HAL_InitTick>

  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40022000 	.word	0x40022000
 8001174:	40021000 	.word	0x40021000
 8001178:	08002000 	.word	0x08002000
 800117c:	20000000 	.word	0x20000000
 8001180:	20000004 	.word	0x20000004

08001184 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001184:	b480      	push	{r7}
 8001186:	b087      	sub	sp, #28
 8001188:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	2300      	movs	r3, #0
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800119e:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <HAL_RCC_GetSysClockFreq+0x94>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 030c 	and.w	r3, r3, #12
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d002      	beq.n	80011b4 <HAL_RCC_GetSysClockFreq+0x30>
 80011ae:	2b08      	cmp	r3, #8
 80011b0:	d003      	beq.n	80011ba <HAL_RCC_GetSysClockFreq+0x36>
 80011b2:	e027      	b.n	8001204 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80011b4:	4b19      	ldr	r3, [pc, #100]	; (800121c <HAL_RCC_GetSysClockFreq+0x98>)
 80011b6:	613b      	str	r3, [r7, #16]
      break;
 80011b8:	e027      	b.n	800120a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	0c9b      	lsrs	r3, r3, #18
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	4a17      	ldr	r2, [pc, #92]	; (8001220 <HAL_RCC_GetSysClockFreq+0x9c>)
 80011c4:	5cd3      	ldrb	r3, [r2, r3]
 80011c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d010      	beq.n	80011f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <HAL_RCC_GetSysClockFreq+0x94>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	0c5b      	lsrs	r3, r3, #17
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	4a11      	ldr	r2, [pc, #68]	; (8001224 <HAL_RCC_GetSysClockFreq+0xa0>)
 80011de:	5cd3      	ldrb	r3, [r2, r3]
 80011e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a0d      	ldr	r2, [pc, #52]	; (800121c <HAL_RCC_GetSysClockFreq+0x98>)
 80011e6:	fb03 f202 	mul.w	r2, r3, r2
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	e004      	b.n	80011fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a0c      	ldr	r2, [pc, #48]	; (8001228 <HAL_RCC_GetSysClockFreq+0xa4>)
 80011f8:	fb02 f303 	mul.w	r3, r2, r3
 80011fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	613b      	str	r3, [r7, #16]
      break;
 8001202:	e002      	b.n	800120a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <HAL_RCC_GetSysClockFreq+0x98>)
 8001206:	613b      	str	r3, [r7, #16]
      break;
 8001208:	bf00      	nop
    }
  }
  return sysclockfreq;
 800120a:	693b      	ldr	r3, [r7, #16]
}
 800120c:	4618      	mov	r0, r3
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40021000 	.word	0x40021000
 800121c:	007a1200 	.word	0x007a1200
 8001220:	08002018 	.word	0x08002018
 8001224:	08002028 	.word	0x08002028
 8001228:	003d0900 	.word	0x003d0900

0800122c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001230:	4b02      	ldr	r3, [pc, #8]	; (800123c <HAL_RCC_GetHCLKFreq+0x10>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	20000000 	.word	0x20000000

08001240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001244:	f7ff fff2 	bl	800122c <HAL_RCC_GetHCLKFreq>
 8001248:	4602      	mov	r2, r0
 800124a:	4b05      	ldr	r3, [pc, #20]	; (8001260 <HAL_RCC_GetPCLK1Freq+0x20>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	0a1b      	lsrs	r3, r3, #8
 8001250:	f003 0307 	and.w	r3, r3, #7
 8001254:	4903      	ldr	r1, [pc, #12]	; (8001264 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001256:	5ccb      	ldrb	r3, [r1, r3]
 8001258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800125c:	4618      	mov	r0, r3
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40021000 	.word	0x40021000
 8001264:	08002010 	.word	0x08002010

08001268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800126c:	f7ff ffde 	bl	800122c <HAL_RCC_GetHCLKFreq>
 8001270:	4602      	mov	r2, r0
 8001272:	4b05      	ldr	r3, [pc, #20]	; (8001288 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	0adb      	lsrs	r3, r3, #11
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	4903      	ldr	r1, [pc, #12]	; (800128c <HAL_RCC_GetPCLK2Freq+0x24>)
 800127e:	5ccb      	ldrb	r3, [r1, r3]
 8001280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001284:	4618      	mov	r0, r3
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40021000 	.word	0x40021000
 800128c:	08002010 	.word	0x08002010

08001290 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001298:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <RCC_Delay+0x34>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <RCC_Delay+0x38>)
 800129e:	fba2 2303 	umull	r2, r3, r2, r3
 80012a2:	0a5b      	lsrs	r3, r3, #9
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	fb02 f303 	mul.w	r3, r2, r3
 80012aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80012ac:	bf00      	nop
  }
  while (Delay --);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	1e5a      	subs	r2, r3, #1
 80012b2:	60fa      	str	r2, [r7, #12]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1f9      	bne.n	80012ac <RCC_Delay+0x1c>
}
 80012b8:	bf00      	nop
 80012ba:	bf00      	nop
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr
 80012c4:	20000000 	.word	0x20000000
 80012c8:	10624dd3 	.word	0x10624dd3

080012cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e042      	b.n	8001364 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d106      	bne.n	80012f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff f816 	bl	8000324 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2224      	movs	r2, #36	; 0x24
 80012fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68da      	ldr	r2, [r3, #12]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800130e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 f91d 	bl	8001550 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	691a      	ldr	r2, [r3, #16]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001324:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	695a      	ldr	r2, [r3, #20]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001334:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	68da      	ldr	r2, [r3, #12]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001344:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2220      	movs	r2, #32
 8001350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2220      	movs	r2, #32
 8001358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af02      	add	r7, sp, #8
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	4613      	mov	r3, r2
 800137a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b20      	cmp	r3, #32
 800138a:	d16d      	bne.n	8001468 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d002      	beq.n	8001398 <HAL_UART_Transmit+0x2c>
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e066      	b.n	800146a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2200      	movs	r2, #0
 80013a0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2221      	movs	r2, #33	; 0x21
 80013a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80013aa:	f7ff f8e9 	bl	8000580 <HAL_GetTick>
 80013ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	88fa      	ldrh	r2, [r7, #6]
 80013b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	88fa      	ldrh	r2, [r7, #6]
 80013ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013c4:	d108      	bne.n	80013d8 <HAL_UART_Transmit+0x6c>
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d104      	bne.n	80013d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	61bb      	str	r3, [r7, #24]
 80013d6:	e003      	b.n	80013e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80013e0:	e02a      	b.n	8001438 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	2200      	movs	r2, #0
 80013ea:	2180      	movs	r1, #128	; 0x80
 80013ec:	68f8      	ldr	r0, [r7, #12]
 80013ee:	f000 f840 	bl	8001472 <UART_WaitOnFlagUntilTimeout>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e036      	b.n	800146a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10b      	bne.n	800141a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001410:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	3302      	adds	r3, #2
 8001416:	61bb      	str	r3, [r7, #24]
 8001418:	e007      	b.n	800142a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	781a      	ldrb	r2, [r3, #0]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	3301      	adds	r3, #1
 8001428:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800142e:	b29b      	uxth	r3, r3
 8001430:	3b01      	subs	r3, #1
 8001432:	b29a      	uxth	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800143c:	b29b      	uxth	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1cf      	bne.n	80013e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	2200      	movs	r2, #0
 800144a:	2140      	movs	r1, #64	; 0x40
 800144c:	68f8      	ldr	r0, [r7, #12]
 800144e:	f000 f810 	bl	8001472 <UART_WaitOnFlagUntilTimeout>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e006      	b.n	800146a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2220      	movs	r2, #32
 8001460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001464:	2300      	movs	r3, #0
 8001466:	e000      	b.n	800146a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001468:	2302      	movs	r3, #2
  }
}
 800146a:	4618      	mov	r0, r3
 800146c:	3720      	adds	r7, #32
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b090      	sub	sp, #64	; 0x40
 8001476:	af00      	add	r7, sp, #0
 8001478:	60f8      	str	r0, [r7, #12]
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	603b      	str	r3, [r7, #0]
 800147e:	4613      	mov	r3, r2
 8001480:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001482:	e050      	b.n	8001526 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800148a:	d04c      	beq.n	8001526 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800148c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800148e:	2b00      	cmp	r3, #0
 8001490:	d007      	beq.n	80014a2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001492:	f7ff f875 	bl	8000580 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800149e:	429a      	cmp	r2, r3
 80014a0:	d241      	bcs.n	8001526 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	330c      	adds	r3, #12
 80014a8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ac:	e853 3f00 	ldrex	r3, [r3]
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80014b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	330c      	adds	r3, #12
 80014c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014c2:	637a      	str	r2, [r7, #52]	; 0x34
 80014c4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80014c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014ca:	e841 2300 	strex	r3, r2, [r1]
 80014ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80014d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1e5      	bne.n	80014a2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	3314      	adds	r3, #20
 80014dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	e853 3f00 	ldrex	r3, [r3]
 80014e4:	613b      	str	r3, [r7, #16]
   return(result);
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	f023 0301 	bic.w	r3, r3, #1
 80014ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	3314      	adds	r3, #20
 80014f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014f6:	623a      	str	r2, [r7, #32]
 80014f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014fa:	69f9      	ldr	r1, [r7, #28]
 80014fc:	6a3a      	ldr	r2, [r7, #32]
 80014fe:	e841 2300 	strex	r3, r2, [r1]
 8001502:	61bb      	str	r3, [r7, #24]
   return(result);
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d1e5      	bne.n	80014d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2220      	movs	r2, #32
 800150e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2220      	movs	r2, #32
 8001516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e00f      	b.n	8001546 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	4013      	ands	r3, r2
 8001530:	68ba      	ldr	r2, [r7, #8]
 8001532:	429a      	cmp	r2, r3
 8001534:	bf0c      	ite	eq
 8001536:	2301      	moveq	r3, #1
 8001538:	2300      	movne	r3, #0
 800153a:	b2db      	uxtb	r3, r3
 800153c:	461a      	mov	r2, r3
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	429a      	cmp	r2, r3
 8001542:	d09f      	beq.n	8001484 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3740      	adds	r7, #64	; 0x40
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68da      	ldr	r2, [r3, #12]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	695b      	ldr	r3, [r3, #20]
 800157c:	4313      	orrs	r3, r2
 800157e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800158a:	f023 030c 	bic.w	r3, r3, #12
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	6812      	ldr	r2, [r2, #0]
 8001592:	68b9      	ldr	r1, [r7, #8]
 8001594:	430b      	orrs	r3, r1
 8001596:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	699a      	ldr	r2, [r3, #24]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a2c      	ldr	r2, [pc, #176]	; (8001664 <UART_SetConfig+0x114>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d103      	bne.n	80015c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80015b8:	f7ff fe56 	bl	8001268 <HAL_RCC_GetPCLK2Freq>
 80015bc:	60f8      	str	r0, [r7, #12]
 80015be:	e002      	b.n	80015c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80015c0:	f7ff fe3e 	bl	8001240 <HAL_RCC_GetPCLK1Freq>
 80015c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	4613      	mov	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	4413      	add	r3, r2
 80015ce:	009a      	lsls	r2, r3, #2
 80015d0:	441a      	add	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015dc:	4a22      	ldr	r2, [pc, #136]	; (8001668 <UART_SetConfig+0x118>)
 80015de:	fba2 2303 	umull	r2, r3, r2, r3
 80015e2:	095b      	lsrs	r3, r3, #5
 80015e4:	0119      	lsls	r1, r3, #4
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	4613      	mov	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	009a      	lsls	r2, r3, #2
 80015f0:	441a      	add	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80015fc:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <UART_SetConfig+0x118>)
 80015fe:	fba3 0302 	umull	r0, r3, r3, r2
 8001602:	095b      	lsrs	r3, r3, #5
 8001604:	2064      	movs	r0, #100	; 0x64
 8001606:	fb00 f303 	mul.w	r3, r0, r3
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	011b      	lsls	r3, r3, #4
 800160e:	3332      	adds	r3, #50	; 0x32
 8001610:	4a15      	ldr	r2, [pc, #84]	; (8001668 <UART_SetConfig+0x118>)
 8001612:	fba2 2303 	umull	r2, r3, r2, r3
 8001616:	095b      	lsrs	r3, r3, #5
 8001618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800161c:	4419      	add	r1, r3
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	009a      	lsls	r2, r3, #2
 8001628:	441a      	add	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	fbb2 f2f3 	udiv	r2, r2, r3
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <UART_SetConfig+0x118>)
 8001636:	fba3 0302 	umull	r0, r3, r3, r2
 800163a:	095b      	lsrs	r3, r3, #5
 800163c:	2064      	movs	r0, #100	; 0x64
 800163e:	fb00 f303 	mul.w	r3, r0, r3
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	011b      	lsls	r3, r3, #4
 8001646:	3332      	adds	r3, #50	; 0x32
 8001648:	4a07      	ldr	r2, [pc, #28]	; (8001668 <UART_SetConfig+0x118>)
 800164a:	fba2 2303 	umull	r2, r3, r2, r3
 800164e:	095b      	lsrs	r3, r3, #5
 8001650:	f003 020f 	and.w	r2, r3, #15
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	440a      	add	r2, r1
 800165a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800165c:	bf00      	nop
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40013800 	.word	0x40013800
 8001668:	51eb851f 	.word	0x51eb851f

0800166c <siprintf>:
 800166c:	b40e      	push	{r1, r2, r3}
 800166e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001672:	b500      	push	{lr}
 8001674:	b09c      	sub	sp, #112	; 0x70
 8001676:	ab1d      	add	r3, sp, #116	; 0x74
 8001678:	9002      	str	r0, [sp, #8]
 800167a:	9006      	str	r0, [sp, #24]
 800167c:	9107      	str	r1, [sp, #28]
 800167e:	9104      	str	r1, [sp, #16]
 8001680:	4808      	ldr	r0, [pc, #32]	; (80016a4 <siprintf+0x38>)
 8001682:	4909      	ldr	r1, [pc, #36]	; (80016a8 <siprintf+0x3c>)
 8001684:	f853 2b04 	ldr.w	r2, [r3], #4
 8001688:	9105      	str	r1, [sp, #20]
 800168a:	6800      	ldr	r0, [r0, #0]
 800168c:	a902      	add	r1, sp, #8
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	f000 f98e 	bl	80019b0 <_svfiprintf_r>
 8001694:	2200      	movs	r2, #0
 8001696:	9b02      	ldr	r3, [sp, #8]
 8001698:	701a      	strb	r2, [r3, #0]
 800169a:	b01c      	add	sp, #112	; 0x70
 800169c:	f85d eb04 	ldr.w	lr, [sp], #4
 80016a0:	b003      	add	sp, #12
 80016a2:	4770      	bx	lr
 80016a4:	20000058 	.word	0x20000058
 80016a8:	ffff0208 	.word	0xffff0208

080016ac <memset>:
 80016ac:	4603      	mov	r3, r0
 80016ae:	4402      	add	r2, r0
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d100      	bne.n	80016b6 <memset+0xa>
 80016b4:	4770      	bx	lr
 80016b6:	f803 1b01 	strb.w	r1, [r3], #1
 80016ba:	e7f9      	b.n	80016b0 <memset+0x4>

080016bc <__errno>:
 80016bc:	4b01      	ldr	r3, [pc, #4]	; (80016c4 <__errno+0x8>)
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20000058 	.word	0x20000058

080016c8 <__libc_init_array>:
 80016c8:	b570      	push	{r4, r5, r6, lr}
 80016ca:	2600      	movs	r6, #0
 80016cc:	4d0c      	ldr	r5, [pc, #48]	; (8001700 <__libc_init_array+0x38>)
 80016ce:	4c0d      	ldr	r4, [pc, #52]	; (8001704 <__libc_init_array+0x3c>)
 80016d0:	1b64      	subs	r4, r4, r5
 80016d2:	10a4      	asrs	r4, r4, #2
 80016d4:	42a6      	cmp	r6, r4
 80016d6:	d109      	bne.n	80016ec <__libc_init_array+0x24>
 80016d8:	f000 fc7a 	bl	8001fd0 <_init>
 80016dc:	2600      	movs	r6, #0
 80016de:	4d0a      	ldr	r5, [pc, #40]	; (8001708 <__libc_init_array+0x40>)
 80016e0:	4c0a      	ldr	r4, [pc, #40]	; (800170c <__libc_init_array+0x44>)
 80016e2:	1b64      	subs	r4, r4, r5
 80016e4:	10a4      	asrs	r4, r4, #2
 80016e6:	42a6      	cmp	r6, r4
 80016e8:	d105      	bne.n	80016f6 <__libc_init_array+0x2e>
 80016ea:	bd70      	pop	{r4, r5, r6, pc}
 80016ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80016f0:	4798      	blx	r3
 80016f2:	3601      	adds	r6, #1
 80016f4:	e7ee      	b.n	80016d4 <__libc_init_array+0xc>
 80016f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80016fa:	4798      	blx	r3
 80016fc:	3601      	adds	r6, #1
 80016fe:	e7f2      	b.n	80016e6 <__libc_init_array+0x1e>
 8001700:	08002060 	.word	0x08002060
 8001704:	08002060 	.word	0x08002060
 8001708:	08002060 	.word	0x08002060
 800170c:	08002064 	.word	0x08002064

08001710 <__retarget_lock_acquire_recursive>:
 8001710:	4770      	bx	lr

08001712 <__retarget_lock_release_recursive>:
 8001712:	4770      	bx	lr

08001714 <_free_r>:
 8001714:	b538      	push	{r3, r4, r5, lr}
 8001716:	4605      	mov	r5, r0
 8001718:	2900      	cmp	r1, #0
 800171a:	d040      	beq.n	800179e <_free_r+0x8a>
 800171c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001720:	1f0c      	subs	r4, r1, #4
 8001722:	2b00      	cmp	r3, #0
 8001724:	bfb8      	it	lt
 8001726:	18e4      	addlt	r4, r4, r3
 8001728:	f000 f8dc 	bl	80018e4 <__malloc_lock>
 800172c:	4a1c      	ldr	r2, [pc, #112]	; (80017a0 <_free_r+0x8c>)
 800172e:	6813      	ldr	r3, [r2, #0]
 8001730:	b933      	cbnz	r3, 8001740 <_free_r+0x2c>
 8001732:	6063      	str	r3, [r4, #4]
 8001734:	6014      	str	r4, [r2, #0]
 8001736:	4628      	mov	r0, r5
 8001738:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800173c:	f000 b8d8 	b.w	80018f0 <__malloc_unlock>
 8001740:	42a3      	cmp	r3, r4
 8001742:	d908      	bls.n	8001756 <_free_r+0x42>
 8001744:	6820      	ldr	r0, [r4, #0]
 8001746:	1821      	adds	r1, r4, r0
 8001748:	428b      	cmp	r3, r1
 800174a:	bf01      	itttt	eq
 800174c:	6819      	ldreq	r1, [r3, #0]
 800174e:	685b      	ldreq	r3, [r3, #4]
 8001750:	1809      	addeq	r1, r1, r0
 8001752:	6021      	streq	r1, [r4, #0]
 8001754:	e7ed      	b.n	8001732 <_free_r+0x1e>
 8001756:	461a      	mov	r2, r3
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	b10b      	cbz	r3, 8001760 <_free_r+0x4c>
 800175c:	42a3      	cmp	r3, r4
 800175e:	d9fa      	bls.n	8001756 <_free_r+0x42>
 8001760:	6811      	ldr	r1, [r2, #0]
 8001762:	1850      	adds	r0, r2, r1
 8001764:	42a0      	cmp	r0, r4
 8001766:	d10b      	bne.n	8001780 <_free_r+0x6c>
 8001768:	6820      	ldr	r0, [r4, #0]
 800176a:	4401      	add	r1, r0
 800176c:	1850      	adds	r0, r2, r1
 800176e:	4283      	cmp	r3, r0
 8001770:	6011      	str	r1, [r2, #0]
 8001772:	d1e0      	bne.n	8001736 <_free_r+0x22>
 8001774:	6818      	ldr	r0, [r3, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	4408      	add	r0, r1
 800177a:	6010      	str	r0, [r2, #0]
 800177c:	6053      	str	r3, [r2, #4]
 800177e:	e7da      	b.n	8001736 <_free_r+0x22>
 8001780:	d902      	bls.n	8001788 <_free_r+0x74>
 8001782:	230c      	movs	r3, #12
 8001784:	602b      	str	r3, [r5, #0]
 8001786:	e7d6      	b.n	8001736 <_free_r+0x22>
 8001788:	6820      	ldr	r0, [r4, #0]
 800178a:	1821      	adds	r1, r4, r0
 800178c:	428b      	cmp	r3, r1
 800178e:	bf01      	itttt	eq
 8001790:	6819      	ldreq	r1, [r3, #0]
 8001792:	685b      	ldreq	r3, [r3, #4]
 8001794:	1809      	addeq	r1, r1, r0
 8001796:	6021      	streq	r1, [r4, #0]
 8001798:	6063      	str	r3, [r4, #4]
 800179a:	6054      	str	r4, [r2, #4]
 800179c:	e7cb      	b.n	8001736 <_free_r+0x22>
 800179e:	bd38      	pop	{r3, r4, r5, pc}
 80017a0:	20000208 	.word	0x20000208

080017a4 <sbrk_aligned>:
 80017a4:	b570      	push	{r4, r5, r6, lr}
 80017a6:	4e0e      	ldr	r6, [pc, #56]	; (80017e0 <sbrk_aligned+0x3c>)
 80017a8:	460c      	mov	r4, r1
 80017aa:	6831      	ldr	r1, [r6, #0]
 80017ac:	4605      	mov	r5, r0
 80017ae:	b911      	cbnz	r1, 80017b6 <sbrk_aligned+0x12>
 80017b0:	f000 fbaa 	bl	8001f08 <_sbrk_r>
 80017b4:	6030      	str	r0, [r6, #0]
 80017b6:	4621      	mov	r1, r4
 80017b8:	4628      	mov	r0, r5
 80017ba:	f000 fba5 	bl	8001f08 <_sbrk_r>
 80017be:	1c43      	adds	r3, r0, #1
 80017c0:	d00a      	beq.n	80017d8 <sbrk_aligned+0x34>
 80017c2:	1cc4      	adds	r4, r0, #3
 80017c4:	f024 0403 	bic.w	r4, r4, #3
 80017c8:	42a0      	cmp	r0, r4
 80017ca:	d007      	beq.n	80017dc <sbrk_aligned+0x38>
 80017cc:	1a21      	subs	r1, r4, r0
 80017ce:	4628      	mov	r0, r5
 80017d0:	f000 fb9a 	bl	8001f08 <_sbrk_r>
 80017d4:	3001      	adds	r0, #1
 80017d6:	d101      	bne.n	80017dc <sbrk_aligned+0x38>
 80017d8:	f04f 34ff 	mov.w	r4, #4294967295
 80017dc:	4620      	mov	r0, r4
 80017de:	bd70      	pop	{r4, r5, r6, pc}
 80017e0:	2000020c 	.word	0x2000020c

080017e4 <_malloc_r>:
 80017e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017e8:	1ccd      	adds	r5, r1, #3
 80017ea:	f025 0503 	bic.w	r5, r5, #3
 80017ee:	3508      	adds	r5, #8
 80017f0:	2d0c      	cmp	r5, #12
 80017f2:	bf38      	it	cc
 80017f4:	250c      	movcc	r5, #12
 80017f6:	2d00      	cmp	r5, #0
 80017f8:	4607      	mov	r7, r0
 80017fa:	db01      	blt.n	8001800 <_malloc_r+0x1c>
 80017fc:	42a9      	cmp	r1, r5
 80017fe:	d905      	bls.n	800180c <_malloc_r+0x28>
 8001800:	230c      	movs	r3, #12
 8001802:	2600      	movs	r6, #0
 8001804:	603b      	str	r3, [r7, #0]
 8001806:	4630      	mov	r0, r6
 8001808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800180c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80018e0 <_malloc_r+0xfc>
 8001810:	f000 f868 	bl	80018e4 <__malloc_lock>
 8001814:	f8d8 3000 	ldr.w	r3, [r8]
 8001818:	461c      	mov	r4, r3
 800181a:	bb5c      	cbnz	r4, 8001874 <_malloc_r+0x90>
 800181c:	4629      	mov	r1, r5
 800181e:	4638      	mov	r0, r7
 8001820:	f7ff ffc0 	bl	80017a4 <sbrk_aligned>
 8001824:	1c43      	adds	r3, r0, #1
 8001826:	4604      	mov	r4, r0
 8001828:	d155      	bne.n	80018d6 <_malloc_r+0xf2>
 800182a:	f8d8 4000 	ldr.w	r4, [r8]
 800182e:	4626      	mov	r6, r4
 8001830:	2e00      	cmp	r6, #0
 8001832:	d145      	bne.n	80018c0 <_malloc_r+0xdc>
 8001834:	2c00      	cmp	r4, #0
 8001836:	d048      	beq.n	80018ca <_malloc_r+0xe6>
 8001838:	6823      	ldr	r3, [r4, #0]
 800183a:	4631      	mov	r1, r6
 800183c:	4638      	mov	r0, r7
 800183e:	eb04 0903 	add.w	r9, r4, r3
 8001842:	f000 fb61 	bl	8001f08 <_sbrk_r>
 8001846:	4581      	cmp	r9, r0
 8001848:	d13f      	bne.n	80018ca <_malloc_r+0xe6>
 800184a:	6821      	ldr	r1, [r4, #0]
 800184c:	4638      	mov	r0, r7
 800184e:	1a6d      	subs	r5, r5, r1
 8001850:	4629      	mov	r1, r5
 8001852:	f7ff ffa7 	bl	80017a4 <sbrk_aligned>
 8001856:	3001      	adds	r0, #1
 8001858:	d037      	beq.n	80018ca <_malloc_r+0xe6>
 800185a:	6823      	ldr	r3, [r4, #0]
 800185c:	442b      	add	r3, r5
 800185e:	6023      	str	r3, [r4, #0]
 8001860:	f8d8 3000 	ldr.w	r3, [r8]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d038      	beq.n	80018da <_malloc_r+0xf6>
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	42a2      	cmp	r2, r4
 800186c:	d12b      	bne.n	80018c6 <_malloc_r+0xe2>
 800186e:	2200      	movs	r2, #0
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	e00f      	b.n	8001894 <_malloc_r+0xb0>
 8001874:	6822      	ldr	r2, [r4, #0]
 8001876:	1b52      	subs	r2, r2, r5
 8001878:	d41f      	bmi.n	80018ba <_malloc_r+0xd6>
 800187a:	2a0b      	cmp	r2, #11
 800187c:	d917      	bls.n	80018ae <_malloc_r+0xca>
 800187e:	1961      	adds	r1, r4, r5
 8001880:	42a3      	cmp	r3, r4
 8001882:	6025      	str	r5, [r4, #0]
 8001884:	bf18      	it	ne
 8001886:	6059      	strne	r1, [r3, #4]
 8001888:	6863      	ldr	r3, [r4, #4]
 800188a:	bf08      	it	eq
 800188c:	f8c8 1000 	streq.w	r1, [r8]
 8001890:	5162      	str	r2, [r4, r5]
 8001892:	604b      	str	r3, [r1, #4]
 8001894:	4638      	mov	r0, r7
 8001896:	f104 060b 	add.w	r6, r4, #11
 800189a:	f000 f829 	bl	80018f0 <__malloc_unlock>
 800189e:	f026 0607 	bic.w	r6, r6, #7
 80018a2:	1d23      	adds	r3, r4, #4
 80018a4:	1af2      	subs	r2, r6, r3
 80018a6:	d0ae      	beq.n	8001806 <_malloc_r+0x22>
 80018a8:	1b9b      	subs	r3, r3, r6
 80018aa:	50a3      	str	r3, [r4, r2]
 80018ac:	e7ab      	b.n	8001806 <_malloc_r+0x22>
 80018ae:	42a3      	cmp	r3, r4
 80018b0:	6862      	ldr	r2, [r4, #4]
 80018b2:	d1dd      	bne.n	8001870 <_malloc_r+0x8c>
 80018b4:	f8c8 2000 	str.w	r2, [r8]
 80018b8:	e7ec      	b.n	8001894 <_malloc_r+0xb0>
 80018ba:	4623      	mov	r3, r4
 80018bc:	6864      	ldr	r4, [r4, #4]
 80018be:	e7ac      	b.n	800181a <_malloc_r+0x36>
 80018c0:	4634      	mov	r4, r6
 80018c2:	6876      	ldr	r6, [r6, #4]
 80018c4:	e7b4      	b.n	8001830 <_malloc_r+0x4c>
 80018c6:	4613      	mov	r3, r2
 80018c8:	e7cc      	b.n	8001864 <_malloc_r+0x80>
 80018ca:	230c      	movs	r3, #12
 80018cc:	4638      	mov	r0, r7
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	f000 f80e 	bl	80018f0 <__malloc_unlock>
 80018d4:	e797      	b.n	8001806 <_malloc_r+0x22>
 80018d6:	6025      	str	r5, [r4, #0]
 80018d8:	e7dc      	b.n	8001894 <_malloc_r+0xb0>
 80018da:	605b      	str	r3, [r3, #4]
 80018dc:	deff      	udf	#255	; 0xff
 80018de:	bf00      	nop
 80018e0:	20000208 	.word	0x20000208

080018e4 <__malloc_lock>:
 80018e4:	4801      	ldr	r0, [pc, #4]	; (80018ec <__malloc_lock+0x8>)
 80018e6:	f7ff bf13 	b.w	8001710 <__retarget_lock_acquire_recursive>
 80018ea:	bf00      	nop
 80018ec:	20000204 	.word	0x20000204

080018f0 <__malloc_unlock>:
 80018f0:	4801      	ldr	r0, [pc, #4]	; (80018f8 <__malloc_unlock+0x8>)
 80018f2:	f7ff bf0e 	b.w	8001712 <__retarget_lock_release_recursive>
 80018f6:	bf00      	nop
 80018f8:	20000204 	.word	0x20000204

080018fc <__ssputs_r>:
 80018fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001900:	461f      	mov	r7, r3
 8001902:	688e      	ldr	r6, [r1, #8]
 8001904:	4682      	mov	sl, r0
 8001906:	42be      	cmp	r6, r7
 8001908:	460c      	mov	r4, r1
 800190a:	4690      	mov	r8, r2
 800190c:	680b      	ldr	r3, [r1, #0]
 800190e:	d82c      	bhi.n	800196a <__ssputs_r+0x6e>
 8001910:	898a      	ldrh	r2, [r1, #12]
 8001912:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001916:	d026      	beq.n	8001966 <__ssputs_r+0x6a>
 8001918:	6965      	ldr	r5, [r4, #20]
 800191a:	6909      	ldr	r1, [r1, #16]
 800191c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001920:	eba3 0901 	sub.w	r9, r3, r1
 8001924:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001928:	1c7b      	adds	r3, r7, #1
 800192a:	444b      	add	r3, r9
 800192c:	106d      	asrs	r5, r5, #1
 800192e:	429d      	cmp	r5, r3
 8001930:	bf38      	it	cc
 8001932:	461d      	movcc	r5, r3
 8001934:	0553      	lsls	r3, r2, #21
 8001936:	d527      	bpl.n	8001988 <__ssputs_r+0x8c>
 8001938:	4629      	mov	r1, r5
 800193a:	f7ff ff53 	bl	80017e4 <_malloc_r>
 800193e:	4606      	mov	r6, r0
 8001940:	b360      	cbz	r0, 800199c <__ssputs_r+0xa0>
 8001942:	464a      	mov	r2, r9
 8001944:	6921      	ldr	r1, [r4, #16]
 8001946:	f000 fafd 	bl	8001f44 <memcpy>
 800194a:	89a3      	ldrh	r3, [r4, #12]
 800194c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001954:	81a3      	strh	r3, [r4, #12]
 8001956:	6126      	str	r6, [r4, #16]
 8001958:	444e      	add	r6, r9
 800195a:	6026      	str	r6, [r4, #0]
 800195c:	463e      	mov	r6, r7
 800195e:	6165      	str	r5, [r4, #20]
 8001960:	eba5 0509 	sub.w	r5, r5, r9
 8001964:	60a5      	str	r5, [r4, #8]
 8001966:	42be      	cmp	r6, r7
 8001968:	d900      	bls.n	800196c <__ssputs_r+0x70>
 800196a:	463e      	mov	r6, r7
 800196c:	4632      	mov	r2, r6
 800196e:	4641      	mov	r1, r8
 8001970:	6820      	ldr	r0, [r4, #0]
 8001972:	f000 faaf 	bl	8001ed4 <memmove>
 8001976:	2000      	movs	r0, #0
 8001978:	68a3      	ldr	r3, [r4, #8]
 800197a:	1b9b      	subs	r3, r3, r6
 800197c:	60a3      	str	r3, [r4, #8]
 800197e:	6823      	ldr	r3, [r4, #0]
 8001980:	4433      	add	r3, r6
 8001982:	6023      	str	r3, [r4, #0]
 8001984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001988:	462a      	mov	r2, r5
 800198a:	f000 fae9 	bl	8001f60 <_realloc_r>
 800198e:	4606      	mov	r6, r0
 8001990:	2800      	cmp	r0, #0
 8001992:	d1e0      	bne.n	8001956 <__ssputs_r+0x5a>
 8001994:	4650      	mov	r0, sl
 8001996:	6921      	ldr	r1, [r4, #16]
 8001998:	f7ff febc 	bl	8001714 <_free_r>
 800199c:	230c      	movs	r3, #12
 800199e:	f8ca 3000 	str.w	r3, [sl]
 80019a2:	89a3      	ldrh	r3, [r4, #12]
 80019a4:	f04f 30ff 	mov.w	r0, #4294967295
 80019a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ac:	81a3      	strh	r3, [r4, #12]
 80019ae:	e7e9      	b.n	8001984 <__ssputs_r+0x88>

080019b0 <_svfiprintf_r>:
 80019b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019b4:	4698      	mov	r8, r3
 80019b6:	898b      	ldrh	r3, [r1, #12]
 80019b8:	4607      	mov	r7, r0
 80019ba:	061b      	lsls	r3, r3, #24
 80019bc:	460d      	mov	r5, r1
 80019be:	4614      	mov	r4, r2
 80019c0:	b09d      	sub	sp, #116	; 0x74
 80019c2:	d50e      	bpl.n	80019e2 <_svfiprintf_r+0x32>
 80019c4:	690b      	ldr	r3, [r1, #16]
 80019c6:	b963      	cbnz	r3, 80019e2 <_svfiprintf_r+0x32>
 80019c8:	2140      	movs	r1, #64	; 0x40
 80019ca:	f7ff ff0b 	bl	80017e4 <_malloc_r>
 80019ce:	6028      	str	r0, [r5, #0]
 80019d0:	6128      	str	r0, [r5, #16]
 80019d2:	b920      	cbnz	r0, 80019de <_svfiprintf_r+0x2e>
 80019d4:	230c      	movs	r3, #12
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295
 80019dc:	e0d0      	b.n	8001b80 <_svfiprintf_r+0x1d0>
 80019de:	2340      	movs	r3, #64	; 0x40
 80019e0:	616b      	str	r3, [r5, #20]
 80019e2:	2300      	movs	r3, #0
 80019e4:	9309      	str	r3, [sp, #36]	; 0x24
 80019e6:	2320      	movs	r3, #32
 80019e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80019ec:	2330      	movs	r3, #48	; 0x30
 80019ee:	f04f 0901 	mov.w	r9, #1
 80019f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80019f6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8001b98 <_svfiprintf_r+0x1e8>
 80019fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80019fe:	4623      	mov	r3, r4
 8001a00:	469a      	mov	sl, r3
 8001a02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001a06:	b10a      	cbz	r2, 8001a0c <_svfiprintf_r+0x5c>
 8001a08:	2a25      	cmp	r2, #37	; 0x25
 8001a0a:	d1f9      	bne.n	8001a00 <_svfiprintf_r+0x50>
 8001a0c:	ebba 0b04 	subs.w	fp, sl, r4
 8001a10:	d00b      	beq.n	8001a2a <_svfiprintf_r+0x7a>
 8001a12:	465b      	mov	r3, fp
 8001a14:	4622      	mov	r2, r4
 8001a16:	4629      	mov	r1, r5
 8001a18:	4638      	mov	r0, r7
 8001a1a:	f7ff ff6f 	bl	80018fc <__ssputs_r>
 8001a1e:	3001      	adds	r0, #1
 8001a20:	f000 80a9 	beq.w	8001b76 <_svfiprintf_r+0x1c6>
 8001a24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001a26:	445a      	add	r2, fp
 8001a28:	9209      	str	r2, [sp, #36]	; 0x24
 8001a2a:	f89a 3000 	ldrb.w	r3, [sl]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 80a1 	beq.w	8001b76 <_svfiprintf_r+0x1c6>
 8001a34:	2300      	movs	r3, #0
 8001a36:	f04f 32ff 	mov.w	r2, #4294967295
 8001a3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a3e:	f10a 0a01 	add.w	sl, sl, #1
 8001a42:	9304      	str	r3, [sp, #16]
 8001a44:	9307      	str	r3, [sp, #28]
 8001a46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001a4a:	931a      	str	r3, [sp, #104]	; 0x68
 8001a4c:	4654      	mov	r4, sl
 8001a4e:	2205      	movs	r2, #5
 8001a50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a54:	4850      	ldr	r0, [pc, #320]	; (8001b98 <_svfiprintf_r+0x1e8>)
 8001a56:	f000 fa67 	bl	8001f28 <memchr>
 8001a5a:	9a04      	ldr	r2, [sp, #16]
 8001a5c:	b9d8      	cbnz	r0, 8001a96 <_svfiprintf_r+0xe6>
 8001a5e:	06d0      	lsls	r0, r2, #27
 8001a60:	bf44      	itt	mi
 8001a62:	2320      	movmi	r3, #32
 8001a64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a68:	0711      	lsls	r1, r2, #28
 8001a6a:	bf44      	itt	mi
 8001a6c:	232b      	movmi	r3, #43	; 0x2b
 8001a6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001a72:	f89a 3000 	ldrb.w	r3, [sl]
 8001a76:	2b2a      	cmp	r3, #42	; 0x2a
 8001a78:	d015      	beq.n	8001aa6 <_svfiprintf_r+0xf6>
 8001a7a:	4654      	mov	r4, sl
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f04f 0c0a 	mov.w	ip, #10
 8001a82:	9a07      	ldr	r2, [sp, #28]
 8001a84:	4621      	mov	r1, r4
 8001a86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a8a:	3b30      	subs	r3, #48	; 0x30
 8001a8c:	2b09      	cmp	r3, #9
 8001a8e:	d94d      	bls.n	8001b2c <_svfiprintf_r+0x17c>
 8001a90:	b1b0      	cbz	r0, 8001ac0 <_svfiprintf_r+0x110>
 8001a92:	9207      	str	r2, [sp, #28]
 8001a94:	e014      	b.n	8001ac0 <_svfiprintf_r+0x110>
 8001a96:	eba0 0308 	sub.w	r3, r0, r8
 8001a9a:	fa09 f303 	lsl.w	r3, r9, r3
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	46a2      	mov	sl, r4
 8001aa2:	9304      	str	r3, [sp, #16]
 8001aa4:	e7d2      	b.n	8001a4c <_svfiprintf_r+0x9c>
 8001aa6:	9b03      	ldr	r3, [sp, #12]
 8001aa8:	1d19      	adds	r1, r3, #4
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	9103      	str	r1, [sp, #12]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	bfbb      	ittet	lt
 8001ab2:	425b      	neglt	r3, r3
 8001ab4:	f042 0202 	orrlt.w	r2, r2, #2
 8001ab8:	9307      	strge	r3, [sp, #28]
 8001aba:	9307      	strlt	r3, [sp, #28]
 8001abc:	bfb8      	it	lt
 8001abe:	9204      	strlt	r2, [sp, #16]
 8001ac0:	7823      	ldrb	r3, [r4, #0]
 8001ac2:	2b2e      	cmp	r3, #46	; 0x2e
 8001ac4:	d10c      	bne.n	8001ae0 <_svfiprintf_r+0x130>
 8001ac6:	7863      	ldrb	r3, [r4, #1]
 8001ac8:	2b2a      	cmp	r3, #42	; 0x2a
 8001aca:	d134      	bne.n	8001b36 <_svfiprintf_r+0x186>
 8001acc:	9b03      	ldr	r3, [sp, #12]
 8001ace:	3402      	adds	r4, #2
 8001ad0:	1d1a      	adds	r2, r3, #4
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	9203      	str	r2, [sp, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	bfb8      	it	lt
 8001ada:	f04f 33ff 	movlt.w	r3, #4294967295
 8001ade:	9305      	str	r3, [sp, #20]
 8001ae0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8001b9c <_svfiprintf_r+0x1ec>
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	4650      	mov	r0, sl
 8001ae8:	7821      	ldrb	r1, [r4, #0]
 8001aea:	f000 fa1d 	bl	8001f28 <memchr>
 8001aee:	b138      	cbz	r0, 8001b00 <_svfiprintf_r+0x150>
 8001af0:	2240      	movs	r2, #64	; 0x40
 8001af2:	9b04      	ldr	r3, [sp, #16]
 8001af4:	eba0 000a 	sub.w	r0, r0, sl
 8001af8:	4082      	lsls	r2, r0
 8001afa:	4313      	orrs	r3, r2
 8001afc:	3401      	adds	r4, #1
 8001afe:	9304      	str	r3, [sp, #16]
 8001b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b04:	2206      	movs	r2, #6
 8001b06:	4826      	ldr	r0, [pc, #152]	; (8001ba0 <_svfiprintf_r+0x1f0>)
 8001b08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001b0c:	f000 fa0c 	bl	8001f28 <memchr>
 8001b10:	2800      	cmp	r0, #0
 8001b12:	d038      	beq.n	8001b86 <_svfiprintf_r+0x1d6>
 8001b14:	4b23      	ldr	r3, [pc, #140]	; (8001ba4 <_svfiprintf_r+0x1f4>)
 8001b16:	bb1b      	cbnz	r3, 8001b60 <_svfiprintf_r+0x1b0>
 8001b18:	9b03      	ldr	r3, [sp, #12]
 8001b1a:	3307      	adds	r3, #7
 8001b1c:	f023 0307 	bic.w	r3, r3, #7
 8001b20:	3308      	adds	r3, #8
 8001b22:	9303      	str	r3, [sp, #12]
 8001b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b26:	4433      	add	r3, r6
 8001b28:	9309      	str	r3, [sp, #36]	; 0x24
 8001b2a:	e768      	b.n	80019fe <_svfiprintf_r+0x4e>
 8001b2c:	460c      	mov	r4, r1
 8001b2e:	2001      	movs	r0, #1
 8001b30:	fb0c 3202 	mla	r2, ip, r2, r3
 8001b34:	e7a6      	b.n	8001a84 <_svfiprintf_r+0xd4>
 8001b36:	2300      	movs	r3, #0
 8001b38:	f04f 0c0a 	mov.w	ip, #10
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	3401      	adds	r4, #1
 8001b40:	9305      	str	r3, [sp, #20]
 8001b42:	4620      	mov	r0, r4
 8001b44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b48:	3a30      	subs	r2, #48	; 0x30
 8001b4a:	2a09      	cmp	r2, #9
 8001b4c:	d903      	bls.n	8001b56 <_svfiprintf_r+0x1a6>
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0c6      	beq.n	8001ae0 <_svfiprintf_r+0x130>
 8001b52:	9105      	str	r1, [sp, #20]
 8001b54:	e7c4      	b.n	8001ae0 <_svfiprintf_r+0x130>
 8001b56:	4604      	mov	r4, r0
 8001b58:	2301      	movs	r3, #1
 8001b5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b5e:	e7f0      	b.n	8001b42 <_svfiprintf_r+0x192>
 8001b60:	ab03      	add	r3, sp, #12
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	462a      	mov	r2, r5
 8001b66:	4638      	mov	r0, r7
 8001b68:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <_svfiprintf_r+0x1f8>)
 8001b6a:	a904      	add	r1, sp, #16
 8001b6c:	f3af 8000 	nop.w
 8001b70:	1c42      	adds	r2, r0, #1
 8001b72:	4606      	mov	r6, r0
 8001b74:	d1d6      	bne.n	8001b24 <_svfiprintf_r+0x174>
 8001b76:	89ab      	ldrh	r3, [r5, #12]
 8001b78:	065b      	lsls	r3, r3, #25
 8001b7a:	f53f af2d 	bmi.w	80019d8 <_svfiprintf_r+0x28>
 8001b7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001b80:	b01d      	add	sp, #116	; 0x74
 8001b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b86:	ab03      	add	r3, sp, #12
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	462a      	mov	r2, r5
 8001b8c:	4638      	mov	r0, r7
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <_svfiprintf_r+0x1f8>)
 8001b90:	a904      	add	r1, sp, #16
 8001b92:	f000 f87d 	bl	8001c90 <_printf_i>
 8001b96:	e7eb      	b.n	8001b70 <_svfiprintf_r+0x1c0>
 8001b98:	0800202a 	.word	0x0800202a
 8001b9c:	08002030 	.word	0x08002030
 8001ba0:	08002034 	.word	0x08002034
 8001ba4:	00000000 	.word	0x00000000
 8001ba8:	080018fd 	.word	0x080018fd

08001bac <_printf_common>:
 8001bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bb0:	4616      	mov	r6, r2
 8001bb2:	4699      	mov	r9, r3
 8001bb4:	688a      	ldr	r2, [r1, #8]
 8001bb6:	690b      	ldr	r3, [r1, #16]
 8001bb8:	4607      	mov	r7, r0
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	bfb8      	it	lt
 8001bbe:	4613      	movlt	r3, r2
 8001bc0:	6033      	str	r3, [r6, #0]
 8001bc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001bc6:	460c      	mov	r4, r1
 8001bc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001bcc:	b10a      	cbz	r2, 8001bd2 <_printf_common+0x26>
 8001bce:	3301      	adds	r3, #1
 8001bd0:	6033      	str	r3, [r6, #0]
 8001bd2:	6823      	ldr	r3, [r4, #0]
 8001bd4:	0699      	lsls	r1, r3, #26
 8001bd6:	bf42      	ittt	mi
 8001bd8:	6833      	ldrmi	r3, [r6, #0]
 8001bda:	3302      	addmi	r3, #2
 8001bdc:	6033      	strmi	r3, [r6, #0]
 8001bde:	6825      	ldr	r5, [r4, #0]
 8001be0:	f015 0506 	ands.w	r5, r5, #6
 8001be4:	d106      	bne.n	8001bf4 <_printf_common+0x48>
 8001be6:	f104 0a19 	add.w	sl, r4, #25
 8001bea:	68e3      	ldr	r3, [r4, #12]
 8001bec:	6832      	ldr	r2, [r6, #0]
 8001bee:	1a9b      	subs	r3, r3, r2
 8001bf0:	42ab      	cmp	r3, r5
 8001bf2:	dc2b      	bgt.n	8001c4c <_printf_common+0xa0>
 8001bf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001bf8:	1e13      	subs	r3, r2, #0
 8001bfa:	6822      	ldr	r2, [r4, #0]
 8001bfc:	bf18      	it	ne
 8001bfe:	2301      	movne	r3, #1
 8001c00:	0692      	lsls	r2, r2, #26
 8001c02:	d430      	bmi.n	8001c66 <_printf_common+0xba>
 8001c04:	4649      	mov	r1, r9
 8001c06:	4638      	mov	r0, r7
 8001c08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001c0c:	47c0      	blx	r8
 8001c0e:	3001      	adds	r0, #1
 8001c10:	d023      	beq.n	8001c5a <_printf_common+0xae>
 8001c12:	6823      	ldr	r3, [r4, #0]
 8001c14:	6922      	ldr	r2, [r4, #16]
 8001c16:	f003 0306 	and.w	r3, r3, #6
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	bf14      	ite	ne
 8001c1e:	2500      	movne	r5, #0
 8001c20:	6833      	ldreq	r3, [r6, #0]
 8001c22:	f04f 0600 	mov.w	r6, #0
 8001c26:	bf08      	it	eq
 8001c28:	68e5      	ldreq	r5, [r4, #12]
 8001c2a:	f104 041a 	add.w	r4, r4, #26
 8001c2e:	bf08      	it	eq
 8001c30:	1aed      	subeq	r5, r5, r3
 8001c32:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001c36:	bf08      	it	eq
 8001c38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	bfc4      	itt	gt
 8001c40:	1a9b      	subgt	r3, r3, r2
 8001c42:	18ed      	addgt	r5, r5, r3
 8001c44:	42b5      	cmp	r5, r6
 8001c46:	d11a      	bne.n	8001c7e <_printf_common+0xd2>
 8001c48:	2000      	movs	r0, #0
 8001c4a:	e008      	b.n	8001c5e <_printf_common+0xb2>
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	4652      	mov	r2, sl
 8001c50:	4649      	mov	r1, r9
 8001c52:	4638      	mov	r0, r7
 8001c54:	47c0      	blx	r8
 8001c56:	3001      	adds	r0, #1
 8001c58:	d103      	bne.n	8001c62 <_printf_common+0xb6>
 8001c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c62:	3501      	adds	r5, #1
 8001c64:	e7c1      	b.n	8001bea <_printf_common+0x3e>
 8001c66:	2030      	movs	r0, #48	; 0x30
 8001c68:	18e1      	adds	r1, r4, r3
 8001c6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001c6e:	1c5a      	adds	r2, r3, #1
 8001c70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001c74:	4422      	add	r2, r4
 8001c76:	3302      	adds	r3, #2
 8001c78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001c7c:	e7c2      	b.n	8001c04 <_printf_common+0x58>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	4622      	mov	r2, r4
 8001c82:	4649      	mov	r1, r9
 8001c84:	4638      	mov	r0, r7
 8001c86:	47c0      	blx	r8
 8001c88:	3001      	adds	r0, #1
 8001c8a:	d0e6      	beq.n	8001c5a <_printf_common+0xae>
 8001c8c:	3601      	adds	r6, #1
 8001c8e:	e7d9      	b.n	8001c44 <_printf_common+0x98>

08001c90 <_printf_i>:
 8001c90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c94:	7e0f      	ldrb	r7, [r1, #24]
 8001c96:	4691      	mov	r9, r2
 8001c98:	2f78      	cmp	r7, #120	; 0x78
 8001c9a:	4680      	mov	r8, r0
 8001c9c:	460c      	mov	r4, r1
 8001c9e:	469a      	mov	sl, r3
 8001ca0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001ca2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001ca6:	d807      	bhi.n	8001cb8 <_printf_i+0x28>
 8001ca8:	2f62      	cmp	r7, #98	; 0x62
 8001caa:	d80a      	bhi.n	8001cc2 <_printf_i+0x32>
 8001cac:	2f00      	cmp	r7, #0
 8001cae:	f000 80d5 	beq.w	8001e5c <_printf_i+0x1cc>
 8001cb2:	2f58      	cmp	r7, #88	; 0x58
 8001cb4:	f000 80c1 	beq.w	8001e3a <_printf_i+0x1aa>
 8001cb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001cbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001cc0:	e03a      	b.n	8001d38 <_printf_i+0xa8>
 8001cc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001cc6:	2b15      	cmp	r3, #21
 8001cc8:	d8f6      	bhi.n	8001cb8 <_printf_i+0x28>
 8001cca:	a101      	add	r1, pc, #4	; (adr r1, 8001cd0 <_printf_i+0x40>)
 8001ccc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001cd0:	08001d29 	.word	0x08001d29
 8001cd4:	08001d3d 	.word	0x08001d3d
 8001cd8:	08001cb9 	.word	0x08001cb9
 8001cdc:	08001cb9 	.word	0x08001cb9
 8001ce0:	08001cb9 	.word	0x08001cb9
 8001ce4:	08001cb9 	.word	0x08001cb9
 8001ce8:	08001d3d 	.word	0x08001d3d
 8001cec:	08001cb9 	.word	0x08001cb9
 8001cf0:	08001cb9 	.word	0x08001cb9
 8001cf4:	08001cb9 	.word	0x08001cb9
 8001cf8:	08001cb9 	.word	0x08001cb9
 8001cfc:	08001e43 	.word	0x08001e43
 8001d00:	08001d69 	.word	0x08001d69
 8001d04:	08001dfd 	.word	0x08001dfd
 8001d08:	08001cb9 	.word	0x08001cb9
 8001d0c:	08001cb9 	.word	0x08001cb9
 8001d10:	08001e65 	.word	0x08001e65
 8001d14:	08001cb9 	.word	0x08001cb9
 8001d18:	08001d69 	.word	0x08001d69
 8001d1c:	08001cb9 	.word	0x08001cb9
 8001d20:	08001cb9 	.word	0x08001cb9
 8001d24:	08001e05 	.word	0x08001e05
 8001d28:	682b      	ldr	r3, [r5, #0]
 8001d2a:	1d1a      	adds	r2, r3, #4
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	602a      	str	r2, [r5, #0]
 8001d30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0a0      	b.n	8001e7e <_printf_i+0x1ee>
 8001d3c:	6820      	ldr	r0, [r4, #0]
 8001d3e:	682b      	ldr	r3, [r5, #0]
 8001d40:	0607      	lsls	r7, r0, #24
 8001d42:	f103 0104 	add.w	r1, r3, #4
 8001d46:	6029      	str	r1, [r5, #0]
 8001d48:	d501      	bpl.n	8001d4e <_printf_i+0xbe>
 8001d4a:	681e      	ldr	r6, [r3, #0]
 8001d4c:	e003      	b.n	8001d56 <_printf_i+0xc6>
 8001d4e:	0646      	lsls	r6, r0, #25
 8001d50:	d5fb      	bpl.n	8001d4a <_printf_i+0xba>
 8001d52:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001d56:	2e00      	cmp	r6, #0
 8001d58:	da03      	bge.n	8001d62 <_printf_i+0xd2>
 8001d5a:	232d      	movs	r3, #45	; 0x2d
 8001d5c:	4276      	negs	r6, r6
 8001d5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d62:	230a      	movs	r3, #10
 8001d64:	4859      	ldr	r0, [pc, #356]	; (8001ecc <_printf_i+0x23c>)
 8001d66:	e012      	b.n	8001d8e <_printf_i+0xfe>
 8001d68:	682b      	ldr	r3, [r5, #0]
 8001d6a:	6820      	ldr	r0, [r4, #0]
 8001d6c:	1d19      	adds	r1, r3, #4
 8001d6e:	6029      	str	r1, [r5, #0]
 8001d70:	0605      	lsls	r5, r0, #24
 8001d72:	d501      	bpl.n	8001d78 <_printf_i+0xe8>
 8001d74:	681e      	ldr	r6, [r3, #0]
 8001d76:	e002      	b.n	8001d7e <_printf_i+0xee>
 8001d78:	0641      	lsls	r1, r0, #25
 8001d7a:	d5fb      	bpl.n	8001d74 <_printf_i+0xe4>
 8001d7c:	881e      	ldrh	r6, [r3, #0]
 8001d7e:	2f6f      	cmp	r7, #111	; 0x6f
 8001d80:	bf0c      	ite	eq
 8001d82:	2308      	moveq	r3, #8
 8001d84:	230a      	movne	r3, #10
 8001d86:	4851      	ldr	r0, [pc, #324]	; (8001ecc <_printf_i+0x23c>)
 8001d88:	2100      	movs	r1, #0
 8001d8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001d8e:	6865      	ldr	r5, [r4, #4]
 8001d90:	2d00      	cmp	r5, #0
 8001d92:	bfa8      	it	ge
 8001d94:	6821      	ldrge	r1, [r4, #0]
 8001d96:	60a5      	str	r5, [r4, #8]
 8001d98:	bfa4      	itt	ge
 8001d9a:	f021 0104 	bicge.w	r1, r1, #4
 8001d9e:	6021      	strge	r1, [r4, #0]
 8001da0:	b90e      	cbnz	r6, 8001da6 <_printf_i+0x116>
 8001da2:	2d00      	cmp	r5, #0
 8001da4:	d04b      	beq.n	8001e3e <_printf_i+0x1ae>
 8001da6:	4615      	mov	r5, r2
 8001da8:	fbb6 f1f3 	udiv	r1, r6, r3
 8001dac:	fb03 6711 	mls	r7, r3, r1, r6
 8001db0:	5dc7      	ldrb	r7, [r0, r7]
 8001db2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001db6:	4637      	mov	r7, r6
 8001db8:	42bb      	cmp	r3, r7
 8001dba:	460e      	mov	r6, r1
 8001dbc:	d9f4      	bls.n	8001da8 <_printf_i+0x118>
 8001dbe:	2b08      	cmp	r3, #8
 8001dc0:	d10b      	bne.n	8001dda <_printf_i+0x14a>
 8001dc2:	6823      	ldr	r3, [r4, #0]
 8001dc4:	07de      	lsls	r6, r3, #31
 8001dc6:	d508      	bpl.n	8001dda <_printf_i+0x14a>
 8001dc8:	6923      	ldr	r3, [r4, #16]
 8001dca:	6861      	ldr	r1, [r4, #4]
 8001dcc:	4299      	cmp	r1, r3
 8001dce:	bfde      	ittt	le
 8001dd0:	2330      	movle	r3, #48	; 0x30
 8001dd2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001dd6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001dda:	1b52      	subs	r2, r2, r5
 8001ddc:	6122      	str	r2, [r4, #16]
 8001dde:	464b      	mov	r3, r9
 8001de0:	4621      	mov	r1, r4
 8001de2:	4640      	mov	r0, r8
 8001de4:	f8cd a000 	str.w	sl, [sp]
 8001de8:	aa03      	add	r2, sp, #12
 8001dea:	f7ff fedf 	bl	8001bac <_printf_common>
 8001dee:	3001      	adds	r0, #1
 8001df0:	d14a      	bne.n	8001e88 <_printf_i+0x1f8>
 8001df2:	f04f 30ff 	mov.w	r0, #4294967295
 8001df6:	b004      	add	sp, #16
 8001df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001dfc:	6823      	ldr	r3, [r4, #0]
 8001dfe:	f043 0320 	orr.w	r3, r3, #32
 8001e02:	6023      	str	r3, [r4, #0]
 8001e04:	2778      	movs	r7, #120	; 0x78
 8001e06:	4832      	ldr	r0, [pc, #200]	; (8001ed0 <_printf_i+0x240>)
 8001e08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001e0c:	6823      	ldr	r3, [r4, #0]
 8001e0e:	6829      	ldr	r1, [r5, #0]
 8001e10:	061f      	lsls	r7, r3, #24
 8001e12:	f851 6b04 	ldr.w	r6, [r1], #4
 8001e16:	d402      	bmi.n	8001e1e <_printf_i+0x18e>
 8001e18:	065f      	lsls	r7, r3, #25
 8001e1a:	bf48      	it	mi
 8001e1c:	b2b6      	uxthmi	r6, r6
 8001e1e:	07df      	lsls	r7, r3, #31
 8001e20:	bf48      	it	mi
 8001e22:	f043 0320 	orrmi.w	r3, r3, #32
 8001e26:	6029      	str	r1, [r5, #0]
 8001e28:	bf48      	it	mi
 8001e2a:	6023      	strmi	r3, [r4, #0]
 8001e2c:	b91e      	cbnz	r6, 8001e36 <_printf_i+0x1a6>
 8001e2e:	6823      	ldr	r3, [r4, #0]
 8001e30:	f023 0320 	bic.w	r3, r3, #32
 8001e34:	6023      	str	r3, [r4, #0]
 8001e36:	2310      	movs	r3, #16
 8001e38:	e7a6      	b.n	8001d88 <_printf_i+0xf8>
 8001e3a:	4824      	ldr	r0, [pc, #144]	; (8001ecc <_printf_i+0x23c>)
 8001e3c:	e7e4      	b.n	8001e08 <_printf_i+0x178>
 8001e3e:	4615      	mov	r5, r2
 8001e40:	e7bd      	b.n	8001dbe <_printf_i+0x12e>
 8001e42:	682b      	ldr	r3, [r5, #0]
 8001e44:	6826      	ldr	r6, [r4, #0]
 8001e46:	1d18      	adds	r0, r3, #4
 8001e48:	6961      	ldr	r1, [r4, #20]
 8001e4a:	6028      	str	r0, [r5, #0]
 8001e4c:	0635      	lsls	r5, r6, #24
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	d501      	bpl.n	8001e56 <_printf_i+0x1c6>
 8001e52:	6019      	str	r1, [r3, #0]
 8001e54:	e002      	b.n	8001e5c <_printf_i+0x1cc>
 8001e56:	0670      	lsls	r0, r6, #25
 8001e58:	d5fb      	bpl.n	8001e52 <_printf_i+0x1c2>
 8001e5a:	8019      	strh	r1, [r3, #0]
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	4615      	mov	r5, r2
 8001e60:	6123      	str	r3, [r4, #16]
 8001e62:	e7bc      	b.n	8001dde <_printf_i+0x14e>
 8001e64:	682b      	ldr	r3, [r5, #0]
 8001e66:	2100      	movs	r1, #0
 8001e68:	1d1a      	adds	r2, r3, #4
 8001e6a:	602a      	str	r2, [r5, #0]
 8001e6c:	681d      	ldr	r5, [r3, #0]
 8001e6e:	6862      	ldr	r2, [r4, #4]
 8001e70:	4628      	mov	r0, r5
 8001e72:	f000 f859 	bl	8001f28 <memchr>
 8001e76:	b108      	cbz	r0, 8001e7c <_printf_i+0x1ec>
 8001e78:	1b40      	subs	r0, r0, r5
 8001e7a:	6060      	str	r0, [r4, #4]
 8001e7c:	6863      	ldr	r3, [r4, #4]
 8001e7e:	6123      	str	r3, [r4, #16]
 8001e80:	2300      	movs	r3, #0
 8001e82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e86:	e7aa      	b.n	8001dde <_printf_i+0x14e>
 8001e88:	462a      	mov	r2, r5
 8001e8a:	4649      	mov	r1, r9
 8001e8c:	4640      	mov	r0, r8
 8001e8e:	6923      	ldr	r3, [r4, #16]
 8001e90:	47d0      	blx	sl
 8001e92:	3001      	adds	r0, #1
 8001e94:	d0ad      	beq.n	8001df2 <_printf_i+0x162>
 8001e96:	6823      	ldr	r3, [r4, #0]
 8001e98:	079b      	lsls	r3, r3, #30
 8001e9a:	d413      	bmi.n	8001ec4 <_printf_i+0x234>
 8001e9c:	68e0      	ldr	r0, [r4, #12]
 8001e9e:	9b03      	ldr	r3, [sp, #12]
 8001ea0:	4298      	cmp	r0, r3
 8001ea2:	bfb8      	it	lt
 8001ea4:	4618      	movlt	r0, r3
 8001ea6:	e7a6      	b.n	8001df6 <_printf_i+0x166>
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	4632      	mov	r2, r6
 8001eac:	4649      	mov	r1, r9
 8001eae:	4640      	mov	r0, r8
 8001eb0:	47d0      	blx	sl
 8001eb2:	3001      	adds	r0, #1
 8001eb4:	d09d      	beq.n	8001df2 <_printf_i+0x162>
 8001eb6:	3501      	adds	r5, #1
 8001eb8:	68e3      	ldr	r3, [r4, #12]
 8001eba:	9903      	ldr	r1, [sp, #12]
 8001ebc:	1a5b      	subs	r3, r3, r1
 8001ebe:	42ab      	cmp	r3, r5
 8001ec0:	dcf2      	bgt.n	8001ea8 <_printf_i+0x218>
 8001ec2:	e7eb      	b.n	8001e9c <_printf_i+0x20c>
 8001ec4:	2500      	movs	r5, #0
 8001ec6:	f104 0619 	add.w	r6, r4, #25
 8001eca:	e7f5      	b.n	8001eb8 <_printf_i+0x228>
 8001ecc:	0800203b 	.word	0x0800203b
 8001ed0:	0800204c 	.word	0x0800204c

08001ed4 <memmove>:
 8001ed4:	4288      	cmp	r0, r1
 8001ed6:	b510      	push	{r4, lr}
 8001ed8:	eb01 0402 	add.w	r4, r1, r2
 8001edc:	d902      	bls.n	8001ee4 <memmove+0x10>
 8001ede:	4284      	cmp	r4, r0
 8001ee0:	4623      	mov	r3, r4
 8001ee2:	d807      	bhi.n	8001ef4 <memmove+0x20>
 8001ee4:	1e43      	subs	r3, r0, #1
 8001ee6:	42a1      	cmp	r1, r4
 8001ee8:	d008      	beq.n	8001efc <memmove+0x28>
 8001eea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001eee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001ef2:	e7f8      	b.n	8001ee6 <memmove+0x12>
 8001ef4:	4601      	mov	r1, r0
 8001ef6:	4402      	add	r2, r0
 8001ef8:	428a      	cmp	r2, r1
 8001efa:	d100      	bne.n	8001efe <memmove+0x2a>
 8001efc:	bd10      	pop	{r4, pc}
 8001efe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001f02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001f06:	e7f7      	b.n	8001ef8 <memmove+0x24>

08001f08 <_sbrk_r>:
 8001f08:	b538      	push	{r3, r4, r5, lr}
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	4d05      	ldr	r5, [pc, #20]	; (8001f24 <_sbrk_r+0x1c>)
 8001f0e:	4604      	mov	r4, r0
 8001f10:	4608      	mov	r0, r1
 8001f12:	602b      	str	r3, [r5, #0]
 8001f14:	f7fe fa7a 	bl	800040c <_sbrk>
 8001f18:	1c43      	adds	r3, r0, #1
 8001f1a:	d102      	bne.n	8001f22 <_sbrk_r+0x1a>
 8001f1c:	682b      	ldr	r3, [r5, #0]
 8001f1e:	b103      	cbz	r3, 8001f22 <_sbrk_r+0x1a>
 8001f20:	6023      	str	r3, [r4, #0]
 8001f22:	bd38      	pop	{r3, r4, r5, pc}
 8001f24:	20000200 	.word	0x20000200

08001f28 <memchr>:
 8001f28:	4603      	mov	r3, r0
 8001f2a:	b510      	push	{r4, lr}
 8001f2c:	b2c9      	uxtb	r1, r1
 8001f2e:	4402      	add	r2, r0
 8001f30:	4293      	cmp	r3, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	d101      	bne.n	8001f3a <memchr+0x12>
 8001f36:	2000      	movs	r0, #0
 8001f38:	e003      	b.n	8001f42 <memchr+0x1a>
 8001f3a:	7804      	ldrb	r4, [r0, #0]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	428c      	cmp	r4, r1
 8001f40:	d1f6      	bne.n	8001f30 <memchr+0x8>
 8001f42:	bd10      	pop	{r4, pc}

08001f44 <memcpy>:
 8001f44:	440a      	add	r2, r1
 8001f46:	4291      	cmp	r1, r2
 8001f48:	f100 33ff 	add.w	r3, r0, #4294967295
 8001f4c:	d100      	bne.n	8001f50 <memcpy+0xc>
 8001f4e:	4770      	bx	lr
 8001f50:	b510      	push	{r4, lr}
 8001f52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001f56:	4291      	cmp	r1, r2
 8001f58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001f5c:	d1f9      	bne.n	8001f52 <memcpy+0xe>
 8001f5e:	bd10      	pop	{r4, pc}

08001f60 <_realloc_r>:
 8001f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f64:	4680      	mov	r8, r0
 8001f66:	4614      	mov	r4, r2
 8001f68:	460e      	mov	r6, r1
 8001f6a:	b921      	cbnz	r1, 8001f76 <_realloc_r+0x16>
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f72:	f7ff bc37 	b.w	80017e4 <_malloc_r>
 8001f76:	b92a      	cbnz	r2, 8001f84 <_realloc_r+0x24>
 8001f78:	f7ff fbcc 	bl	8001714 <_free_r>
 8001f7c:	4625      	mov	r5, r4
 8001f7e:	4628      	mov	r0, r5
 8001f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f84:	f000 f81b 	bl	8001fbe <_malloc_usable_size_r>
 8001f88:	4284      	cmp	r4, r0
 8001f8a:	4607      	mov	r7, r0
 8001f8c:	d802      	bhi.n	8001f94 <_realloc_r+0x34>
 8001f8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001f92:	d812      	bhi.n	8001fba <_realloc_r+0x5a>
 8001f94:	4621      	mov	r1, r4
 8001f96:	4640      	mov	r0, r8
 8001f98:	f7ff fc24 	bl	80017e4 <_malloc_r>
 8001f9c:	4605      	mov	r5, r0
 8001f9e:	2800      	cmp	r0, #0
 8001fa0:	d0ed      	beq.n	8001f7e <_realloc_r+0x1e>
 8001fa2:	42bc      	cmp	r4, r7
 8001fa4:	4622      	mov	r2, r4
 8001fa6:	4631      	mov	r1, r6
 8001fa8:	bf28      	it	cs
 8001faa:	463a      	movcs	r2, r7
 8001fac:	f7ff ffca 	bl	8001f44 <memcpy>
 8001fb0:	4631      	mov	r1, r6
 8001fb2:	4640      	mov	r0, r8
 8001fb4:	f7ff fbae 	bl	8001714 <_free_r>
 8001fb8:	e7e1      	b.n	8001f7e <_realloc_r+0x1e>
 8001fba:	4635      	mov	r5, r6
 8001fbc:	e7df      	b.n	8001f7e <_realloc_r+0x1e>

08001fbe <_malloc_usable_size_r>:
 8001fbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001fc2:	1f18      	subs	r0, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	bfbc      	itt	lt
 8001fc8:	580b      	ldrlt	r3, [r1, r0]
 8001fca:	18c0      	addlt	r0, r0, r3
 8001fcc:	4770      	bx	lr
	...

08001fd0 <_init>:
 8001fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fd2:	bf00      	nop
 8001fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fd6:	bc08      	pop	{r3}
 8001fd8:	469e      	mov	lr, r3
 8001fda:	4770      	bx	lr

08001fdc <_fini>:
 8001fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fde:	bf00      	nop
 8001fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fe2:	bc08      	pop	{r3}
 8001fe4:	469e      	mov	lr, r3
 8001fe6:	4770      	bx	lr
