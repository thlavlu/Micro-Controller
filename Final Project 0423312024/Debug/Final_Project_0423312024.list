
Final_Project_0423312024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000267c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08002788  08002788  00012788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027dc  080027dc  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080027dc  080027dc  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027dc  080027dc  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027dc  080027dc  000127dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027e0  080027e0  000127e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080027e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000064  08002848  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08002848  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d01d  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ccb  00000000  00000000  0002d0ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db8  00000000  00000000  0002edb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ac7  00000000  00000000  0002fb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017b86  00000000  00000000  00030637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000edfd  00000000  00000000  000481bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bad7  00000000  00000000  00056fba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039d8  00000000  00000000  000e2a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e646c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08002770 	.word	0x08002770

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08002770 	.word	0x08002770

0800014c <SPI_byte>:
extern SPI_HandleTypeDef hspi1;

void tiny_dly(void) {
}
void SPI_byte (uint8_t byte)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &byte, 1, 1);
 8000156:	1df9      	adds	r1, r7, #7
 8000158:	2301      	movs	r3, #1
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <SPI_byte+0x20>)
 800015e:	f001 fda7 	bl	8001cb0 <HAL_SPI_Transmit>

}
 8000162:	bf00      	nop
 8000164:	3708      	adds	r7, #8
 8000166:	46bd      	mov	sp, r7
 8000168:	bd80      	pop	{r7, pc}
 800016a:	bf00      	nop
 800016c:	2000008c 	.word	0x2000008c

08000170 <SPI_7219_SEND>:


void SPI_7219_SEND (uint8_t address, uint8_t data, int n)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	603a      	str	r2, [r7, #0]
 800017a:	71fb      	strb	r3, [r7, #7]
 800017c:	460b      	mov	r3, r1
 800017e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (SPI_Port, cs_Pin, 0);  // pull the CS pin LOW
 8000180:	2200      	movs	r2, #0
 8000182:	2110      	movs	r1, #16
 8000184:	4812      	ldr	r0, [pc, #72]	; (80001d0 <SPI_7219_SEND+0x60>)
 8000186:	f001 f8e6 	bl	8001356 <HAL_GPIO_WritePin>

	SPI_byte (address);
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	4618      	mov	r0, r3
 800018e:	f7ff ffdd 	bl	800014c <SPI_byte>
	SPI_byte (data);
 8000192:	79bb      	ldrb	r3, [r7, #6]
 8000194:	4618      	mov	r0, r3
 8000196:	f7ff ffd9 	bl	800014c <SPI_byte>

	for (int k=0; k<(n-1); k++)
 800019a:	2300      	movs	r3, #0
 800019c:	60fb      	str	r3, [r7, #12]
 800019e:	e008      	b.n	80001b2 <SPI_7219_SEND+0x42>
		{
			SPI_byte (0x00); //Address of No Operation
 80001a0:	2000      	movs	r0, #0
 80001a2:	f7ff ffd3 	bl	800014c <SPI_byte>
			SPI_byte (0x00);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <SPI_byte>
	for (int k=0; k<(n-1); k++)
 80001ac:	68fb      	ldr	r3, [r7, #12]
 80001ae:	3301      	adds	r3, #1
 80001b0:	60fb      	str	r3, [r7, #12]
 80001b2:	683b      	ldr	r3, [r7, #0]
 80001b4:	3b01      	subs	r3, #1
 80001b6:	68fa      	ldr	r2, [r7, #12]
 80001b8:	429a      	cmp	r2, r3
 80001ba:	dbf1      	blt.n	80001a0 <SPI_7219_SEND+0x30>
		}

	HAL_GPIO_WritePin (SPI_Port, cs_Pin, 1);  // pull the CS pin HIGH
 80001bc:	2201      	movs	r2, #1
 80001be:	2110      	movs	r1, #16
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <SPI_7219_SEND+0x60>)
 80001c2:	f001 f8c8 	bl	8001356 <HAL_GPIO_WritePin>

}
 80001c6:	bf00      	nop
 80001c8:	3710      	adds	r7, #16
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	40010800 	.word	0x40010800

080001d4 <SPI_7219_INIT>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SPI_7219_INIT(int n) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	for (int k = 1; k <= n; k++) {
 80001dc:	2301      	movs	r3, #1
 80001de:	60fb      	str	r3, [r7, #12]
 80001e0:	e01b      	b.n	800021a <SPI_7219_INIT+0x46>
		SPI_7219_SEND(0x09, 0x00, k);       //  no decoding
 80001e2:	68fa      	ldr	r2, [r7, #12]
 80001e4:	2100      	movs	r1, #0
 80001e6:	2009      	movs	r0, #9
 80001e8:	f7ff ffc2 	bl	8000170 <SPI_7219_SEND>
		SPI_7219_SEND(0x0A, 0x0F, k);       //  brightness intensity
 80001ec:	68fa      	ldr	r2, [r7, #12]
 80001ee:	210f      	movs	r1, #15
 80001f0:	200a      	movs	r0, #10
 80001f2:	f7ff ffbd 	bl	8000170 <SPI_7219_SEND>
		SPI_7219_SEND(0x0B, 0x07, k);       //  scan limit = 8 LEDs
 80001f6:	68fa      	ldr	r2, [r7, #12]
 80001f8:	2107      	movs	r1, #7
 80001fa:	200b      	movs	r0, #11
 80001fc:	f7ff ffb8 	bl	8000170 <SPI_7219_SEND>
		SPI_7219_SEND(0x0C, 0x01, k);       //  power down =0,normal mode = 1
 8000200:	68fa      	ldr	r2, [r7, #12]
 8000202:	2101      	movs	r1, #1
 8000204:	200c      	movs	r0, #12
 8000206:	f7ff ffb3 	bl	8000170 <SPI_7219_SEND>
		SPI_7219_SEND(0x0F, 0x00, k);       //  no test display
 800020a:	68fa      	ldr	r2, [r7, #12]
 800020c:	2100      	movs	r1, #0
 800020e:	200f      	movs	r0, #15
 8000210:	f7ff ffae 	bl	8000170 <SPI_7219_SEND>
	for (int k = 1; k <= n; k++) {
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	3301      	adds	r3, #1
 8000218:	60fb      	str	r3, [r7, #12]
 800021a:	68fa      	ldr	r2, [r7, #12]
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	429a      	cmp	r2, r3
 8000220:	dddf      	ble.n	80001e2 <SPI_7219_INIT+0xe>
	}
}
 8000222:	bf00      	nop
 8000224:	bf00      	nop
 8000226:	3710      	adds	r7, #16
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}

0800022c <display_digit>:

void display_digit(uint8_t digit, uint8_t shift) {
 800022c:	b5b0      	push	{r4, r5, r7, lr}
 800022e:	b092      	sub	sp, #72	; 0x48
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	460a      	mov	r2, r1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	4613      	mov	r3, r2
 800023a:	71bb      	strb	r3, [r7, #6]
    // Holding the digits 0 to 9.
    const uint8_t* digit_data[] = {Data_0, Data_1, Data_2, Data_3, Data_4, Data_5, Data_6, Data_7, Data_8, Data_9};
 800023c:	4b58      	ldr	r3, [pc, #352]	; (80003a0 <display_digit+0x174>)
 800023e:	f107 040c 	add.w	r4, r7, #12
 8000242:	461d      	mov	r5, r3
 8000244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800024a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800024c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000250:	e884 0003 	stmia.w	r4, {r0, r1}
    //uint8_t shift;
    if (digit >= 0 && digit <= 9) {
 8000254:	79fb      	ldrb	r3, [r7, #7]
 8000256:	2b09      	cmp	r3, #9
 8000258:	f200 8081 	bhi.w	800035e <display_digit+0x132>
    	if (shift == 4 ){
 800025c:	79bb      	ldrb	r3, [r7, #6]
 800025e:	2b04      	cmp	r3, #4
 8000260:	d11a      	bne.n	8000298 <display_digit+0x6c>
        	for (int i = 0; i < 8; i++) {
 8000262:	2300      	movs	r3, #0
 8000264:	647b      	str	r3, [r7, #68]	; 0x44
 8000266:	e013      	b.n	8000290 <display_digit+0x64>
        	SPI_7219_SEND(i + 1, digit_data[digit][i], 4);   //4th display
 8000268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800026a:	b2db      	uxtb	r3, r3
 800026c:	3301      	adds	r3, #1
 800026e:	b2d8      	uxtb	r0, r3
 8000270:	79fb      	ldrb	r3, [r7, #7]
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	3348      	adds	r3, #72	; 0x48
 8000276:	443b      	add	r3, r7
 8000278:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 800027c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800027e:	4413      	add	r3, r2
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	2204      	movs	r2, #4
 8000284:	4619      	mov	r1, r3
 8000286:	f7ff ff73 	bl	8000170 <SPI_7219_SEND>
        	for (int i = 0; i < 8; i++) {
 800028a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800028c:	3301      	adds	r3, #1
 800028e:	647b      	str	r3, [r7, #68]	; 0x44
 8000290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000292:	2b07      	cmp	r3, #7
 8000294:	dde8      	ble.n	8000268 <display_digit+0x3c>
        // Handle the default case.
        for (int i = 0; i < 8; i++) {
           SPI_7219_SEND(i + 1, Data_0[i] << shift, 3 - shift);
        }
    }
}
 8000296:	e07e      	b.n	8000396 <display_digit+0x16a>
    	} else if (shift == 3){
 8000298:	79bb      	ldrb	r3, [r7, #6]
 800029a:	2b03      	cmp	r3, #3
 800029c:	d11c      	bne.n	80002d8 <display_digit+0xac>
        	for (int i = 0; i < 8; i++) {
 800029e:	2300      	movs	r3, #0
 80002a0:	643b      	str	r3, [r7, #64]	; 0x40
 80002a2:	e015      	b.n	80002d0 <display_digit+0xa4>
        	SPI_7219_SEND(i + 1, digit_data[digit][i]<<2, 3);  // 3rd display
 80002a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	3301      	adds	r3, #1
 80002aa:	b2d8      	uxtb	r0, r3
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	009b      	lsls	r3, r3, #2
 80002b0:	3348      	adds	r3, #72	; 0x48
 80002b2:	443b      	add	r3, r7
 80002b4:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 80002b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80002ba:	4413      	add	r3, r2
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	009b      	lsls	r3, r3, #2
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	2203      	movs	r2, #3
 80002c4:	4619      	mov	r1, r3
 80002c6:	f7ff ff53 	bl	8000170 <SPI_7219_SEND>
        	for (int i = 0; i < 8; i++) {
 80002ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80002cc:	3301      	adds	r3, #1
 80002ce:	643b      	str	r3, [r7, #64]	; 0x40
 80002d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80002d2:	2b07      	cmp	r3, #7
 80002d4:	dde6      	ble.n	80002a4 <display_digit+0x78>
}
 80002d6:	e05e      	b.n	8000396 <display_digit+0x16a>
    	} else if (shift == 2){
 80002d8:	79bb      	ldrb	r3, [r7, #6]
 80002da:	2b02      	cmp	r3, #2
 80002dc:	d124      	bne.n	8000328 <display_digit+0xfc>
        	for (int i = 0; i < 8; i++) {
 80002de:	2300      	movs	r3, #0
 80002e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80002e2:	e01d      	b.n	8000320 <display_digit+0xf4>
        	SPI_7219_SEND(i + 1, Data_k[i]<<6|digit_data[digit][i], 2);  //2nd display
 80002e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	3301      	adds	r3, #1
 80002ea:	b2d8      	uxtb	r0, r3
 80002ec:	4a2d      	ldr	r2, [pc, #180]	; (80003a4 <display_digit+0x178>)
 80002ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80002f0:	4413      	add	r3, r2
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	019b      	lsls	r3, r3, #6
 80002f6:	b25a      	sxtb	r2, r3
 80002f8:	79fb      	ldrb	r3, [r7, #7]
 80002fa:	009b      	lsls	r3, r3, #2
 80002fc:	3348      	adds	r3, #72	; 0x48
 80002fe:	443b      	add	r3, r7
 8000300:	f853 1c3c 	ldr.w	r1, [r3, #-60]
 8000304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000306:	440b      	add	r3, r1
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	b25b      	sxtb	r3, r3
 800030c:	4313      	orrs	r3, r2
 800030e:	b25b      	sxtb	r3, r3
 8000310:	b2db      	uxtb	r3, r3
 8000312:	2202      	movs	r2, #2
 8000314:	4619      	mov	r1, r3
 8000316:	f7ff ff2b 	bl	8000170 <SPI_7219_SEND>
        	for (int i = 0; i < 8; i++) {
 800031a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800031c:	3301      	adds	r3, #1
 800031e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000322:	2b07      	cmp	r3, #7
 8000324:	ddde      	ble.n	80002e4 <display_digit+0xb8>
}
 8000326:	e036      	b.n	8000396 <display_digit+0x16a>
    	} else if (shift == 1){
 8000328:	79bb      	ldrb	r3, [r7, #6]
 800032a:	2b01      	cmp	r3, #1
 800032c:	d133      	bne.n	8000396 <display_digit+0x16a>
            for (int i = 0; i < 8; i++) {
 800032e:	2300      	movs	r3, #0
 8000330:	63bb      	str	r3, [r7, #56]	; 0x38
 8000332:	e010      	b.n	8000356 <display_digit+0x12a>
            	SPI_7219_SEND(i + 1, Data_0[i]<<2, 1); //first display
 8000334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000336:	b2db      	uxtb	r3, r3
 8000338:	3301      	adds	r3, #1
 800033a:	b2d8      	uxtb	r0, r3
 800033c:	4a1a      	ldr	r2, [pc, #104]	; (80003a8 <display_digit+0x17c>)
 800033e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000340:	4413      	add	r3, r2
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	009b      	lsls	r3, r3, #2
 8000346:	b2db      	uxtb	r3, r3
 8000348:	2201      	movs	r2, #1
 800034a:	4619      	mov	r1, r3
 800034c:	f7ff ff10 	bl	8000170 <SPI_7219_SEND>
            for (int i = 0; i < 8; i++) {
 8000350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000352:	3301      	adds	r3, #1
 8000354:	63bb      	str	r3, [r7, #56]	; 0x38
 8000356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000358:	2b07      	cmp	r3, #7
 800035a:	ddeb      	ble.n	8000334 <display_digit+0x108>
}
 800035c:	e01b      	b.n	8000396 <display_digit+0x16a>
        for (int i = 0; i < 8; i++) {
 800035e:	2300      	movs	r3, #0
 8000360:	637b      	str	r3, [r7, #52]	; 0x34
 8000362:	e015      	b.n	8000390 <display_digit+0x164>
           SPI_7219_SEND(i + 1, Data_0[i] << shift, 3 - shift);
 8000364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000366:	b2db      	uxtb	r3, r3
 8000368:	3301      	adds	r3, #1
 800036a:	b2d8      	uxtb	r0, r3
 800036c:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <display_digit+0x17c>)
 800036e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000370:	4413      	add	r3, r2
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	461a      	mov	r2, r3
 8000376:	79bb      	ldrb	r3, [r7, #6]
 8000378:	fa02 f303 	lsl.w	r3, r2, r3
 800037c:	b2d9      	uxtb	r1, r3
 800037e:	79bb      	ldrb	r3, [r7, #6]
 8000380:	f1c3 0303 	rsb	r3, r3, #3
 8000384:	461a      	mov	r2, r3
 8000386:	f7ff fef3 	bl	8000170 <SPI_7219_SEND>
        for (int i = 0; i < 8; i++) {
 800038a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800038c:	3301      	adds	r3, #1
 800038e:	637b      	str	r3, [r7, #52]	; 0x34
 8000390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000392:	2b07      	cmp	r3, #7
 8000394:	dde6      	ble.n	8000364 <display_digit+0x138>
}
 8000396:	bf00      	nop
 8000398:	3748      	adds	r7, #72	; 0x48
 800039a:	46bd      	mov	sp, r7
 800039c:	bdb0      	pop	{r4, r5, r7, pc}
 800039e:	bf00      	nop
 80003a0:	08002788 	.word	0x08002788
 80003a4:	20000050 	.word	0x20000050
 80003a8:	20000000 	.word	0x20000000

080003ac <display_rtc>:

void display_rtc(uint8_t hr_u, uint8_t hr_d, uint8_t mn_u, uint8_t mn_d) {
 80003ac:	b590      	push	{r4, r7, lr}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4604      	mov	r4, r0
 80003b4:	4608      	mov	r0, r1
 80003b6:	4611      	mov	r1, r2
 80003b8:	461a      	mov	r2, r3
 80003ba:	4623      	mov	r3, r4
 80003bc:	71fb      	strb	r3, [r7, #7]
 80003be:	4603      	mov	r3, r0
 80003c0:	71bb      	strb	r3, [r7, #6]
 80003c2:	460b      	mov	r3, r1
 80003c4:	717b      	strb	r3, [r7, #5]
 80003c6:	4613      	mov	r3, r2
 80003c8:	713b      	strb	r3, [r7, #4]
    // Display hours tens and units digits.
    display_digit(hr_d, 4);  //4th display
 80003ca:	79bb      	ldrb	r3, [r7, #6]
 80003cc:	2104      	movs	r1, #4
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ff2c 	bl	800022c <display_digit>
    display_digit(hr_u, 3); // 3rd display
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	2103      	movs	r1, #3
 80003d8:	4618      	mov	r0, r3
 80003da:	f7ff ff27 	bl	800022c <display_digit>
    // Display minutes tens and units digits.
    display_digit(mn_d, 2); //2nd display
 80003de:	793b      	ldrb	r3, [r7, #4]
 80003e0:	2102      	movs	r1, #2
 80003e2:	4618      	mov	r0, r3
 80003e4:	f7ff ff22 	bl	800022c <display_digit>
    display_digit(mn_u, 1); //first display
 80003e8:	797b      	ldrb	r3, [r7, #5]
 80003ea:	2101      	movs	r1, #1
 80003ec:	4618      	mov	r0, r3
 80003ee:	f7ff ff1d 	bl	800022c <display_digit>
}
 80003f2:	bf00      	nop
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd90      	pop	{r4, r7, pc}

080003fa <I2C_dly>:
// Tiny delay
void I2C_dly(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0
}
 80003fe:	bf00      	nop
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr
	...

08000408 <I2C_Start>:

void I2C_Start(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(I2C_PORT, SDA, 1);  // SDA = 1 i2c start bit sequence
 800040c:	2201      	movs	r2, #1
 800040e:	2102      	movs	r1, #2
 8000410:	480d      	ldr	r0, [pc, #52]	; (8000448 <I2C_Start+0x40>)
 8000412:	f000 ffa0 	bl	8001356 <HAL_GPIO_WritePin>
  I2C_dly();
 8000416:	f7ff fff0 	bl	80003fa <I2C_dly>
  HAL_GPIO_WritePin(I2C_PORT, SCL, 1);  //SCL = 1
 800041a:	2201      	movs	r2, #1
 800041c:	2101      	movs	r1, #1
 800041e:	480a      	ldr	r0, [pc, #40]	; (8000448 <I2C_Start+0x40>)
 8000420:	f000 ff99 	bl	8001356 <HAL_GPIO_WritePin>
  I2C_dly();
 8000424:	f7ff ffe9 	bl	80003fa <I2C_dly>
  HAL_GPIO_WritePin(I2C_PORT, SDA, 0);  // SDA = 0
 8000428:	2200      	movs	r2, #0
 800042a:	2102      	movs	r1, #2
 800042c:	4806      	ldr	r0, [pc, #24]	; (8000448 <I2C_Start+0x40>)
 800042e:	f000 ff92 	bl	8001356 <HAL_GPIO_WritePin>
  I2C_dly();
 8000432:	f7ff ffe2 	bl	80003fa <I2C_dly>
  HAL_GPIO_WritePin(I2C_PORT, SCL, 0);  //  SCL = 0;
 8000436:	2200      	movs	r2, #0
 8000438:	2101      	movs	r1, #1
 800043a:	4803      	ldr	r0, [pc, #12]	; (8000448 <I2C_Start+0x40>)
 800043c:	f000 ff8b 	bl	8001356 <HAL_GPIO_WritePin>
  I2C_dly();
 8000440:	f7ff ffdb 	bl	80003fa <I2C_dly>
}
 8000444:	bf00      	nop
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40010800 	.word	0x40010800

0800044c <I2C_Stop>:

void I2C_Stop(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(I2C_PORT, SDA, 0);  // SDA = 0 i2c stop bit sequence
 8000450:	2200      	movs	r2, #0
 8000452:	2102      	movs	r1, #2
 8000454:	480a      	ldr	r0, [pc, #40]	; (8000480 <I2C_Stop+0x34>)
 8000456:	f000 ff7e 	bl	8001356 <HAL_GPIO_WritePin>
  I2C_dly();
 800045a:	f7ff ffce 	bl	80003fa <I2C_dly>
  HAL_GPIO_WritePin(I2C_PORT, SCL, 1);  //SCL = 1
 800045e:	2201      	movs	r2, #1
 8000460:	2101      	movs	r1, #1
 8000462:	4807      	ldr	r0, [pc, #28]	; (8000480 <I2C_Stop+0x34>)
 8000464:	f000 ff77 	bl	8001356 <HAL_GPIO_WritePin>
  I2C_dly();
 8000468:	f7ff ffc7 	bl	80003fa <I2C_dly>
  HAL_GPIO_WritePin(I2C_PORT, SDA, 1);  // SDA = 1
 800046c:	2201      	movs	r2, #1
 800046e:	2102      	movs	r1, #2
 8000470:	4803      	ldr	r0, [pc, #12]	; (8000480 <I2C_Stop+0x34>)
 8000472:	f000 ff70 	bl	8001356 <HAL_GPIO_WritePin>
  I2C_dly();
 8000476:	f7ff ffc0 	bl	80003fa <I2C_dly>
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40010800 	.word	0x40010800

08000484 <I2C_Read>:

unsigned char I2C_Read(char ack)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]
char x, d=0;
 800048e:	2300      	movs	r3, #0
 8000490:	73bb      	strb	r3, [r7, #14]
HAL_GPIO_WritePin(I2C_PORT, SDA, 1);  // SDA = 1
 8000492:	2201      	movs	r2, #1
 8000494:	2102      	movs	r1, #2
 8000496:	4828      	ldr	r0, [pc, #160]	; (8000538 <I2C_Read+0xb4>)
 8000498:	f000 ff5d 	bl	8001356 <HAL_GPIO_WritePin>
  for(x=0; x<8; x++) {
 800049c:	2300      	movs	r3, #0
 800049e:	73fb      	strb	r3, [r7, #15]
 80004a0:	e023      	b.n	80004ea <I2C_Read+0x66>
    d <<= 1;
 80004a2:	7bbb      	ldrb	r3, [r7, #14]
 80004a4:	005b      	lsls	r3, r3, #1
 80004a6:	73bb      	strb	r3, [r7, #14]
    do {
    	HAL_GPIO_WritePin(I2C_PORT, SCL, 1);  //SCL = 1
 80004a8:	2201      	movs	r2, #1
 80004aa:	2101      	movs	r1, #1
 80004ac:	4822      	ldr	r0, [pc, #136]	; (8000538 <I2C_Read+0xb4>)
 80004ae:	f000 ff52 	bl	8001356 <HAL_GPIO_WritePin>
    }
    while(HAL_GPIO_ReadPin(I2C_PORT, SCL_IN)==0);    // wait for any SCL clock stretching
 80004b2:	2104      	movs	r1, #4
 80004b4:	4820      	ldr	r0, [pc, #128]	; (8000538 <I2C_Read+0xb4>)
 80004b6:	f000 ff37 	bl	8001328 <HAL_GPIO_ReadPin>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d0f3      	beq.n	80004a8 <I2C_Read+0x24>
    I2C_dly();
 80004c0:	f7ff ff9b 	bl	80003fa <I2C_dly>
    if(HAL_GPIO_ReadPin(I2C_PORT, SDA_IN)) d |= 1;
 80004c4:	2108      	movs	r1, #8
 80004c6:	481c      	ldr	r0, [pc, #112]	; (8000538 <I2C_Read+0xb4>)
 80004c8:	f000 ff2e 	bl	8001328 <HAL_GPIO_ReadPin>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d003      	beq.n	80004da <I2C_Read+0x56>
 80004d2:	7bbb      	ldrb	r3, [r7, #14]
 80004d4:	f043 0301 	orr.w	r3, r3, #1
 80004d8:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(I2C_PORT, SCL, 0);  //SCL = 0
 80004da:	2200      	movs	r2, #0
 80004dc:	2101      	movs	r1, #1
 80004de:	4816      	ldr	r0, [pc, #88]	; (8000538 <I2C_Read+0xb4>)
 80004e0:	f000 ff39 	bl	8001356 <HAL_GPIO_WritePin>
  for(x=0; x<8; x++) {
 80004e4:	7bfb      	ldrb	r3, [r7, #15]
 80004e6:	3301      	adds	r3, #1
 80004e8:	73fb      	strb	r3, [r7, #15]
 80004ea:	7bfb      	ldrb	r3, [r7, #15]
 80004ec:	2b07      	cmp	r3, #7
 80004ee:	d9d8      	bls.n	80004a2 <I2C_Read+0x1e>
  }
  if(ack){
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d005      	beq.n	8000502 <I2C_Read+0x7e>
	  HAL_GPIO_WritePin(I2C_PORT, SDA, 0);  //SDA = 0;
 80004f6:	2200      	movs	r2, #0
 80004f8:	2102      	movs	r1, #2
 80004fa:	480f      	ldr	r0, [pc, #60]	; (8000538 <I2C_Read+0xb4>)
 80004fc:	f000 ff2b 	bl	8001356 <HAL_GPIO_WritePin>
 8000500:	e004      	b.n	800050c <I2C_Read+0x88>
  }
  else{
	  HAL_GPIO_WritePin(I2C_PORT, SDA, 1);  //SDA = 1;
 8000502:	2201      	movs	r2, #1
 8000504:	2102      	movs	r1, #2
 8000506:	480c      	ldr	r0, [pc, #48]	; (8000538 <I2C_Read+0xb4>)
 8000508:	f000 ff25 	bl	8001356 <HAL_GPIO_WritePin>
  }

  HAL_GPIO_WritePin(I2C_PORT, SCL, 1);  //SCL = 1;
 800050c:	2201      	movs	r2, #1
 800050e:	2101      	movs	r1, #1
 8000510:	4809      	ldr	r0, [pc, #36]	; (8000538 <I2C_Read+0xb4>)
 8000512:	f000 ff20 	bl	8001356 <HAL_GPIO_WritePin>
  I2C_dly();             // send (N)ACK bit
 8000516:	f7ff ff70 	bl	80003fa <I2C_dly>
  HAL_GPIO_WritePin(I2C_PORT, SCL, 0);  //SCL = 0;
 800051a:	2200      	movs	r2, #0
 800051c:	2101      	movs	r1, #1
 800051e:	4806      	ldr	r0, [pc, #24]	; (8000538 <I2C_Read+0xb4>)
 8000520:	f000 ff19 	bl	8001356 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(I2C_PORT, SDA, 1);  //SDA = 1;
 8000524:	2201      	movs	r2, #1
 8000526:	2102      	movs	r1, #2
 8000528:	4803      	ldr	r0, [pc, #12]	; (8000538 <I2C_Read+0xb4>)
 800052a:	f000 ff14 	bl	8001356 <HAL_GPIO_WritePin>
  return d;
 800052e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000530:	4618      	mov	r0, r3
 8000532:	3710      	adds	r7, #16
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40010800 	.word	0x40010800

0800053c <I2C_Write>:

bool I2C_Write(unsigned char d)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
char x;
static bool b;
  for(x=8; x; x--) {
 8000546:	2308      	movs	r3, #8
 8000548:	73fb      	strb	r3, [r7, #15]
 800054a:	e01e      	b.n	800058a <I2C_Write+0x4e>
    if(d&0x80){
 800054c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000550:	2b00      	cmp	r3, #0
 8000552:	da05      	bge.n	8000560 <I2C_Write+0x24>
    	HAL_GPIO_WritePin(I2C_PORT, SDA, 1);  //SDA = 1;
 8000554:	2201      	movs	r2, #1
 8000556:	2102      	movs	r1, #2
 8000558:	481f      	ldr	r0, [pc, #124]	; (80005d8 <I2C_Write+0x9c>)
 800055a:	f000 fefc 	bl	8001356 <HAL_GPIO_WritePin>
 800055e:	e004      	b.n	800056a <I2C_Write+0x2e>
    }
    else{
    	HAL_GPIO_WritePin(I2C_PORT, SDA, 0);  //SDA = 0;
 8000560:	2200      	movs	r2, #0
 8000562:	2102      	movs	r1, #2
 8000564:	481c      	ldr	r0, [pc, #112]	; (80005d8 <I2C_Write+0x9c>)
 8000566:	f000 fef6 	bl	8001356 <HAL_GPIO_WritePin>
    }
    HAL_GPIO_WritePin(I2C_PORT, SCL, 1);  //SCL = 1;
 800056a:	2201      	movs	r2, #1
 800056c:	2101      	movs	r1, #1
 800056e:	481a      	ldr	r0, [pc, #104]	; (80005d8 <I2C_Write+0x9c>)
 8000570:	f000 fef1 	bl	8001356 <HAL_GPIO_WritePin>
    d <<= 1;
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(I2C_PORT, SCL, 0);  //SCL = 0;
 800057a:	2200      	movs	r2, #0
 800057c:	2101      	movs	r1, #1
 800057e:	4816      	ldr	r0, [pc, #88]	; (80005d8 <I2C_Write+0x9c>)
 8000580:	f000 fee9 	bl	8001356 <HAL_GPIO_WritePin>
  for(x=8; x; x--) {
 8000584:	7bfb      	ldrb	r3, [r7, #15]
 8000586:	3b01      	subs	r3, #1
 8000588:	73fb      	strb	r3, [r7, #15]
 800058a:	7bfb      	ldrb	r3, [r7, #15]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d1dd      	bne.n	800054c <I2C_Write+0x10>
  }
  HAL_GPIO_WritePin(I2C_PORT, SDA, 1);  //SDA = 1;
 8000590:	2201      	movs	r2, #1
 8000592:	2102      	movs	r1, #2
 8000594:	4810      	ldr	r0, [pc, #64]	; (80005d8 <I2C_Write+0x9c>)
 8000596:	f000 fede 	bl	8001356 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(I2C_PORT, SCL, 1);  //SCL = 1;
 800059a:	2201      	movs	r2, #1
 800059c:	2101      	movs	r1, #1
 800059e:	480e      	ldr	r0, [pc, #56]	; (80005d8 <I2C_Write+0x9c>)
 80005a0:	f000 fed9 	bl	8001356 <HAL_GPIO_WritePin>
  I2C_dly();
 80005a4:	f7ff ff29 	bl	80003fa <I2C_dly>
  b = HAL_GPIO_ReadPin(I2C_PORT, SDA_IN);  //READIN SDA_IN;
 80005a8:	2108      	movs	r1, #8
 80005aa:	480b      	ldr	r0, [pc, #44]	; (80005d8 <I2C_Write+0x9c>)
 80005ac:	f000 febc 	bl	8001328 <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	bf14      	ite	ne
 80005b6:	2301      	movne	r3, #1
 80005b8:	2300      	moveq	r3, #0
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <I2C_Write+0xa0>)
 80005be:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(I2C_PORT, SCL, 0);  //SCL = 0;
 80005c0:	2200      	movs	r2, #0
 80005c2:	2101      	movs	r1, #1
 80005c4:	4804      	ldr	r0, [pc, #16]	; (80005d8 <I2C_Write+0x9c>)
 80005c6:	f000 fec6 	bl	8001356 <HAL_GPIO_WritePin>
  return b;
 80005ca:	4b04      	ldr	r3, [pc, #16]	; (80005dc <I2C_Write+0xa0>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40010800 	.word	0x40010800
 80005dc:	200001bc 	.word	0x200001bc

080005e0 <RTC_Init>:

//We can initialize the RTC with the code below
void RTC_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0

    I2C_Start();                            // Start I2C communication
 80005e4:	f7ff ff10 	bl	8000408 <I2C_Start>

    I2C_Write(RTC_WRITE_ADDRESS);        // Connect to DS1307 by sending its ID on I2c Bus
 80005e8:	20d0      	movs	r0, #208	; 0xd0
 80005ea:	f7ff ffa7 	bl	800053c <I2C_Write>
    I2C_Write(RTC_CONTROL_ADDRESS);// Select the Ds1307 ControlRegister to configure Ds1307
 80005ee:	2007      	movs	r0, #7
 80005f0:	f7ff ffa4 	bl	800053c <I2C_Write>

    I2C_Write(0x00);                        // Write 0x00 to Control register to disable SQW-Out
 80005f4:	2000      	movs	r0, #0
 80005f6:	f7ff ffa1 	bl	800053c <I2C_Write>

    I2C_Stop();                             // Stop I2C communication after initializing DS1307
 80005fa:	f7ff ff27 	bl	800044c <I2C_Stop>
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}

08000602 <RTC_SetDateTime>:

// Set Date and Time
void RTC_SetDateTime(rtc_t *rtc)
{
 8000602:	b580      	push	{r7, lr}
 8000604:	b082      	sub	sp, #8
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
    I2C_Start();                          // Start I2C communication
 800060a:	f7ff fefd 	bl	8000408 <I2C_Start>

    I2C_Write(RTC_WRITE_ADDRESS);      // connect to DS1307 by sending its ID on I2c Bus
 800060e:	20d0      	movs	r0, #208	; 0xd0
 8000610:	f7ff ff94 	bl	800053c <I2C_Write>
    I2C_Write(RTC_ADDRESS_FOR_SECOND); // Request sec RAM address at 00H
 8000614:	2000      	movs	r0, #0
 8000616:	f7ff ff91 	bl	800053c <I2C_Write>

    I2C_Write(rtc->sec);                    // Write sec from RAM address 00H
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff ff8c 	bl	800053c <I2C_Write>
    I2C_Write(rtc->min);                    // Write min from RAM address 01H
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	785b      	ldrb	r3, [r3, #1]
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff ff87 	bl	800053c <I2C_Write>
    I2C_Write(rtc->hour);                    // Write hour from RAM address 02H
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	789b      	ldrb	r3, [r3, #2]
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff ff82 	bl	800053c <I2C_Write>
    I2C_Write(rtc->weekDay);                // Write weekDay on RAM address 03H
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	78db      	ldrb	r3, [r3, #3]
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ff7d 	bl	800053c <I2C_Write>
    I2C_Write(rtc->date);                    // Write date on RAM address 04H
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	791b      	ldrb	r3, [r3, #4]
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff ff78 	bl	800053c <I2C_Write>
    I2C_Write(rtc->month);                    // Write month on RAM address 05H
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	795b      	ldrb	r3, [r3, #5]
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff ff73 	bl	800053c <I2C_Write>
    I2C_Write(rtc->year);                    // Write year on RAM address 06h
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	799b      	ldrb	r3, [r3, #6]
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff6e 	bl	800053c <I2C_Write>

    I2C_Stop();                              // Stop I2C communication after Setting the Date
 8000660:	f7ff fef4 	bl	800044c <I2C_Stop>
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <RTC_GetDateTime>:


// Get Date and Time
void RTC_GetDateTime(rtc_t *rtc)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
    I2C_Start();                            // Start I2C communication
 8000674:	f7ff fec8 	bl	8000408 <I2C_Start>

    I2C_Write(RTC_WRITE_ADDRESS);        // connect to DS1307 by sending its ID on I2c Bus
 8000678:	20d0      	movs	r0, #208	; 0xd0
 800067a:	f7ff ff5f 	bl	800053c <I2C_Write>
    I2C_Write(RTC_ADDRESS_FOR_SECOND); // Request Sec RAM address at 00H
 800067e:	2000      	movs	r0, #0
 8000680:	f7ff ff5c 	bl	800053c <I2C_Write>

    I2C_Start();                            // Start I2C communication
 8000684:	f7ff fec0 	bl	8000408 <I2C_Start>
    I2C_Write(RTC_READ_ADDRESS);            // connect to DS1307(Read mode) by sending its ID
 8000688:	20d1      	movs	r0, #209	; 0xd1
 800068a:	f7ff ff57 	bl	800053c <I2C_Write>

    rtc->sec = I2C_Read(1);                // read second and return Positive ACK
 800068e:	2001      	movs	r0, #1
 8000690:	f7ff fef8 	bl	8000484 <I2C_Read>
 8000694:	4603      	mov	r3, r0
 8000696:	461a      	mov	r2, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	701a      	strb	r2, [r3, #0]
    rtc->min = I2C_Read(1);                 // read minute and return Positive ACK
 800069c:	2001      	movs	r0, #1
 800069e:	f7ff fef1 	bl	8000484 <I2C_Read>
 80006a2:	4603      	mov	r3, r0
 80006a4:	461a      	mov	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	705a      	strb	r2, [r3, #1]
    rtc->hour= I2C_Read(1);               // read hour and return Negative/No ACK
 80006aa:	2001      	movs	r0, #1
 80006ac:	f7ff feea 	bl	8000484 <I2C_Read>
 80006b0:	4603      	mov	r3, r0
 80006b2:	461a      	mov	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	709a      	strb	r2, [r3, #2]
    rtc->weekDay = I2C_Read(1);           // read weekDay and return Positive ACK
 80006b8:	2001      	movs	r0, #1
 80006ba:	f7ff fee3 	bl	8000484 <I2C_Read>
 80006be:	4603      	mov	r3, r0
 80006c0:	461a      	mov	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	70da      	strb	r2, [r3, #3]
    rtc->date= I2C_Read(1);              // read Date and return Positive ACK
 80006c6:	2001      	movs	r0, #1
 80006c8:	f7ff fedc 	bl	8000484 <I2C_Read>
 80006cc:	4603      	mov	r3, r0
 80006ce:	461a      	mov	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	711a      	strb	r2, [r3, #4]
    rtc->month=I2C_Read(1);            // read Month and return Positive ACK
 80006d4:	2001      	movs	r0, #1
 80006d6:	f7ff fed5 	bl	8000484 <I2C_Read>
 80006da:	4603      	mov	r3, r0
 80006dc:	461a      	mov	r2, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	715a      	strb	r2, [r3, #5]
    rtc->year =I2C_Read(0);             // read Year and return Negative/No ACK
 80006e2:	2000      	movs	r0, #0
 80006e4:	f7ff fece 	bl	8000484 <I2C_Read>
 80006e8:	4603      	mov	r3, r0
 80006ea:	461a      	mov	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	719a      	strb	r2, [r3, #6]

    I2C_Stop();                              // Stop I2C communication after reading the Date
 80006f0:	f7ff feac 	bl	800044c <I2C_Stop>
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000700:	f000 fb24 	bl	8000d4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000704:	f000 f85e 	bl	80007c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000708:	f000 f99e 	bl	8000a48 <MX_GPIO_Init>
  MX_SPI1_Init();
 800070c:	f000 f8a0 	bl	8000850 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000710:	f000 f970 	bl	80009f4 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000714:	f000 f8d2 	bl	80008bc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000718:	f000 f91e 	bl	8000958 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  RTC_Init();
 800071c:	f7ff ff60 	bl	80005e0 <RTC_Init>
    rtc.hour = 0x17; //
 8000720:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <main+0xb4>)
 8000722:	2217      	movs	r2, #23
 8000724:	709a      	strb	r2, [r3, #2]
    rtc.min =  0x30;
 8000726:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <main+0xb4>)
 8000728:	2230      	movs	r2, #48	; 0x30
 800072a:	705a      	strb	r2, [r3, #1]
    rtc.sec =  0x00;
 800072c:	4b20      	ldr	r3, [pc, #128]	; (80007b0 <main+0xb4>)
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]

    rtc.date = 0x24; //
 8000732:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <main+0xb4>)
 8000734:	2224      	movs	r2, #36	; 0x24
 8000736:	711a      	strb	r2, [r3, #4]
    rtc.month = 0x09;
 8000738:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <main+0xb4>)
 800073a:	2209      	movs	r2, #9
 800073c:	715a      	strb	r2, [r3, #5]
    rtc.year = 0x23;
 800073e:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <main+0xb4>)
 8000740:	2223      	movs	r2, #35	; 0x23
 8000742:	719a      	strb	r2, [r3, #6]
    rtc.weekDay = 6;
 8000744:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <main+0xb4>)
 8000746:	2206      	movs	r2, #6
 8000748:	70da      	strb	r2, [r3, #3]

    RTC_SetDateTime(&rtc);
 800074a:	4819      	ldr	r0, [pc, #100]	; (80007b0 <main+0xb4>)
 800074c:	f7ff ff59 	bl	8000602 <RTC_SetDateTime>


	SPI_7219_INIT(4);
 8000750:	2004      	movs	r0, #4
 8000752:	f7ff fd3f 	bl	80001d4 <SPI_7219_INIT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		RTC_GetDateTime(&rtc);
 8000756:	4816      	ldr	r0, [pc, #88]	; (80007b0 <main+0xb4>)
 8000758:	f7ff ff88 	bl	800066c <RTC_GetDateTime>
		/* Display the Time and Date continuously */
		hr_u=0x0f&rtc.hour;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <main+0xb4>)
 800075e:	789b      	ldrb	r3, [r3, #2]
 8000760:	f003 030f 	and.w	r3, r3, #15
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <main+0xb8>)
 8000768:	701a      	strb	r2, [r3, #0]
		hr_d=0x0f&rtc.hour>>4;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <main+0xb4>)
 800076c:	789b      	ldrb	r3, [r3, #2]
 800076e:	091b      	lsrs	r3, r3, #4
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <main+0xbc>)
 8000774:	701a      	strb	r2, [r3, #0]
		mn_u=0x0f&rtc.min;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <main+0xb4>)
 8000778:	785b      	ldrb	r3, [r3, #1]
 800077a:	f003 030f 	and.w	r3, r3, #15
 800077e:	b2da      	uxtb	r2, r3
 8000780:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <main+0xc0>)
 8000782:	701a      	strb	r2, [r3, #0]
		mn_d=0x0f&rtc.min>>4;
 8000784:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <main+0xb4>)
 8000786:	785b      	ldrb	r3, [r3, #1]
 8000788:	091b      	lsrs	r3, r3, #4
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <main+0xc4>)
 800078e:	701a      	strb	r2, [r3, #0]
		display_rtc(hr_u, hr_d, mn_u, mn_d);
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <main+0xb8>)
 8000792:	7818      	ldrb	r0, [r3, #0]
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <main+0xbc>)
 8000796:	7819      	ldrb	r1, [r3, #0]
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <main+0xc0>)
 800079a:	781a      	ldrb	r2, [r3, #0]
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <main+0xc4>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	f7ff fe04 	bl	80003ac <display_rtc>
		HAL_Delay(1000);
 80007a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a8:	f000 fb32 	bl	8000e10 <HAL_Delay>
		RTC_GetDateTime(&rtc);
 80007ac:	e7d3      	b.n	8000756 <main+0x5a>
 80007ae:	bf00      	nop
 80007b0:	20000084 	.word	0x20000084
 80007b4:	20000080 	.word	0x20000080
 80007b8:	20000081 	.word	0x20000081
 80007bc:	20000083 	.word	0x20000083
 80007c0:	20000082 	.word	0x20000082

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b090      	sub	sp, #64	; 0x40
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0318 	add.w	r3, r7, #24
 80007ce:	2228      	movs	r2, #40	; 0x28
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 ffa0 	bl	8002718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e6:	2301      	movs	r3, #1
 80007e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f4:	2301      	movs	r3, #1
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f8:	2302      	movs	r3, #2
 80007fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000800:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000802:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000806:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000808:	f107 0318 	add.w	r3, r7, #24
 800080c:	4618      	mov	r0, r3
 800080e:	f000 fdbb 	bl	8001388 <HAL_RCC_OscConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000818:	f000 f960 	bl	8000adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081c:	230f      	movs	r3, #15
 800081e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000820:	2302      	movs	r3, #2
 8000822:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800082c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2102      	movs	r1, #2
 8000836:	4618      	mov	r0, r3
 8000838:	f001 f828 	bl	800188c <HAL_RCC_ClockConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000842:	f000 f94b 	bl	8000adc <Error_Handler>
  }
}
 8000846:	bf00      	nop
 8000848:	3740      	adds	r7, #64	; 0x40
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_SPI1_Init+0x64>)
 8000856:	4a18      	ldr	r2, [pc, #96]	; (80008b8 <MX_SPI1_Init+0x68>)
 8000858:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800085a:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MX_SPI1_Init+0x64>)
 800085c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000860:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_SPI1_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_SPI1_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_SPI1_Init+0x64>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_SPI1_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_SPI1_Init+0x64>)
 800087c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000880:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_SPI1_Init+0x64>)
 8000884:	2218      	movs	r2, #24
 8000886:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <MX_SPI1_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_SPI1_Init+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <MX_SPI1_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_SPI1_Init+0x64>)
 800089c:	220a      	movs	r2, #10
 800089e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	; (80008b4 <MX_SPI1_Init+0x64>)
 80008a2:	f001 f981 	bl	8001ba8 <HAL_SPI_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008ac:	f000 f916 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	2000008c 	.word	0x2000008c
 80008b8:	40013000 	.word	0x40013000

080008bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008c2:	f107 0308 	add.w	r3, r7, #8
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d0:	463b      	mov	r3, r7
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008d8:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <MX_TIM3_Init+0x94>)
 80008da:	4a1e      	ldr	r2, [pc, #120]	; (8000954 <MX_TIM3_Init+0x98>)
 80008dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008de:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <MX_TIM3_Init+0x94>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e4:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_TIM3_Init+0x94>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008ea:	4b19      	ldr	r3, [pc, #100]	; (8000950 <MX_TIM3_Init+0x94>)
 80008ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f2:	4b17      	ldr	r3, [pc, #92]	; (8000950 <MX_TIM3_Init+0x94>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f8:	4b15      	ldr	r3, [pc, #84]	; (8000950 <MX_TIM3_Init+0x94>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008fe:	4814      	ldr	r0, [pc, #80]	; (8000950 <MX_TIM3_Init+0x94>)
 8000900:	f001 fbc0 	bl	8002084 <HAL_TIM_Base_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800090a:	f000 f8e7 	bl	8000adc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800090e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000912:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	4619      	mov	r1, r3
 800091a:	480d      	ldr	r0, [pc, #52]	; (8000950 <MX_TIM3_Init+0x94>)
 800091c:	f001 fc01 	bl	8002122 <HAL_TIM_ConfigClockSource>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000926:	f000 f8d9 	bl	8000adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800092a:	2300      	movs	r3, #0
 800092c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000932:	463b      	mov	r3, r7
 8000934:	4619      	mov	r1, r3
 8000936:	4806      	ldr	r0, [pc, #24]	; (8000950 <MX_TIM3_Init+0x94>)
 8000938:	f001 fdb2 	bl	80024a0 <HAL_TIMEx_MasterConfigSynchronization>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000942:	f000 f8cb 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	3718      	adds	r7, #24
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200000e4 	.word	0x200000e4
 8000954:	40000400 	.word	0x40000400

08000958 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800095e:	f107 0308 	add.w	r3, r7, #8
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800096c:	463b      	mov	r3, r7
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000974:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <MX_TIM4_Init+0x94>)
 8000976:	4a1e      	ldr	r2, [pc, #120]	; (80009f0 <MX_TIM4_Init+0x98>)
 8000978:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2048;
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <MX_TIM4_Init+0x94>)
 800097c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000980:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <MX_TIM4_Init+0x94>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 35156;
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <MX_TIM4_Init+0x94>)
 800098a:	f648 1254 	movw	r2, #35156	; 0x8954
 800098e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <MX_TIM4_Init+0x94>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <MX_TIM4_Init+0x94>)
 8000998:	2280      	movs	r2, #128	; 0x80
 800099a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800099c:	4813      	ldr	r0, [pc, #76]	; (80009ec <MX_TIM4_Init+0x94>)
 800099e:	f001 fb71 	bl	8002084 <HAL_TIM_Base_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80009a8:	f000 f898 	bl	8000adc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80009b2:	f107 0308 	add.w	r3, r7, #8
 80009b6:	4619      	mov	r1, r3
 80009b8:	480c      	ldr	r0, [pc, #48]	; (80009ec <MX_TIM4_Init+0x94>)
 80009ba:	f001 fbb2 	bl	8002122 <HAL_TIM_ConfigClockSource>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80009c4:	f000 f88a 	bl	8000adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c8:	2300      	movs	r3, #0
 80009ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009d0:	463b      	mov	r3, r7
 80009d2:	4619      	mov	r1, r3
 80009d4:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_TIM4_Init+0x94>)
 80009d6:	f001 fd63 	bl	80024a0 <HAL_TIMEx_MasterConfigSynchronization>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80009e0:	f000 f87c 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	3718      	adds	r7, #24
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	2000012c 	.word	0x2000012c
 80009f0:	40000800 	.word	0x40000800

080009f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_USART3_UART_Init+0x4c>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <MX_USART3_UART_Init+0x50>)
 80009fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <MX_USART3_UART_Init+0x4c>)
 8000a00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_USART3_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_USART3_UART_Init+0x4c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_USART3_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_USART3_UART_Init+0x4c>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <MX_USART3_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_USART3_UART_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_USART3_UART_Init+0x4c>)
 8000a2c:	f001 fd96 	bl	800255c <HAL_UART_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a36:	f000 f851 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000174 	.word	0x20000174
 8000a44:	40004800 	.word	0x40004800

08000a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4e:	f107 0310 	add.w	r3, r7, #16
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ad4 <MX_GPIO_Init+0x8c>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a1c      	ldr	r2, [pc, #112]	; (8000ad4 <MX_GPIO_Init+0x8c>)
 8000a62:	f043 0320 	orr.w	r3, r3, #32
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <MX_GPIO_Init+0x8c>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f003 0320 	and.w	r3, r3, #32
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a74:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <MX_GPIO_Init+0x8c>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	4a16      	ldr	r2, [pc, #88]	; (8000ad4 <MX_GPIO_Init+0x8c>)
 8000a7a:	f043 0304 	orr.w	r3, r3, #4
 8000a7e:	6193      	str	r3, [r2, #24]
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_GPIO_Init+0x8c>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f003 0304 	and.w	r3, r3, #4
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_GPIO_Init+0x8c>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	4a10      	ldr	r2, [pc, #64]	; (8000ad4 <MX_GPIO_Init+0x8c>)
 8000a92:	f043 0308 	orr.w	r3, r3, #8
 8000a96:	6193      	str	r3, [r2, #24]
 8000a98:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_GPIO_Init+0x8c>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	f003 0308 	and.w	r3, r3, #8
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2113      	movs	r1, #19
 8000aa8:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <MX_GPIO_Init+0x90>)
 8000aaa:	f000 fc54 	bl	8001356 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8000aae:	2313      	movs	r3, #19
 8000ab0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2302      	movs	r3, #2
 8000abc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abe:	f107 0310 	add.w	r3, r7, #16
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <MX_GPIO_Init+0x90>)
 8000ac6:	f000 faab 	bl	8001020 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aca:	bf00      	nop
 8000acc:	3720      	adds	r7, #32
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	40010800 	.word	0x40010800

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
}
 8000ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ae4:	e7fe      	b.n	8000ae4 <Error_Handler+0x8>
	...

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <HAL_MspInit+0x40>)
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <HAL_MspInit+0x40>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6193      	str	r3, [r2, #24]
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <HAL_MspInit+0x40>)
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <HAL_MspInit+0x40>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <HAL_MspInit+0x40>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b10:	61d3      	str	r3, [r2, #28]
 8000b12:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <HAL_MspInit+0x40>)
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	40021000 	.word	0x40021000

08000b2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b088      	sub	sp, #32
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0310 	add.w	r3, r7, #16
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a15      	ldr	r2, [pc, #84]	; (8000b9c <HAL_SPI_MspInit+0x70>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d123      	bne.n	8000b94 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <HAL_SPI_MspInit+0x74>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	4a13      	ldr	r2, [pc, #76]	; (8000ba0 <HAL_SPI_MspInit+0x74>)
 8000b52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b56:	6193      	str	r3, [r2, #24]
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <HAL_SPI_MspInit+0x74>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b64:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <HAL_SPI_MspInit+0x74>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	4a0d      	ldr	r2, [pc, #52]	; (8000ba0 <HAL_SPI_MspInit+0x74>)
 8000b6a:	f043 0304 	orr.w	r3, r3, #4
 8000b6e:	6193      	str	r3, [r2, #24]
 8000b70:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <HAL_SPI_MspInit+0x74>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	f003 0304 	and.w	r3, r3, #4
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000b7c:	23a0      	movs	r3, #160	; 0xa0
 8000b7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b84:	2303      	movs	r3, #3
 8000b86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	f107 0310 	add.w	r3, r7, #16
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <HAL_SPI_MspInit+0x78>)
 8000b90:	f000 fa46 	bl	8001020 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b94:	bf00      	nop
 8000b96:	3720      	adds	r7, #32
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40013000 	.word	0x40013000
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	40010800 	.word	0x40010800

08000ba8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <HAL_TIM_Base_MspInit+0x58>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d10c      	bne.n	8000bd4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bba:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <HAL_TIM_Base_MspInit+0x5c>)
 8000bbc:	69db      	ldr	r3, [r3, #28]
 8000bbe:	4a11      	ldr	r2, [pc, #68]	; (8000c04 <HAL_TIM_Base_MspInit+0x5c>)
 8000bc0:	f043 0302 	orr.w	r3, r3, #2
 8000bc4:	61d3      	str	r3, [r2, #28]
 8000bc6:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <HAL_TIM_Base_MspInit+0x5c>)
 8000bc8:	69db      	ldr	r3, [r3, #28]
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000bd2:	e010      	b.n	8000bf6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <HAL_TIM_Base_MspInit+0x60>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d10b      	bne.n	8000bf6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <HAL_TIM_Base_MspInit+0x5c>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <HAL_TIM_Base_MspInit+0x5c>)
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	61d3      	str	r3, [r2, #28]
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_TIM_Base_MspInit+0x5c>)
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
}
 8000bf6:	bf00      	nop
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	40000400 	.word	0x40000400
 8000c04:	40021000 	.word	0x40021000
 8000c08:	40000800 	.word	0x40000800

08000c0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b088      	sub	sp, #32
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 0310 	add.w	r3, r7, #16
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a1c      	ldr	r2, [pc, #112]	; (8000c98 <HAL_UART_MspInit+0x8c>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d131      	bne.n	8000c90 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <HAL_UART_MspInit+0x90>)
 8000c2e:	69db      	ldr	r3, [r3, #28]
 8000c30:	4a1a      	ldr	r2, [pc, #104]	; (8000c9c <HAL_UART_MspInit+0x90>)
 8000c32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c36:	61d3      	str	r3, [r2, #28]
 8000c38:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <HAL_UART_MspInit+0x90>)
 8000c3a:	69db      	ldr	r3, [r3, #28]
 8000c3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c44:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <HAL_UART_MspInit+0x90>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a14      	ldr	r2, [pc, #80]	; (8000c9c <HAL_UART_MspInit+0x90>)
 8000c4a:	f043 0308 	orr.w	r3, r3, #8
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_UART_MspInit+0x90>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f003 0308 	and.w	r3, r3, #8
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c66:	2303      	movs	r3, #3
 8000c68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6a:	f107 0310 	add.w	r3, r7, #16
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480b      	ldr	r0, [pc, #44]	; (8000ca0 <HAL_UART_MspInit+0x94>)
 8000c72:	f000 f9d5 	bl	8001020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c84:	f107 0310 	add.w	r3, r7, #16
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <HAL_UART_MspInit+0x94>)
 8000c8c:	f000 f9c8 	bl	8001020 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c90:	bf00      	nop
 8000c92:	3720      	adds	r7, #32
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40004800 	.word	0x40004800
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40010c00 	.word	0x40010c00

08000ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <NMI_Handler+0x4>

08000caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cae:	e7fe      	b.n	8000cae <HardFault_Handler+0x4>

08000cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <MemManage_Handler+0x4>

08000cb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <BusFault_Handler+0x4>

08000cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <UsageFault_Handler+0x4>

08000cc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr

08000cce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr

08000cda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr

08000ce6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cea:	f000 f875 	bl	8000dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr
	...

08000d00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d00:	f7ff fff7 	bl	8000cf2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d04:	480b      	ldr	r0, [pc, #44]	; (8000d34 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d06:	490c      	ldr	r1, [pc, #48]	; (8000d38 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d08:	4a0c      	ldr	r2, [pc, #48]	; (8000d3c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d0c:	e002      	b.n	8000d14 <LoopCopyDataInit>

08000d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d12:	3304      	adds	r3, #4

08000d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d18:	d3f9      	bcc.n	8000d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1a:	4a09      	ldr	r2, [pc, #36]	; (8000d40 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d1c:	4c09      	ldr	r4, [pc, #36]	; (8000d44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d20:	e001      	b.n	8000d26 <LoopFillZerobss>

08000d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d24:	3204      	adds	r2, #4

08000d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d28:	d3fb      	bcc.n	8000d22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d2a:	f001 fcfd 	bl	8002728 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d2e:	f7ff fce5 	bl	80006fc <main>
  bx lr
 8000d32:	4770      	bx	lr
  ldr r0, =_sdata
 8000d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d38:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000d3c:	080027e4 	.word	0x080027e4
  ldr r2, =_sbss
 8000d40:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000d44:	200001c4 	.word	0x200001c4

08000d48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d48:	e7fe      	b.n	8000d48 <ADC1_2_IRQHandler>
	...

08000d4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <HAL_Init+0x28>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a07      	ldr	r2, [pc, #28]	; (8000d74 <HAL_Init+0x28>)
 8000d56:	f043 0310 	orr.w	r3, r3, #16
 8000d5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d5c:	2003      	movs	r0, #3
 8000d5e:	f000 f92b 	bl	8000fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d62:	200f      	movs	r0, #15
 8000d64:	f000 f808 	bl	8000d78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d68:	f7ff febe 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40022000 	.word	0x40022000

08000d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_InitTick+0x54>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_InitTick+0x58>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 f935 	bl	8001006 <HAL_SYSTICK_Config>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e00e      	b.n	8000dc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b0f      	cmp	r3, #15
 8000daa:	d80a      	bhi.n	8000dc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dac:	2200      	movs	r2, #0
 8000dae:	6879      	ldr	r1, [r7, #4]
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295
 8000db4:	f000 f90b 	bl	8000fce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db8:	4a06      	ldr	r2, [pc, #24]	; (8000dd4 <HAL_InitTick+0x5c>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e000      	b.n	8000dc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000058 	.word	0x20000058
 8000dd0:	20000060 	.word	0x20000060
 8000dd4:	2000005c 	.word	0x2000005c

08000dd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_IncTick+0x1c>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <HAL_IncTick+0x20>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4413      	add	r3, r2
 8000de8:	4a03      	ldr	r2, [pc, #12]	; (8000df8 <HAL_IncTick+0x20>)
 8000dea:	6013      	str	r3, [r2, #0]
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	20000060 	.word	0x20000060
 8000df8:	200001c0 	.word	0x200001c0

08000dfc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000e00:	4b02      	ldr	r3, [pc, #8]	; (8000e0c <HAL_GetTick+0x10>)
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	200001c0 	.word	0x200001c0

08000e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e18:	f7ff fff0 	bl	8000dfc <HAL_GetTick>
 8000e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e28:	d005      	beq.n	8000e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <HAL_Delay+0x44>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4413      	add	r3, r2
 8000e34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e36:	bf00      	nop
 8000e38:	f7ff ffe0 	bl	8000dfc <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d8f7      	bhi.n	8000e38 <HAL_Delay+0x28>
  {
  }
}
 8000e48:	bf00      	nop
 8000e4a:	bf00      	nop
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000060 	.word	0x20000060

08000e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e74:	4013      	ands	r3, r2
 8000e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8a:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	60d3      	str	r3, [r2, #12]
}
 8000e90:	bf00      	nop
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	f003 0307 	and.w	r3, r3, #7
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	db0a      	blt.n	8000ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	490c      	ldr	r1, [pc, #48]	; (8000f08 <__NVIC_SetPriority+0x4c>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	0112      	lsls	r2, r2, #4
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	440b      	add	r3, r1
 8000ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee4:	e00a      	b.n	8000efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4908      	ldr	r1, [pc, #32]	; (8000f0c <__NVIC_SetPriority+0x50>)
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	f003 030f 	and.w	r3, r3, #15
 8000ef2:	3b04      	subs	r3, #4
 8000ef4:	0112      	lsls	r2, r2, #4
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	440b      	add	r3, r1
 8000efa:	761a      	strb	r2, [r3, #24]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000e100 	.word	0xe000e100
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f1c3 0307 	rsb	r3, r3, #7
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	bf28      	it	cs
 8000f2e:	2304      	movcs	r3, #4
 8000f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3304      	adds	r3, #4
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d902      	bls.n	8000f40 <NVIC_EncodePriority+0x30>
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3b03      	subs	r3, #3
 8000f3e:	e000      	b.n	8000f42 <NVIC_EncodePriority+0x32>
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	f04f 32ff 	mov.w	r2, #4294967295
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	401a      	ands	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f58:	f04f 31ff 	mov.w	r1, #4294967295
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	43d9      	mvns	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	4313      	orrs	r3, r2
         );
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3724      	adds	r7, #36	; 0x24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr

08000f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f84:	d301      	bcc.n	8000f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f86:	2301      	movs	r3, #1
 8000f88:	e00f      	b.n	8000faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8a:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <SysTick_Config+0x40>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f92:	210f      	movs	r1, #15
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295
 8000f98:	f7ff ff90 	bl	8000ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <SysTick_Config+0x40>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa2:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <SysTick_Config+0x40>)
 8000fa4:	2207      	movs	r2, #7
 8000fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	e000e010 	.word	0xe000e010

08000fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ff49 	bl	8000e58 <__NVIC_SetPriorityGrouping>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b086      	sub	sp, #24
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
 8000fda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe0:	f7ff ff5e 	bl	8000ea0 <__NVIC_GetPriorityGrouping>
 8000fe4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	68b9      	ldr	r1, [r7, #8]
 8000fea:	6978      	ldr	r0, [r7, #20]
 8000fec:	f7ff ff90 	bl	8000f10 <NVIC_EncodePriority>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff5f 	bl	8000ebc <__NVIC_SetPriority>
}
 8000ffe:	bf00      	nop
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ffb0 	bl	8000f74 <SysTick_Config>
 8001014:	4603      	mov	r3, r0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001020:	b480      	push	{r7}
 8001022:	b08b      	sub	sp, #44	; 0x2c
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800102a:	2300      	movs	r3, #0
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001032:	e169      	b.n	8001308 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001034:	2201      	movs	r2, #1
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	69fa      	ldr	r2, [r7, #28]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	429a      	cmp	r2, r3
 800104e:	f040 8158 	bne.w	8001302 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	4a9a      	ldr	r2, [pc, #616]	; (80012c0 <HAL_GPIO_Init+0x2a0>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d05e      	beq.n	800111a <HAL_GPIO_Init+0xfa>
 800105c:	4a98      	ldr	r2, [pc, #608]	; (80012c0 <HAL_GPIO_Init+0x2a0>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d875      	bhi.n	800114e <HAL_GPIO_Init+0x12e>
 8001062:	4a98      	ldr	r2, [pc, #608]	; (80012c4 <HAL_GPIO_Init+0x2a4>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d058      	beq.n	800111a <HAL_GPIO_Init+0xfa>
 8001068:	4a96      	ldr	r2, [pc, #600]	; (80012c4 <HAL_GPIO_Init+0x2a4>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d86f      	bhi.n	800114e <HAL_GPIO_Init+0x12e>
 800106e:	4a96      	ldr	r2, [pc, #600]	; (80012c8 <HAL_GPIO_Init+0x2a8>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d052      	beq.n	800111a <HAL_GPIO_Init+0xfa>
 8001074:	4a94      	ldr	r2, [pc, #592]	; (80012c8 <HAL_GPIO_Init+0x2a8>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d869      	bhi.n	800114e <HAL_GPIO_Init+0x12e>
 800107a:	4a94      	ldr	r2, [pc, #592]	; (80012cc <HAL_GPIO_Init+0x2ac>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d04c      	beq.n	800111a <HAL_GPIO_Init+0xfa>
 8001080:	4a92      	ldr	r2, [pc, #584]	; (80012cc <HAL_GPIO_Init+0x2ac>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d863      	bhi.n	800114e <HAL_GPIO_Init+0x12e>
 8001086:	4a92      	ldr	r2, [pc, #584]	; (80012d0 <HAL_GPIO_Init+0x2b0>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d046      	beq.n	800111a <HAL_GPIO_Init+0xfa>
 800108c:	4a90      	ldr	r2, [pc, #576]	; (80012d0 <HAL_GPIO_Init+0x2b0>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d85d      	bhi.n	800114e <HAL_GPIO_Init+0x12e>
 8001092:	2b12      	cmp	r3, #18
 8001094:	d82a      	bhi.n	80010ec <HAL_GPIO_Init+0xcc>
 8001096:	2b12      	cmp	r3, #18
 8001098:	d859      	bhi.n	800114e <HAL_GPIO_Init+0x12e>
 800109a:	a201      	add	r2, pc, #4	; (adr r2, 80010a0 <HAL_GPIO_Init+0x80>)
 800109c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a0:	0800111b 	.word	0x0800111b
 80010a4:	080010f5 	.word	0x080010f5
 80010a8:	08001107 	.word	0x08001107
 80010ac:	08001149 	.word	0x08001149
 80010b0:	0800114f 	.word	0x0800114f
 80010b4:	0800114f 	.word	0x0800114f
 80010b8:	0800114f 	.word	0x0800114f
 80010bc:	0800114f 	.word	0x0800114f
 80010c0:	0800114f 	.word	0x0800114f
 80010c4:	0800114f 	.word	0x0800114f
 80010c8:	0800114f 	.word	0x0800114f
 80010cc:	0800114f 	.word	0x0800114f
 80010d0:	0800114f 	.word	0x0800114f
 80010d4:	0800114f 	.word	0x0800114f
 80010d8:	0800114f 	.word	0x0800114f
 80010dc:	0800114f 	.word	0x0800114f
 80010e0:	0800114f 	.word	0x0800114f
 80010e4:	080010fd 	.word	0x080010fd
 80010e8:	08001111 	.word	0x08001111
 80010ec:	4a79      	ldr	r2, [pc, #484]	; (80012d4 <HAL_GPIO_Init+0x2b4>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d013      	beq.n	800111a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010f2:	e02c      	b.n	800114e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	623b      	str	r3, [r7, #32]
          break;
 80010fa:	e029      	b.n	8001150 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	3304      	adds	r3, #4
 8001102:	623b      	str	r3, [r7, #32]
          break;
 8001104:	e024      	b.n	8001150 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	3308      	adds	r3, #8
 800110c:	623b      	str	r3, [r7, #32]
          break;
 800110e:	e01f      	b.n	8001150 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	330c      	adds	r3, #12
 8001116:	623b      	str	r3, [r7, #32]
          break;
 8001118:	e01a      	b.n	8001150 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d102      	bne.n	8001128 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001122:	2304      	movs	r3, #4
 8001124:	623b      	str	r3, [r7, #32]
          break;
 8001126:	e013      	b.n	8001150 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d105      	bne.n	800113c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001130:	2308      	movs	r3, #8
 8001132:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	69fa      	ldr	r2, [r7, #28]
 8001138:	611a      	str	r2, [r3, #16]
          break;
 800113a:	e009      	b.n	8001150 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800113c:	2308      	movs	r3, #8
 800113e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	69fa      	ldr	r2, [r7, #28]
 8001144:	615a      	str	r2, [r3, #20]
          break;
 8001146:	e003      	b.n	8001150 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001148:	2300      	movs	r3, #0
 800114a:	623b      	str	r3, [r7, #32]
          break;
 800114c:	e000      	b.n	8001150 <HAL_GPIO_Init+0x130>
          break;
 800114e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	2bff      	cmp	r3, #255	; 0xff
 8001154:	d801      	bhi.n	800115a <HAL_GPIO_Init+0x13a>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	e001      	b.n	800115e <HAL_GPIO_Init+0x13e>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3304      	adds	r3, #4
 800115e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	2bff      	cmp	r3, #255	; 0xff
 8001164:	d802      	bhi.n	800116c <HAL_GPIO_Init+0x14c>
 8001166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	e002      	b.n	8001172 <HAL_GPIO_Init+0x152>
 800116c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116e:	3b08      	subs	r3, #8
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	210f      	movs	r1, #15
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	fa01 f303 	lsl.w	r3, r1, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	401a      	ands	r2, r3
 8001184:	6a39      	ldr	r1, [r7, #32]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	fa01 f303 	lsl.w	r3, r1, r3
 800118c:	431a      	orrs	r2, r3
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119a:	2b00      	cmp	r3, #0
 800119c:	f000 80b1 	beq.w	8001302 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011a0:	4b4d      	ldr	r3, [pc, #308]	; (80012d8 <HAL_GPIO_Init+0x2b8>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	4a4c      	ldr	r2, [pc, #304]	; (80012d8 <HAL_GPIO_Init+0x2b8>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	6193      	str	r3, [r2, #24]
 80011ac:	4b4a      	ldr	r3, [pc, #296]	; (80012d8 <HAL_GPIO_Init+0x2b8>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011b8:	4a48      	ldr	r2, [pc, #288]	; (80012dc <HAL_GPIO_Init+0x2bc>)
 80011ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011bc:	089b      	lsrs	r3, r3, #2
 80011be:	3302      	adds	r3, #2
 80011c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	220f      	movs	r2, #15
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	4013      	ands	r3, r2
 80011da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a40      	ldr	r2, [pc, #256]	; (80012e0 <HAL_GPIO_Init+0x2c0>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d013      	beq.n	800120c <HAL_GPIO_Init+0x1ec>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a3f      	ldr	r2, [pc, #252]	; (80012e4 <HAL_GPIO_Init+0x2c4>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d00d      	beq.n	8001208 <HAL_GPIO_Init+0x1e8>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a3e      	ldr	r2, [pc, #248]	; (80012e8 <HAL_GPIO_Init+0x2c8>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d007      	beq.n	8001204 <HAL_GPIO_Init+0x1e4>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a3d      	ldr	r2, [pc, #244]	; (80012ec <HAL_GPIO_Init+0x2cc>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d101      	bne.n	8001200 <HAL_GPIO_Init+0x1e0>
 80011fc:	2303      	movs	r3, #3
 80011fe:	e006      	b.n	800120e <HAL_GPIO_Init+0x1ee>
 8001200:	2304      	movs	r3, #4
 8001202:	e004      	b.n	800120e <HAL_GPIO_Init+0x1ee>
 8001204:	2302      	movs	r3, #2
 8001206:	e002      	b.n	800120e <HAL_GPIO_Init+0x1ee>
 8001208:	2301      	movs	r3, #1
 800120a:	e000      	b.n	800120e <HAL_GPIO_Init+0x1ee>
 800120c:	2300      	movs	r3, #0
 800120e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001210:	f002 0203 	and.w	r2, r2, #3
 8001214:	0092      	lsls	r2, r2, #2
 8001216:	4093      	lsls	r3, r2
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	4313      	orrs	r3, r2
 800121c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800121e:	492f      	ldr	r1, [pc, #188]	; (80012dc <HAL_GPIO_Init+0x2bc>)
 8001220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001222:	089b      	lsrs	r3, r3, #2
 8001224:	3302      	adds	r3, #2
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d006      	beq.n	8001246 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001238:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <HAL_GPIO_Init+0x2d0>)
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	492c      	ldr	r1, [pc, #176]	; (80012f0 <HAL_GPIO_Init+0x2d0>)
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	608b      	str	r3, [r1, #8]
 8001244:	e006      	b.n	8001254 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001246:	4b2a      	ldr	r3, [pc, #168]	; (80012f0 <HAL_GPIO_Init+0x2d0>)
 8001248:	689a      	ldr	r2, [r3, #8]
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	43db      	mvns	r3, r3
 800124e:	4928      	ldr	r1, [pc, #160]	; (80012f0 <HAL_GPIO_Init+0x2d0>)
 8001250:	4013      	ands	r3, r2
 8001252:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d006      	beq.n	800126e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001260:	4b23      	ldr	r3, [pc, #140]	; (80012f0 <HAL_GPIO_Init+0x2d0>)
 8001262:	68da      	ldr	r2, [r3, #12]
 8001264:	4922      	ldr	r1, [pc, #136]	; (80012f0 <HAL_GPIO_Init+0x2d0>)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	4313      	orrs	r3, r2
 800126a:	60cb      	str	r3, [r1, #12]
 800126c:	e006      	b.n	800127c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800126e:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <HAL_GPIO_Init+0x2d0>)
 8001270:	68da      	ldr	r2, [r3, #12]
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	43db      	mvns	r3, r3
 8001276:	491e      	ldr	r1, [pc, #120]	; (80012f0 <HAL_GPIO_Init+0x2d0>)
 8001278:	4013      	ands	r3, r2
 800127a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d006      	beq.n	8001296 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001288:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <HAL_GPIO_Init+0x2d0>)
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	4918      	ldr	r1, [pc, #96]	; (80012f0 <HAL_GPIO_Init+0x2d0>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	604b      	str	r3, [r1, #4]
 8001294:	e006      	b.n	80012a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001296:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <HAL_GPIO_Init+0x2d0>)
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	43db      	mvns	r3, r3
 800129e:	4914      	ldr	r1, [pc, #80]	; (80012f0 <HAL_GPIO_Init+0x2d0>)
 80012a0:	4013      	ands	r3, r2
 80012a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d021      	beq.n	80012f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <HAL_GPIO_Init+0x2d0>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	490e      	ldr	r1, [pc, #56]	; (80012f0 <HAL_GPIO_Init+0x2d0>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	600b      	str	r3, [r1, #0]
 80012bc:	e021      	b.n	8001302 <HAL_GPIO_Init+0x2e2>
 80012be:	bf00      	nop
 80012c0:	10320000 	.word	0x10320000
 80012c4:	10310000 	.word	0x10310000
 80012c8:	10220000 	.word	0x10220000
 80012cc:	10210000 	.word	0x10210000
 80012d0:	10120000 	.word	0x10120000
 80012d4:	10110000 	.word	0x10110000
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40010000 	.word	0x40010000
 80012e0:	40010800 	.word	0x40010800
 80012e4:	40010c00 	.word	0x40010c00
 80012e8:	40011000 	.word	0x40011000
 80012ec:	40011400 	.word	0x40011400
 80012f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <HAL_GPIO_Init+0x304>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	4909      	ldr	r1, [pc, #36]	; (8001324 <HAL_GPIO_Init+0x304>)
 80012fe:	4013      	ands	r3, r2
 8001300:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	3301      	adds	r3, #1
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130e:	fa22 f303 	lsr.w	r3, r2, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	f47f ae8e 	bne.w	8001034 <HAL_GPIO_Init+0x14>
  }
}
 8001318:	bf00      	nop
 800131a:	bf00      	nop
 800131c:	372c      	adds	r7, #44	; 0x2c
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	40010400 	.word	0x40010400

08001328 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	887b      	ldrh	r3, [r7, #2]
 800133a:	4013      	ands	r3, r2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d002      	beq.n	8001346 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001340:	2301      	movs	r3, #1
 8001342:	73fb      	strb	r3, [r7, #15]
 8001344:	e001      	b.n	800134a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001346:	2300      	movs	r3, #0
 8001348:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800134a:	7bfb      	ldrb	r3, [r7, #15]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr

08001356 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	460b      	mov	r3, r1
 8001360:	807b      	strh	r3, [r7, #2]
 8001362:	4613      	mov	r3, r2
 8001364:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001366:	787b      	ldrb	r3, [r7, #1]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800136c:	887a      	ldrh	r2, [r7, #2]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001372:	e003      	b.n	800137c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001374:	887b      	ldrh	r3, [r7, #2]
 8001376:	041a      	lsls	r2, r3, #16
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	611a      	str	r2, [r3, #16]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
	...

08001388 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e272      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 8087 	beq.w	80014b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013a8:	4b92      	ldr	r3, [pc, #584]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 030c 	and.w	r3, r3, #12
 80013b0:	2b04      	cmp	r3, #4
 80013b2:	d00c      	beq.n	80013ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013b4:	4b8f      	ldr	r3, [pc, #572]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 030c 	and.w	r3, r3, #12
 80013bc:	2b08      	cmp	r3, #8
 80013be:	d112      	bne.n	80013e6 <HAL_RCC_OscConfig+0x5e>
 80013c0:	4b8c      	ldr	r3, [pc, #560]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013cc:	d10b      	bne.n	80013e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ce:	4b89      	ldr	r3, [pc, #548]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d06c      	beq.n	80014b4 <HAL_RCC_OscConfig+0x12c>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d168      	bne.n	80014b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e24c      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ee:	d106      	bne.n	80013fe <HAL_RCC_OscConfig+0x76>
 80013f0:	4b80      	ldr	r3, [pc, #512]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a7f      	ldr	r2, [pc, #508]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80013f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	e02e      	b.n	800145c <HAL_RCC_OscConfig+0xd4>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10c      	bne.n	8001420 <HAL_RCC_OscConfig+0x98>
 8001406:	4b7b      	ldr	r3, [pc, #492]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a7a      	ldr	r2, [pc, #488]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 800140c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	4b78      	ldr	r3, [pc, #480]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a77      	ldr	r2, [pc, #476]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001418:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	e01d      	b.n	800145c <HAL_RCC_OscConfig+0xd4>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001428:	d10c      	bne.n	8001444 <HAL_RCC_OscConfig+0xbc>
 800142a:	4b72      	ldr	r3, [pc, #456]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a71      	ldr	r2, [pc, #452]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	4b6f      	ldr	r3, [pc, #444]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a6e      	ldr	r2, [pc, #440]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 800143c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	e00b      	b.n	800145c <HAL_RCC_OscConfig+0xd4>
 8001444:	4b6b      	ldr	r3, [pc, #428]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a6a      	ldr	r2, [pc, #424]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 800144a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	4b68      	ldr	r3, [pc, #416]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a67      	ldr	r2, [pc, #412]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800145a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d013      	beq.n	800148c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001464:	f7ff fcca 	bl	8000dfc <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800146c:	f7ff fcc6 	bl	8000dfc <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b64      	cmp	r3, #100	; 0x64
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e200      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147e:	4b5d      	ldr	r3, [pc, #372]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0xe4>
 800148a:	e014      	b.n	80014b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148c:	f7ff fcb6 	bl	8000dfc <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001494:	f7ff fcb2 	bl	8000dfc <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b64      	cmp	r3, #100	; 0x64
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e1ec      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a6:	4b53      	ldr	r3, [pc, #332]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f0      	bne.n	8001494 <HAL_RCC_OscConfig+0x10c>
 80014b2:	e000      	b.n	80014b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d063      	beq.n	800158a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014c2:	4b4c      	ldr	r3, [pc, #304]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 030c 	and.w	r3, r3, #12
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00b      	beq.n	80014e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014ce:	4b49      	ldr	r3, [pc, #292]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 030c 	and.w	r3, r3, #12
 80014d6:	2b08      	cmp	r3, #8
 80014d8:	d11c      	bne.n	8001514 <HAL_RCC_OscConfig+0x18c>
 80014da:	4b46      	ldr	r3, [pc, #280]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d116      	bne.n	8001514 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e6:	4b43      	ldr	r3, [pc, #268]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d005      	beq.n	80014fe <HAL_RCC_OscConfig+0x176>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d001      	beq.n	80014fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e1c0      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fe:	4b3d      	ldr	r3, [pc, #244]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4939      	ldr	r1, [pc, #228]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 800150e:	4313      	orrs	r3, r2
 8001510:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001512:	e03a      	b.n	800158a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d020      	beq.n	800155e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800151c:	4b36      	ldr	r3, [pc, #216]	; (80015f8 <HAL_RCC_OscConfig+0x270>)
 800151e:	2201      	movs	r2, #1
 8001520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001522:	f7ff fc6b 	bl	8000dfc <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800152a:	f7ff fc67 	bl	8000dfc <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e1a1      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153c:	4b2d      	ldr	r3, [pc, #180]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001548:	4b2a      	ldr	r3, [pc, #168]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	4927      	ldr	r1, [pc, #156]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001558:	4313      	orrs	r3, r2
 800155a:	600b      	str	r3, [r1, #0]
 800155c:	e015      	b.n	800158a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800155e:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <HAL_RCC_OscConfig+0x270>)
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001564:	f7ff fc4a 	bl	8000dfc <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800156c:	f7ff fc46 	bl	8000dfc <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e180      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157e:	4b1d      	ldr	r3, [pc, #116]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b00      	cmp	r3, #0
 8001594:	d03a      	beq.n	800160c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d019      	beq.n	80015d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800159e:	4b17      	ldr	r3, [pc, #92]	; (80015fc <HAL_RCC_OscConfig+0x274>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a4:	f7ff fc2a 	bl	8000dfc <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ac:	f7ff fc26 	bl	8000dfc <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e160      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015be:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <HAL_RCC_OscConfig+0x26c>)
 80015c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0f0      	beq.n	80015ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015ca:	2001      	movs	r0, #1
 80015cc:	f000 face 	bl	8001b6c <RCC_Delay>
 80015d0:	e01c      	b.n	800160c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <HAL_RCC_OscConfig+0x274>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d8:	f7ff fc10 	bl	8000dfc <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015de:	e00f      	b.n	8001600 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e0:	f7ff fc0c 	bl	8000dfc <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d908      	bls.n	8001600 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e146      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
 80015f2:	bf00      	nop
 80015f4:	40021000 	.word	0x40021000
 80015f8:	42420000 	.word	0x42420000
 80015fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001600:	4b92      	ldr	r3, [pc, #584]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1e9      	bne.n	80015e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	2b00      	cmp	r3, #0
 8001616:	f000 80a6 	beq.w	8001766 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800161a:	2300      	movs	r3, #0
 800161c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800161e:	4b8b      	ldr	r3, [pc, #556]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10d      	bne.n	8001646 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800162a:	4b88      	ldr	r3, [pc, #544]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	4a87      	ldr	r2, [pc, #540]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 8001630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001634:	61d3      	str	r3, [r2, #28]
 8001636:	4b85      	ldr	r3, [pc, #532]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001642:	2301      	movs	r3, #1
 8001644:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001646:	4b82      	ldr	r3, [pc, #520]	; (8001850 <HAL_RCC_OscConfig+0x4c8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164e:	2b00      	cmp	r3, #0
 8001650:	d118      	bne.n	8001684 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001652:	4b7f      	ldr	r3, [pc, #508]	; (8001850 <HAL_RCC_OscConfig+0x4c8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a7e      	ldr	r2, [pc, #504]	; (8001850 <HAL_RCC_OscConfig+0x4c8>)
 8001658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800165e:	f7ff fbcd 	bl	8000dfc <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001666:	f7ff fbc9 	bl	8000dfc <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b64      	cmp	r3, #100	; 0x64
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e103      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001678:	4b75      	ldr	r3, [pc, #468]	; (8001850 <HAL_RCC_OscConfig+0x4c8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001680:	2b00      	cmp	r3, #0
 8001682:	d0f0      	beq.n	8001666 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d106      	bne.n	800169a <HAL_RCC_OscConfig+0x312>
 800168c:	4b6f      	ldr	r3, [pc, #444]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	4a6e      	ldr	r2, [pc, #440]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6213      	str	r3, [r2, #32]
 8001698:	e02d      	b.n	80016f6 <HAL_RCC_OscConfig+0x36e>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10c      	bne.n	80016bc <HAL_RCC_OscConfig+0x334>
 80016a2:	4b6a      	ldr	r3, [pc, #424]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	4a69      	ldr	r2, [pc, #420]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	f023 0301 	bic.w	r3, r3, #1
 80016ac:	6213      	str	r3, [r2, #32]
 80016ae:	4b67      	ldr	r3, [pc, #412]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	4a66      	ldr	r2, [pc, #408]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	f023 0304 	bic.w	r3, r3, #4
 80016b8:	6213      	str	r3, [r2, #32]
 80016ba:	e01c      	b.n	80016f6 <HAL_RCC_OscConfig+0x36e>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	2b05      	cmp	r3, #5
 80016c2:	d10c      	bne.n	80016de <HAL_RCC_OscConfig+0x356>
 80016c4:	4b61      	ldr	r3, [pc, #388]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	4a60      	ldr	r2, [pc, #384]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016ca:	f043 0304 	orr.w	r3, r3, #4
 80016ce:	6213      	str	r3, [r2, #32]
 80016d0:	4b5e      	ldr	r3, [pc, #376]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	4a5d      	ldr	r2, [pc, #372]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6213      	str	r3, [r2, #32]
 80016dc:	e00b      	b.n	80016f6 <HAL_RCC_OscConfig+0x36e>
 80016de:	4b5b      	ldr	r3, [pc, #364]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	4a5a      	ldr	r2, [pc, #360]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	6213      	str	r3, [r2, #32]
 80016ea:	4b58      	ldr	r3, [pc, #352]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016ec:	6a1b      	ldr	r3, [r3, #32]
 80016ee:	4a57      	ldr	r2, [pc, #348]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80016f0:	f023 0304 	bic.w	r3, r3, #4
 80016f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d015      	beq.n	800172a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fe:	f7ff fb7d 	bl	8000dfc <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001704:	e00a      	b.n	800171c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001706:	f7ff fb79 	bl	8000dfc <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	f241 3288 	movw	r2, #5000	; 0x1388
 8001714:	4293      	cmp	r3, r2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e0b1      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800171c:	4b4b      	ldr	r3, [pc, #300]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0ee      	beq.n	8001706 <HAL_RCC_OscConfig+0x37e>
 8001728:	e014      	b.n	8001754 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172a:	f7ff fb67 	bl	8000dfc <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001730:	e00a      	b.n	8001748 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001732:	f7ff fb63 	bl	8000dfc <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001740:	4293      	cmp	r3, r2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e09b      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001748:	4b40      	ldr	r3, [pc, #256]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1ee      	bne.n	8001732 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001754:	7dfb      	ldrb	r3, [r7, #23]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d105      	bne.n	8001766 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800175a:	4b3c      	ldr	r3, [pc, #240]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	4a3b      	ldr	r2, [pc, #236]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 8001760:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001764:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 8087 	beq.w	800187e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001770:	4b36      	ldr	r3, [pc, #216]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 030c 	and.w	r3, r3, #12
 8001778:	2b08      	cmp	r3, #8
 800177a:	d061      	beq.n	8001840 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d146      	bne.n	8001812 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001784:	4b33      	ldr	r3, [pc, #204]	; (8001854 <HAL_RCC_OscConfig+0x4cc>)
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178a:	f7ff fb37 	bl	8000dfc <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001792:	f7ff fb33 	bl	8000dfc <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e06d      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017a4:	4b29      	ldr	r3, [pc, #164]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f0      	bne.n	8001792 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b8:	d108      	bne.n	80017cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017ba:	4b24      	ldr	r3, [pc, #144]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	4921      	ldr	r1, [pc, #132]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017cc:	4b1f      	ldr	r3, [pc, #124]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a19      	ldr	r1, [r3, #32]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017dc:	430b      	orrs	r3, r1
 80017de:	491b      	ldr	r1, [pc, #108]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017e4:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <HAL_RCC_OscConfig+0x4cc>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ea:	f7ff fb07 	bl	8000dfc <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f2:	f7ff fb03 	bl	8000dfc <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e03d      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001804:	4b11      	ldr	r3, [pc, #68]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0f0      	beq.n	80017f2 <HAL_RCC_OscConfig+0x46a>
 8001810:	e035      	b.n	800187e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001812:	4b10      	ldr	r3, [pc, #64]	; (8001854 <HAL_RCC_OscConfig+0x4cc>)
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001818:	f7ff faf0 	bl	8000dfc <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001820:	f7ff faec 	bl	8000dfc <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e026      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_RCC_OscConfig+0x4c4>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x498>
 800183e:	e01e      	b.n	800187e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	69db      	ldr	r3, [r3, #28]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d107      	bne.n	8001858 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e019      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
 800184c:	40021000 	.word	0x40021000
 8001850:	40007000 	.word	0x40007000
 8001854:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <HAL_RCC_OscConfig+0x500>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	429a      	cmp	r2, r3
 800186a:	d106      	bne.n	800187a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001876:	429a      	cmp	r2, r3
 8001878:	d001      	beq.n	800187e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40021000 	.word	0x40021000

0800188c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0d0      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018a0:	4b6a      	ldr	r3, [pc, #424]	; (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d910      	bls.n	80018d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ae:	4b67      	ldr	r3, [pc, #412]	; (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f023 0207 	bic.w	r2, r3, #7
 80018b6:	4965      	ldr	r1, [pc, #404]	; (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018be:	4b63      	ldr	r3, [pc, #396]	; (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d001      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e0b8      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d020      	beq.n	800191e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018e8:	4b59      	ldr	r3, [pc, #356]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	4a58      	ldr	r2, [pc, #352]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 80018ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0308 	and.w	r3, r3, #8
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001900:	4b53      	ldr	r3, [pc, #332]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	4a52      	ldr	r2, [pc, #328]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001906:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800190a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800190c:	4b50      	ldr	r3, [pc, #320]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	494d      	ldr	r1, [pc, #308]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	4313      	orrs	r3, r2
 800191c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d040      	beq.n	80019ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d107      	bne.n	8001942 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001932:	4b47      	ldr	r3, [pc, #284]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d115      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e07f      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b02      	cmp	r3, #2
 8001948:	d107      	bne.n	800195a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194a:	4b41      	ldr	r3, [pc, #260]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d109      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e073      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195a:	4b3d      	ldr	r3, [pc, #244]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e06b      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800196a:	4b39      	ldr	r3, [pc, #228]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f023 0203 	bic.w	r2, r3, #3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	4936      	ldr	r1, [pc, #216]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001978:	4313      	orrs	r3, r2
 800197a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800197c:	f7ff fa3e 	bl	8000dfc <HAL_GetTick>
 8001980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001982:	e00a      	b.n	800199a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001984:	f7ff fa3a 	bl	8000dfc <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001992:	4293      	cmp	r3, r2
 8001994:	d901      	bls.n	800199a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e053      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199a:	4b2d      	ldr	r3, [pc, #180]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 020c 	and.w	r2, r3, #12
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d1eb      	bne.n	8001984 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019ac:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d210      	bcs.n	80019dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ba:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f023 0207 	bic.w	r2, r3, #7
 80019c2:	4922      	ldr	r1, [pc, #136]	; (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ca:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <HAL_RCC_ClockConfig+0x1c0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d001      	beq.n	80019dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e032      	b.n	8001a42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d008      	beq.n	80019fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019e8:	4b19      	ldr	r3, [pc, #100]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	4916      	ldr	r1, [pc, #88]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d009      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a06:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	490e      	ldr	r1, [pc, #56]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a1a:	f000 f821 	bl	8001a60 <HAL_RCC_GetSysClockFreq>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	091b      	lsrs	r3, r3, #4
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	490a      	ldr	r1, [pc, #40]	; (8001a54 <HAL_RCC_ClockConfig+0x1c8>)
 8001a2c:	5ccb      	ldrb	r3, [r1, r3]
 8001a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a32:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <HAL_RCC_ClockConfig+0x1cc>)
 8001a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <HAL_RCC_ClockConfig+0x1d0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff f99c 	bl	8000d78 <HAL_InitTick>

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40022000 	.word	0x40022000
 8001a50:	40021000 	.word	0x40021000
 8001a54:	080027b0 	.word	0x080027b0
 8001a58:	20000058 	.word	0x20000058
 8001a5c:	2000005c 	.word	0x2000005c

08001a60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b087      	sub	sp, #28
 8001a64:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	2300      	movs	r3, #0
 8001a74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a7a:	4b1e      	ldr	r3, [pc, #120]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d002      	beq.n	8001a90 <HAL_RCC_GetSysClockFreq+0x30>
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d003      	beq.n	8001a96 <HAL_RCC_GetSysClockFreq+0x36>
 8001a8e:	e027      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a92:	613b      	str	r3, [r7, #16]
      break;
 8001a94:	e027      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	0c9b      	lsrs	r3, r3, #18
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	4a17      	ldr	r2, [pc, #92]	; (8001afc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001aa0:	5cd3      	ldrb	r3, [r2, r3]
 8001aa2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d010      	beq.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001aae:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	0c5b      	lsrs	r3, r3, #17
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	4a11      	ldr	r2, [pc, #68]	; (8001b00 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001aba:	5cd3      	ldrb	r3, [r2, r3]
 8001abc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a0d      	ldr	r2, [pc, #52]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ac2:	fb03 f202 	mul.w	r2, r3, r2
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	e004      	b.n	8001ada <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a0c      	ldr	r2, [pc, #48]	; (8001b04 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ad4:	fb02 f303 	mul.w	r3, r2, r3
 8001ad8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	613b      	str	r3, [r7, #16]
      break;
 8001ade:	e002      	b.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ae2:	613b      	str	r3, [r7, #16]
      break;
 8001ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ae6:	693b      	ldr	r3, [r7, #16]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	371c      	adds	r7, #28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40021000 	.word	0x40021000
 8001af8:	007a1200 	.word	0x007a1200
 8001afc:	080027c8 	.word	0x080027c8
 8001b00:	080027d8 	.word	0x080027d8
 8001b04:	003d0900 	.word	0x003d0900

08001b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b0c:	4b02      	ldr	r3, [pc, #8]	; (8001b18 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	20000058 	.word	0x20000058

08001b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b20:	f7ff fff2 	bl	8001b08 <HAL_RCC_GetHCLKFreq>
 8001b24:	4602      	mov	r2, r0
 8001b26:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	0a1b      	lsrs	r3, r3, #8
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	4903      	ldr	r1, [pc, #12]	; (8001b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b32:	5ccb      	ldrb	r3, [r1, r3]
 8001b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	080027c0 	.word	0x080027c0

08001b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b48:	f7ff ffde 	bl	8001b08 <HAL_RCC_GetHCLKFreq>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	0adb      	lsrs	r3, r3, #11
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	4903      	ldr	r1, [pc, #12]	; (8001b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b5a:	5ccb      	ldrb	r3, [r1, r3]
 8001b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40021000 	.word	0x40021000
 8001b68:	080027c0 	.word	0x080027c0

08001b6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b74:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <RCC_Delay+0x34>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <RCC_Delay+0x38>)
 8001b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7e:	0a5b      	lsrs	r3, r3, #9
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	fb02 f303 	mul.w	r3, r2, r3
 8001b86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b88:	bf00      	nop
  }
  while (Delay --);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1e5a      	subs	r2, r3, #1
 8001b8e:	60fa      	str	r2, [r7, #12]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1f9      	bne.n	8001b88 <RCC_Delay+0x1c>
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	20000058 	.word	0x20000058
 8001ba4:	10624dd3 	.word	0x10624dd3

08001ba8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e076      	b.n	8001ca8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d108      	bne.n	8001bd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bca:	d009      	beq.n	8001be0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	61da      	str	r2, [r3, #28]
 8001bd2:	e005      	b.n	8001be0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7fe ff96 	bl	8000b2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2202      	movs	r2, #2
 8001c04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c64:	ea42 0103 	orr.w	r1, r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	0c1a      	lsrs	r2, r3, #16
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f002 0204 	and.w	r2, r2, #4
 8001c86:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	69da      	ldr	r2, [r3, #28]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c96:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	603b      	str	r3, [r7, #0]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_SPI_Transmit+0x22>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e12d      	b.n	8001f2e <HAL_SPI_Transmit+0x27e>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001cda:	f7ff f88f 	bl	8000dfc <HAL_GetTick>
 8001cde:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001ce0:	88fb      	ldrh	r3, [r7, #6]
 8001ce2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d002      	beq.n	8001cf6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001cf4:	e116      	b.n	8001f24 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d002      	beq.n	8001d02 <HAL_SPI_Transmit+0x52>
 8001cfc:	88fb      	ldrh	r3, [r7, #6]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d102      	bne.n	8001d08 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d06:	e10d      	b.n	8001f24 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	88fa      	ldrh	r2, [r7, #6]
 8001d20:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	88fa      	ldrh	r2, [r7, #6]
 8001d26:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d4e:	d10f      	bne.n	8001d70 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d6e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d7a:	2b40      	cmp	r3, #64	; 0x40
 8001d7c:	d007      	beq.n	8001d8e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d96:	d14f      	bne.n	8001e38 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <HAL_SPI_Transmit+0xf6>
 8001da0:	8afb      	ldrh	r3, [r7, #22]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d142      	bne.n	8001e2c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	881a      	ldrh	r2, [r3, #0]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	1c9a      	adds	r2, r3, #2
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001dca:	e02f      	b.n	8001e2c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d112      	bne.n	8001e00 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	881a      	ldrh	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	1c9a      	adds	r2, r3, #2
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	3b01      	subs	r3, #1
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	86da      	strh	r2, [r3, #54]	; 0x36
 8001dfe:	e015      	b.n	8001e2c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e00:	f7fe fffc 	bl	8000dfc <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d803      	bhi.n	8001e18 <HAL_SPI_Transmit+0x168>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e16:	d102      	bne.n	8001e1e <HAL_SPI_Transmit+0x16e>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d106      	bne.n	8001e2c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001e2a:	e07b      	b.n	8001f24 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1ca      	bne.n	8001dcc <HAL_SPI_Transmit+0x11c>
 8001e36:	e050      	b.n	8001eda <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d002      	beq.n	8001e46 <HAL_SPI_Transmit+0x196>
 8001e40:	8afb      	ldrh	r3, [r7, #22]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d144      	bne.n	8001ed0 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	330c      	adds	r3, #12
 8001e50:	7812      	ldrb	r2, [r2, #0]
 8001e52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e58:	1c5a      	adds	r2, r3, #1
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	3b01      	subs	r3, #1
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001e6c:	e030      	b.n	8001ed0 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d113      	bne.n	8001ea4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	330c      	adds	r3, #12
 8001e86:	7812      	ldrb	r2, [r2, #0]
 8001e88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ea2:	e015      	b.n	8001ed0 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ea4:	f7fe ffaa 	bl	8000dfc <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d803      	bhi.n	8001ebc <HAL_SPI_Transmit+0x20c>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eba:	d102      	bne.n	8001ec2 <HAL_SPI_Transmit+0x212>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d106      	bne.n	8001ed0 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001ece:	e029      	b.n	8001f24 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1c9      	bne.n	8001e6e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	6839      	ldr	r1, [r7, #0]
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f000 f8b2 	bl	8002048 <SPI_EndRxTxTransaction>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d002      	beq.n	8001ef0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2220      	movs	r2, #32
 8001eee:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10a      	bne.n	8001f0e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ef8:	2300      	movs	r3, #0
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	613b      	str	r3, [r7, #16]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d002      	beq.n	8001f1c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	77fb      	strb	r3, [r7, #31]
 8001f1a:	e003      	b.n	8001f24 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3720      	adds	r7, #32
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	4613      	mov	r3, r2
 8001f46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001f48:	f7fe ff58 	bl	8000dfc <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f50:	1a9b      	subs	r3, r3, r2
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	4413      	add	r3, r2
 8001f56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001f58:	f7fe ff50 	bl	8000dfc <HAL_GetTick>
 8001f5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001f5e:	4b39      	ldr	r3, [pc, #228]	; (8002044 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	015b      	lsls	r3, r3, #5
 8001f64:	0d1b      	lsrs	r3, r3, #20
 8001f66:	69fa      	ldr	r2, [r7, #28]
 8001f68:	fb02 f303 	mul.w	r3, r2, r3
 8001f6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f6e:	e054      	b.n	800201a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f76:	d050      	beq.n	800201a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001f78:	f7fe ff40 	bl	8000dfc <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	69fa      	ldr	r2, [r7, #28]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d902      	bls.n	8001f8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d13d      	bne.n	800200a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001f9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fa6:	d111      	bne.n	8001fcc <SPI_WaitFlagStateUntilTimeout+0x94>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fb0:	d004      	beq.n	8001fbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fba:	d107      	bne.n	8001fcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fd4:	d10f      	bne.n	8001ff6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ff4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e017      	b.n	800203a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	3b01      	subs	r3, #1
 8002018:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	4013      	ands	r3, r2
 8002024:	68ba      	ldr	r2, [r7, #8]
 8002026:	429a      	cmp	r2, r3
 8002028:	bf0c      	ite	eq
 800202a:	2301      	moveq	r3, #1
 800202c:	2300      	movne	r3, #0
 800202e:	b2db      	uxtb	r3, r3
 8002030:	461a      	mov	r2, r3
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	429a      	cmp	r2, r3
 8002036:	d19b      	bne.n	8001f70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3720      	adds	r7, #32
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000058 	.word	0x20000058

08002048 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af02      	add	r7, sp, #8
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2200      	movs	r2, #0
 800205c:	2180      	movs	r1, #128	; 0x80
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f7ff ff6a 	bl	8001f38 <SPI_WaitFlagStateUntilTimeout>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d007      	beq.n	800207a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206e:	f043 0220 	orr.w	r2, r3, #32
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e000      	b.n	800207c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e041      	b.n	800211a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d106      	bne.n	80020b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7fe fd7c 	bl	8000ba8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3304      	adds	r3, #4
 80020c0:	4619      	mov	r1, r3
 80020c2:	4610      	mov	r0, r2
 80020c4:	f000 f8f4 	bl	80022b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b084      	sub	sp, #16
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002136:	2b01      	cmp	r3, #1
 8002138:	d101      	bne.n	800213e <HAL_TIM_ConfigClockSource+0x1c>
 800213a:	2302      	movs	r3, #2
 800213c:	e0b4      	b.n	80022a8 <HAL_TIM_ConfigClockSource+0x186>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2202      	movs	r2, #2
 800214a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800215c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002164:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002176:	d03e      	beq.n	80021f6 <HAL_TIM_ConfigClockSource+0xd4>
 8002178:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800217c:	f200 8087 	bhi.w	800228e <HAL_TIM_ConfigClockSource+0x16c>
 8002180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002184:	f000 8086 	beq.w	8002294 <HAL_TIM_ConfigClockSource+0x172>
 8002188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800218c:	d87f      	bhi.n	800228e <HAL_TIM_ConfigClockSource+0x16c>
 800218e:	2b70      	cmp	r3, #112	; 0x70
 8002190:	d01a      	beq.n	80021c8 <HAL_TIM_ConfigClockSource+0xa6>
 8002192:	2b70      	cmp	r3, #112	; 0x70
 8002194:	d87b      	bhi.n	800228e <HAL_TIM_ConfigClockSource+0x16c>
 8002196:	2b60      	cmp	r3, #96	; 0x60
 8002198:	d050      	beq.n	800223c <HAL_TIM_ConfigClockSource+0x11a>
 800219a:	2b60      	cmp	r3, #96	; 0x60
 800219c:	d877      	bhi.n	800228e <HAL_TIM_ConfigClockSource+0x16c>
 800219e:	2b50      	cmp	r3, #80	; 0x50
 80021a0:	d03c      	beq.n	800221c <HAL_TIM_ConfigClockSource+0xfa>
 80021a2:	2b50      	cmp	r3, #80	; 0x50
 80021a4:	d873      	bhi.n	800228e <HAL_TIM_ConfigClockSource+0x16c>
 80021a6:	2b40      	cmp	r3, #64	; 0x40
 80021a8:	d058      	beq.n	800225c <HAL_TIM_ConfigClockSource+0x13a>
 80021aa:	2b40      	cmp	r3, #64	; 0x40
 80021ac:	d86f      	bhi.n	800228e <HAL_TIM_ConfigClockSource+0x16c>
 80021ae:	2b30      	cmp	r3, #48	; 0x30
 80021b0:	d064      	beq.n	800227c <HAL_TIM_ConfigClockSource+0x15a>
 80021b2:	2b30      	cmp	r3, #48	; 0x30
 80021b4:	d86b      	bhi.n	800228e <HAL_TIM_ConfigClockSource+0x16c>
 80021b6:	2b20      	cmp	r3, #32
 80021b8:	d060      	beq.n	800227c <HAL_TIM_ConfigClockSource+0x15a>
 80021ba:	2b20      	cmp	r3, #32
 80021bc:	d867      	bhi.n	800228e <HAL_TIM_ConfigClockSource+0x16c>
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d05c      	beq.n	800227c <HAL_TIM_ConfigClockSource+0x15a>
 80021c2:	2b10      	cmp	r3, #16
 80021c4:	d05a      	beq.n	800227c <HAL_TIM_ConfigClockSource+0x15a>
 80021c6:	e062      	b.n	800228e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021d8:	f000 f943 	bl	8002462 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021ea:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	609a      	str	r2, [r3, #8]
      break;
 80021f4:	e04f      	b.n	8002296 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002206:	f000 f92c 	bl	8002462 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002218:	609a      	str	r2, [r3, #8]
      break;
 800221a:	e03c      	b.n	8002296 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002228:	461a      	mov	r2, r3
 800222a:	f000 f8a3 	bl	8002374 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2150      	movs	r1, #80	; 0x50
 8002234:	4618      	mov	r0, r3
 8002236:	f000 f8fa 	bl	800242e <TIM_ITRx_SetConfig>
      break;
 800223a:	e02c      	b.n	8002296 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002248:	461a      	mov	r2, r3
 800224a:	f000 f8c1 	bl	80023d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2160      	movs	r1, #96	; 0x60
 8002254:	4618      	mov	r0, r3
 8002256:	f000 f8ea 	bl	800242e <TIM_ITRx_SetConfig>
      break;
 800225a:	e01c      	b.n	8002296 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002268:	461a      	mov	r2, r3
 800226a:	f000 f883 	bl	8002374 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2140      	movs	r1, #64	; 0x40
 8002274:	4618      	mov	r0, r3
 8002276:	f000 f8da 	bl	800242e <TIM_ITRx_SetConfig>
      break;
 800227a:	e00c      	b.n	8002296 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4619      	mov	r1, r3
 8002286:	4610      	mov	r0, r2
 8002288:	f000 f8d1 	bl	800242e <TIM_ITRx_SetConfig>
      break;
 800228c:	e003      	b.n	8002296 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	73fb      	strb	r3, [r7, #15]
      break;
 8002292:	e000      	b.n	8002296 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002294:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a29      	ldr	r2, [pc, #164]	; (8002368 <TIM_Base_SetConfig+0xb8>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d00b      	beq.n	80022e0 <TIM_Base_SetConfig+0x30>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ce:	d007      	beq.n	80022e0 <TIM_Base_SetConfig+0x30>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a26      	ldr	r2, [pc, #152]	; (800236c <TIM_Base_SetConfig+0xbc>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d003      	beq.n	80022e0 <TIM_Base_SetConfig+0x30>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a25      	ldr	r2, [pc, #148]	; (8002370 <TIM_Base_SetConfig+0xc0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d108      	bne.n	80022f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a1c      	ldr	r2, [pc, #112]	; (8002368 <TIM_Base_SetConfig+0xb8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d00b      	beq.n	8002312 <TIM_Base_SetConfig+0x62>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002300:	d007      	beq.n	8002312 <TIM_Base_SetConfig+0x62>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a19      	ldr	r2, [pc, #100]	; (800236c <TIM_Base_SetConfig+0xbc>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d003      	beq.n	8002312 <TIM_Base_SetConfig+0x62>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a18      	ldr	r2, [pc, #96]	; (8002370 <TIM_Base_SetConfig+0xc0>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d108      	bne.n	8002324 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	4313      	orrs	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	4313      	orrs	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a07      	ldr	r2, [pc, #28]	; (8002368 <TIM_Base_SetConfig+0xb8>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d103      	bne.n	8002358 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	615a      	str	r2, [r3, #20]
}
 800235e:	bf00      	nop
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr
 8002368:	40012c00 	.word	0x40012c00
 800236c:	40000400 	.word	0x40000400
 8002370:	40000800 	.word	0x40000800

08002374 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002374:	b480      	push	{r7}
 8002376:	b087      	sub	sp, #28
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	f023 0201 	bic.w	r2, r3, #1
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800239e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f023 030a 	bic.w	r3, r3, #10
 80023b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	621a      	str	r2, [r3, #32]
}
 80023c6:	bf00      	nop
 80023c8:	371c      	adds	r7, #28
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr

080023d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b087      	sub	sp, #28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	f023 0210 	bic.w	r2, r3, #16
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	031b      	lsls	r3, r3, #12
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800240c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	4313      	orrs	r3, r2
 8002416:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	621a      	str	r2, [r3, #32]
}
 8002424:	bf00      	nop
 8002426:	371c      	adds	r7, #28
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr

0800242e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800242e:	b480      	push	{r7}
 8002430:	b085      	sub	sp, #20
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002444:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	f043 0307 	orr.w	r3, r3, #7
 8002450:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	609a      	str	r2, [r3, #8]
}
 8002458:	bf00      	nop
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr

08002462 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002462:	b480      	push	{r7}
 8002464:	b087      	sub	sp, #28
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
 800246e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800247c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	021a      	lsls	r2, r3, #8
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	431a      	orrs	r2, r3
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	4313      	orrs	r3, r2
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	4313      	orrs	r3, r2
 800248e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	609a      	str	r2, [r3, #8]
}
 8002496:	bf00      	nop
 8002498:	371c      	adds	r7, #28
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr

080024a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d101      	bne.n	80024b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024b4:	2302      	movs	r3, #2
 80024b6:	e046      	b.n	8002546 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2202      	movs	r2, #2
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a16      	ldr	r2, [pc, #88]	; (8002550 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d00e      	beq.n	800251a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002504:	d009      	beq.n	800251a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a12      	ldr	r2, [pc, #72]	; (8002554 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d004      	beq.n	800251a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a10      	ldr	r2, [pc, #64]	; (8002558 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d10c      	bne.n	8002534 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002520:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	4313      	orrs	r3, r2
 800252a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr
 8002550:	40012c00 	.word	0x40012c00
 8002554:	40000400 	.word	0x40000400
 8002558:	40000800 	.word	0x40000800

0800255c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e042      	b.n	80025f4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d106      	bne.n	8002588 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7fe fb42 	bl	8000c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2224      	movs	r2, #36	; 0x24
 800258c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800259e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 f82b 	bl	80025fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695a      	ldr	r2, [r3, #20]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2220      	movs	r2, #32
 80025e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	4313      	orrs	r3, r2
 800262a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002636:	f023 030c 	bic.w	r3, r3, #12
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6812      	ldr	r2, [r2, #0]
 800263e:	68b9      	ldr	r1, [r7, #8]
 8002640:	430b      	orrs	r3, r1
 8002642:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699a      	ldr	r2, [r3, #24]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a2c      	ldr	r2, [pc, #176]	; (8002710 <UART_SetConfig+0x114>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d103      	bne.n	800266c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002664:	f7ff fa6e 	bl	8001b44 <HAL_RCC_GetPCLK2Freq>
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	e002      	b.n	8002672 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800266c:	f7ff fa56 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
 8002670:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	4613      	mov	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	009a      	lsls	r2, r3, #2
 800267c:	441a      	add	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	fbb2 f3f3 	udiv	r3, r2, r3
 8002688:	4a22      	ldr	r2, [pc, #136]	; (8002714 <UART_SetConfig+0x118>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	095b      	lsrs	r3, r3, #5
 8002690:	0119      	lsls	r1, r3, #4
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	009a      	lsls	r2, r3, #2
 800269c:	441a      	add	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80026a8:	4b1a      	ldr	r3, [pc, #104]	; (8002714 <UART_SetConfig+0x118>)
 80026aa:	fba3 0302 	umull	r0, r3, r3, r2
 80026ae:	095b      	lsrs	r3, r3, #5
 80026b0:	2064      	movs	r0, #100	; 0x64
 80026b2:	fb00 f303 	mul.w	r3, r0, r3
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	3332      	adds	r3, #50	; 0x32
 80026bc:	4a15      	ldr	r2, [pc, #84]	; (8002714 <UART_SetConfig+0x118>)
 80026be:	fba2 2303 	umull	r2, r3, r2, r3
 80026c2:	095b      	lsrs	r3, r3, #5
 80026c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026c8:	4419      	add	r1, r3
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	4613      	mov	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	009a      	lsls	r2, r3, #2
 80026d4:	441a      	add	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80026e0:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <UART_SetConfig+0x118>)
 80026e2:	fba3 0302 	umull	r0, r3, r3, r2
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	2064      	movs	r0, #100	; 0x64
 80026ea:	fb00 f303 	mul.w	r3, r0, r3
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	3332      	adds	r3, #50	; 0x32
 80026f4:	4a07      	ldr	r2, [pc, #28]	; (8002714 <UART_SetConfig+0x118>)
 80026f6:	fba2 2303 	umull	r2, r3, r2, r3
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	f003 020f 	and.w	r2, r3, #15
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	440a      	add	r2, r1
 8002706:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002708:	bf00      	nop
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40013800 	.word	0x40013800
 8002714:	51eb851f 	.word	0x51eb851f

08002718 <memset>:
 8002718:	4603      	mov	r3, r0
 800271a:	4402      	add	r2, r0
 800271c:	4293      	cmp	r3, r2
 800271e:	d100      	bne.n	8002722 <memset+0xa>
 8002720:	4770      	bx	lr
 8002722:	f803 1b01 	strb.w	r1, [r3], #1
 8002726:	e7f9      	b.n	800271c <memset+0x4>

08002728 <__libc_init_array>:
 8002728:	b570      	push	{r4, r5, r6, lr}
 800272a:	2600      	movs	r6, #0
 800272c:	4d0c      	ldr	r5, [pc, #48]	; (8002760 <__libc_init_array+0x38>)
 800272e:	4c0d      	ldr	r4, [pc, #52]	; (8002764 <__libc_init_array+0x3c>)
 8002730:	1b64      	subs	r4, r4, r5
 8002732:	10a4      	asrs	r4, r4, #2
 8002734:	42a6      	cmp	r6, r4
 8002736:	d109      	bne.n	800274c <__libc_init_array+0x24>
 8002738:	f000 f81a 	bl	8002770 <_init>
 800273c:	2600      	movs	r6, #0
 800273e:	4d0a      	ldr	r5, [pc, #40]	; (8002768 <__libc_init_array+0x40>)
 8002740:	4c0a      	ldr	r4, [pc, #40]	; (800276c <__libc_init_array+0x44>)
 8002742:	1b64      	subs	r4, r4, r5
 8002744:	10a4      	asrs	r4, r4, #2
 8002746:	42a6      	cmp	r6, r4
 8002748:	d105      	bne.n	8002756 <__libc_init_array+0x2e>
 800274a:	bd70      	pop	{r4, r5, r6, pc}
 800274c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002750:	4798      	blx	r3
 8002752:	3601      	adds	r6, #1
 8002754:	e7ee      	b.n	8002734 <__libc_init_array+0xc>
 8002756:	f855 3b04 	ldr.w	r3, [r5], #4
 800275a:	4798      	blx	r3
 800275c:	3601      	adds	r6, #1
 800275e:	e7f2      	b.n	8002746 <__libc_init_array+0x1e>
 8002760:	080027dc 	.word	0x080027dc
 8002764:	080027dc 	.word	0x080027dc
 8002768:	080027dc 	.word	0x080027dc
 800276c:	080027e0 	.word	0x080027e0

08002770 <_init>:
 8002770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002772:	bf00      	nop
 8002774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002776:	bc08      	pop	{r3}
 8002778:	469e      	mov	lr, r3
 800277a:	4770      	bx	lr

0800277c <_fini>:
 800277c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277e:	bf00      	nop
 8002780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002782:	bc08      	pop	{r3}
 8002784:	469e      	mov	lr, r3
 8002786:	4770      	bx	lr
